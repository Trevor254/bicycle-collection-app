%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 102201 Collection silhouette of people use bicycle.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: USER
%%CreationDate: 10/21/2022
%%BoundingBox: 0 0 4000 1500
%%HiResBoundingBox: 0 0 4000 1500
%%CropBox: 0 0 4000 1500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.0 x530 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 6112 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDEAFFA8A8FD33FF522752FD0FFFA8
%5252FD0CFF7D2752A8FD25FFA827F827A8FD30FF52F8F8F852FD0DFFA8F8
%F8F852FD0AFFA8F8F8F852FD0FFFA8F8F87DFD12FF7DF8F8F8A8FD0EFFA8
%A8A8FD1FFFA8F8F8F87DFD0EFFF8F8F827FD0AFF7DF8F8F827FD0FFF27F8
%F827FD12FF7DF8F827FD0EFFA827F827FD1FFFA8FD04F87DA8FD0CFF27F8
%F8F82752FD09FF52F8F8F82752A8FD0BFFA8FD04F85252A8FD0FFFA8F8F8
%F87DFD0DFF27F8F8F8A8FD1FFFFD05F827A8FD0AFF7DFD06F87DFD09FFFD
%06F87DFD0BFF7DFD06F87DFD0DFFA8FD05F87DFD0CFFFD05F827A8FD1CFF
%7DFD06F87DFD09FFA8FD07F827FD08FF52FD07F852FD0AFFA8FD07F87DFD
%0BFFA8FD07F8A8FD0BFF7DFD05F82727A8FD1AFF27F827FD05F87DFD08FF
%A827FD07F8A8FD07FF7DFD08F87DFD09FF52FD08F8A8FD0AFF27FD06F827
%A8FD0CFF27FD05F87DFD1AFF7DF8A8FF27FD05F8A8FD07FFA8F85252FD05
%F827FD07FF52F85227FD05F827FD09FF7DF85227FD06F8FD09FF27F852A8
%FD04F827FD0CFF7DFD07F8A8FD19FFF852FFFF27FD05F827FD07FFA8F87D
%FFFD05F827FD07FF27F8FFFFA8FD05F8A8FD08FF7DF8A8FF7DFD05F87DFD
%07FF52F87DFFFFA8F8F8F827A8FD0BFFF827A852FD05F8A8FD17FF27F8A8
%FF7DF87D52FD04F87DFD07FFF8A87DFD06F8FD06FFA8F852FFFFA8FD05F8
%7DFD08FF7DF8FFFFFFFD05F852FD06FF27F827FFFFFFA8FD04F87DFD0AFF
%27F8A8FFA8FD05F827FD16FF7DF87DFFFF2727FF27FD04F87DFD06FFA8F8
%A8A8F8F8F827F852FD06FF52F8A8FFFF7DFD04F827FD09FF52F8FFFFFF27
%FD04F87DFD05FF7DF8F827F827FD06F827FD09FF27F87DFFFF52FD06F8A8
%FD14FF52F87DFFFF7DF8A852FD05F852FD06FFA8F8FF7DF8F827F8F87DFD
%06FF2727FFFFA8FD05F8A8FD08FF7D52F8A8277DFD04F852FD07FFA8A8A8
%FD08F827A8FD05FFA852F827A8FFFF52FD07F8A8FD13FF52F8F87D527DF8
%A852FD05F827FD07FFA8277D52F8F827F8F8A8FD05FF7DF8FF7D7DFD05F8
%FD0AFF27F8275252FD04F852FD0AFFA8FD05F827F8F8F8FD06FFA8F82752
%527D7DF8F8F827F8F8F852FD14FF52F87DA87DF8F8FF52F8F8F827A8FD08
%FFA8F82752F8F8A827F87DFD04FFA8F827275227FD05F852FD09FF27F852
%FFFF27F8F8F827FD0AFF7D27F8277DA827F8F852FD06FF7D5252A82727F8
%F8F85227F8F827A8FD14FFA8A852FFA8F8F87D27F8F8F87DFD0AFF527DFF
%27F82752F852FD04FFA8F827FFFFA82727FD04F87DA87DFD06FF52F8A8FF
%FF27FD04F82727FD07FFA87D27F827FFFF27F8F8A8FD08FFA8FFFF27F8F8
%F82727F8277D52F827A8FD15FF7DF8F8527DF8F8F8A8A827F8277DFD05FF
%A87DFF7DF82727F8F8FD05FFA8527DFF52F8F8F8527DFD05F8FD05FFA8A8
%7D27FD04F82727F8F827FD06FFA87D52F8F8A8A8F8F827FD09FF7D5252FD
%07F852F8F852F8F8A8FD11FF7D2727F8F8F85252F827F82727275227F87D
%FD07FF7DF8F87DF8F8A8FD06FF7DFD05F87DA8F8F8F87D5227FD06FF52F8
%52F8F8F82727F827F8A8FD05FF7D7D527DF8FF7DF8F8A8FD08FF27FD04F8
%27FD06F852A8A8A8F852FD10FF27F852F8F8F827F8F8F852F8F827A8A8A8
%27F8A8FD06FF7DFD05F87DFD05FF7DF85227FD08F8527DF8A8FD05FF2752
%5227FD07F852FD05FFA85227A8F8277DF827FD08FF27F87D7DFD09F82752
%7D7D52F8FD0FFF52F8A8A827F8272727F82727F8F827527D7DA8F8A8FD06
%FF52F8F8F827F827FD05FF2752A8522727FD06F827A8527DFD05FF277D7D
%52FD06F85227FD05FFA87DF87D27F85227F8FD07FF7D277DFF2727522727
%FD04F87D27F8F87D7D27FD0EFFA8F87DA8522727522752FD04F85252F8F8
%527D2752FD06FF7DF8F8F827F8F8A8FFFFFF7D27A87DF85252FD07F8277D
%52FD05FF27522727FD06F82727A8FD05FF52FD04F827F8F8F852FD05FF27
%52A8272727A8F87DF8F8F8275227F8F8527D27FD0EFF52527D7D2727277D
%F8FF27F8F8277D52F8F827A8277DFD06FF7D2727FD04F8A8FFFFFF7D27A8
%52F827A8FD04F82727F8525252FD05FF275227F827FD07F8A8FD04FF52F8
%27A82727F8F8F827F87DFFFFFFA8F8A87DF8F8277D27A827F8F8F827F852
%27A8277DFD0EFF2752A827F8F87DA827A852FD05F827F8527D277DFD06FF
%7DF827FD04F87DFFFFFF5252A827F852A827FD04F8527D527D27FD05FF27
%5227F827FD05F827277DFFFFFF2727F8F8A8A8FD05F82727FFFFFF7D277D
%7DF8F8527DF8FFF8F8F82752527DA87DF8A8FD0EFF27A8A852F8F8A8A827
%FFF8F8F8275252527DA87DF8FD07FFA82727F8F82727A8FFFFFF7D27FF52
%F87DFF27F8F82752FF7DA8527DFD05FF52277D2752F8F8F827277D27A8FF
%FFA8277D27F8A87DF8F827F8F8F852FFFFFFA8F8A87D7D52A82752FF7DF8
%52F852A8A87DF852FD0FFF27527D7D5227A8525227F8F87DF87D277D7DA8
%F852FD07FFA82727275227277DFFFFFF7D27A8FD047DF8F852A8277DA87D
%F8A8FD05FF7DF87D5227F8F852F8F85227A8FFFF7D2752F827527DF827F8
%F8F82727FFFFFFA8F8527D7DA852F8A8FFFFA8FF7DF827F8F852FD10FF27
%277DA87DA87D275227F8FFFF52F87DA87DF827FD09FF27527D7D5227A8FD
%04FFF87DA8A8A852F852FFFF7DF8272727FD07FFF8527D27F852FFA8F8F8
%52FFFFFF7D5227275252FF5252F8277DF852FD04FF27F8527D27F87DFD06
%FFA82752A8FD11FF7DF87D7DA87D2727FD06FF52F8F8F852A8FD09FF5252
%27A87DF87DFD04FF52F8A87DA8F87DFD04FF7D2727FD08FF7DF827F87DFF
%FFFFA852FD04FFA8277D525252FFFFA8FD04F87DFD05FF27F8F8F87DFD1D
%FF52F85227F827FD09FF7DFD0CFFA8F827A8FF7DFD06FF27277D2727FD11
%FF7DF852FD0BFF27527DF8A8FD04FFA8527DFD07FFA8A8FD20FF7D272752
%FD18FF7D52FD09FFA827F852A8FD1FFF7D27F852FD7DFFA8A8FDFCFFFDFC
%FFFDFCFFFDFCFFFDB8FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <pdf:Producer>GPL Ghostscript 9.23</pdf:Producer>
         <xmp:ModifyDate>2022-10-21T21:09:25+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2022-10-21T21:09:25+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Windows)</xmp:CreatorTool>
         <xmp:MetadataDate>2022-10-21T21:09:25+07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>96</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAYAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxb8&#xA;yfzG8v8A5feWJPMGt+o8AkS3t7eABpZp5ASsaciq/ZRmNT0BxVi35Qf85BeWPzMv73TLGyudO1Oz&#xA;h+sm3uODrJAGVGdHQ/su6gggdRSu9FXqWKuxV2KvI/zH/wCcmPIfkTzQfLl9b3t/fQqjXzWaRlIP&#xA;UAZVPqSR8n4MGoPEb+Cr03Qdc03XtFsda0yX1tP1GFLm1kIKkxyLyFVO4PiD0xVH4qp3Vzb2ttLd&#xA;XEgit4EaWaVtlVEHJmPsAMVeG6B/zl55D1vzjZeX7fTb6G2v7lLS31Ob01X1JDwjLRhmZVZyBWuw&#xA;3IxV7tirsVdiqndXVtaW0t1dSpBbW6NLPPIwVEjQcmdmOwCgVJOKsV8o/m1+XPnDUp9N8ua5DqF/&#xA;bJ6ktuqyRsUrQsnqonqAV3KVp3xVl2KuxV2KuxV49+ev/OQSflhe6bp0Gj/pW9v4muGLzehFHErc&#xA;BuEkLMWB8KYqzT8rPzEsvzB8mWnmW1tXsvXaSKe0kYSGOWJuLKHAXmOhBoPlirLcVdirsVUI9QsJ&#xA;bp7SO5ie6iFZLdXUyKPFkBqMVV8VdirsVdirsVdirsVeM/8AOW36IP5NXov5FS5+t2p0wMiuzXIk&#xA;3VKiqn0PUqwptUdDQqvj/wDLL8zvMf5deYH1vQkt5ZpoTbXMF1HzjkhZlcrVSjr8SKaqw6d8Vfdn&#xA;5NfmZF+Yfkm311o4oL9WaDULSFiwjlT2b4lDD4gDXbvirOsVad0jRpHIVEBZmPQAbknFX5zfnZ5z&#xA;0Dzp+Y+qeYtDtpbayvPSX9+QGleGNYvV4KPgDqg+GpPc9aBV6D+SP/OSvmby9qHl/wAqaolrJ5TV&#xA;47Fm9PhNAkr09b1A1DwZ+TcgaivfFX2ziqH1LT7TUtOutOvE9S0vYZLe4QEqWjlUo4qtCKqe2Kvz&#xA;g896ZZ+TfzN1aw8vXbSwaFqTLYXDVLo9vJUKxIWrROvAmlCRttir2j8tf+cxvMMGqx2nn2KK80qY&#xA;hW1G1iEdxASfttGnwSIO4VQ3hXpir600nVtM1fTbfU9Luo7zT7tBJb3MLB0dT3BH3HFUXirDfzk8&#xA;uXfmP8sPMWj2l6mnz3FqWF3KxSNVhdZnWRgCQjrGUY06E4q/P/yB551nyN5ptPMujpDJfWYkVIrl&#xA;WeFlljaNg4Ro26N2YYq+pPya/wCcs08za5HoHnS1tdLvL1wmnahac47UuRtFMs0kjIzHZW5UJNKD&#xA;qVX0dirsVU7i4gtreW5uJFht4UaSaZyFREQVZmY7AACpOKvgn/nI780fK/5g+boLzQrCSFNNjezb&#xA;U5HFbyJX5RsIQoKBWL8SWJIYVC0pir1T/nEr86Fk+r/ltqkMMPBJZNFvIwsXMg+o8EiKoDOfjcPW&#xA;p6GpxV9TYq7FWFfnTN5rh/K3zFL5U9Qa6tsDbtCeMqx+ov1hozVSHWDmVp8Vem9MVfA/5c+eLjyZ&#xA;5403zUsL3slhI8kluJfRaYSRtG6tIUlpyD7/AAnFX2r+Wv8Azkn+X/nS3soJ5/0N5hvJTbrosxeV&#xA;i43X05lRUZWB2JCmtRTFXrGKuxV2KuxV2KuxV80atNF+fH5yw6NCrTfl15MLyX8ykiO7uSeNAy9R&#xA;Iy8V3+wrMCOWKvGvzg/LzTf+Vj+b4PIVmz6J5chF3rChlENs9VE6RFqfCjvQJ12amwxVIfyd/NLV&#xA;fy684W2rQPJJpcpEWr2Cn4ZrdjuaHbmn2kPjt0JxV+idhfWt/Y299aSCa0u4knt5V6PHIoZGHzU1&#xA;xV1+paxuVChy0TgIxopJU7E1WgPzxV+fqfl7ojf84/t55d3j1uPXGso9/wB3JbtFHSMqf2kdWYMP&#xA;Eg12oq80xV+jX5GeZtQ8zflN5b1nUSzXs1s0M8jfaka1le29RveT0uR+eKs0vLy1srOe8u5Vhtba&#xA;N5riZzRUjjUs7MfAKK4q+OPIH5J6f+dN55483Nf3GkQ3etzSaPcCJZVImkkuJlliLIWIWaKlHFN+&#xA;uKvGPP3lJ/KHnHVfLT3kd+2mTeibuIFVf4Q32STxI5UYVNDir6R/5wj8yX8tp5j8uSl5LK1aC9ti&#xA;TVI2l5RyKAenPgp+g4q+o8VY1+ZscUn5b+a45SRE+jagshHUKbWQGn0Yq+TvIH/OMX+O/wAprDzP&#xA;peomx1+eW64w3ILWs0UUrRIKqOcbckPxDkPbFXgOKvvv/nGHz1qXm/8AKy2m1Kr3mj3D6VJcEkmZ&#xA;YIonjkYkk8vTmVWPciuKvWSQoJJoBuSegGKvmv8ANz8xNT/M7zAv5WeQLy2TTLjn+m9fllCQSi3A&#xA;kmggev71I1o0np1LeyAkqsT/AD+/5xx8s+S/y/sdf0O99OXSljtdSjuT+8vpJpdpUNaLIpY/AB9g&#xA;f5PxKvN/+ccNV03Tvzl8uPqMayW9xM1qnMBgs8yMtuwBB3E3Ch7dcVfoRirsVee/nh+aNn+X3ki6&#xA;v1lU65eK1totqSObzsKepx7pCDzbt0HVhir5H88f844+cvKf5fWHnO6kjeFoYpNYsDVLizeeTjGK&#xA;HZwAyB96qxO1BXFWO/lL+bHmH8ufMceo6dI0umzsq6rphP7u4iB968ZFqeDjcfIkFV+gvlHzPpvm&#xA;nyzpvmHTeX1LU4FniV6B15faRqEjkjAqaHqMVTfFXYq7FXYq+ffz8/Mn8xZPM6/lr5L04j9LQxW9&#xA;1qoHCb1LpZJDDbyyPDAjGCJviZqn4qUIriqV335paH+TP5fv5V0/ylqfl7zJLbF9Oe+S2niurliI&#xA;5Ll7m3lkWRoz8RWg24gAKRiryz81L7Uvy58uP+WESh9V1yODVvOetMxaW5uJHMi20Rr/AHUXEVbq&#xA;5r0qaqsF/L/8pPPnn6Vx5b0717aGRYrq+ldIoISwr8bMamg3ooJ9sVfod5T0MaB5W0bQhL640mxt&#xA;rH1qU5/VoVi5U7cuFcVV9fWNtC1FZWdIzazB3iFZApjapQd2HbFXw3d+YrK8/wCcYbLQLC1vTd6Z&#xA;rX1rWLsW8jWarIZVjBuP7tWb1Y6LWu3virzzUfKurWXk3R/MU1qg07Vbm7it71JOblrf01MUqDaO&#xA;h5FK7tU9gMVfon+XGnWWm+QPLllZKq2sOm2oj4MHU8oVYtyGzciS1e+KvOf+cofzLs/LfkmXyxGW&#xA;XWfNUMlpbSGghit2ZI7l5nJ2BjkKigPXFWNaN+cPkj8svyuOleVLDUdZGkQKyaxJY3Fvp13dzSr6&#xA;rNcFQV+KU8eQ6AKG6Yq+SdU1O817X7rU7+ZFvNUunuLqdqiMSTyF3Y05EKC3vtir71/5x/8Ayz8t&#xA;eSfJEMuk3sOr3esKlzf6zbnlFPxr6aRf8VxciBXetSaVoFXp2KvFP+covzF1byj5Vj0+3s4rrTPM&#xA;tnqWmX0jlllheW3WOF46HiR+9YsCO2KsJ0jXvzn/AC6/Jry5rGkaTYQ+WtIsjcajb3lwJ5rkX8vq&#xA;xzKkaxtEFa4+z6pPiNt1XyxpFlDf6tZWM1wtpDdTxQS3b7pEsjhWkYVXZAanfFX6P/lp+XukeQPK&#xA;Np5c0x2mjhLS3F1IAHmnkNXkYDYdgB2UAb9cVZDqWn2mpaddadex+rZ3sMlvcxVK8opVKOtVIIqr&#xA;Hpir5t/PD8ivyz8q/l9qNzoGnNBqjRBoGluJ5lhjtiJp5kjkZhyk4LEx/wAv71XzT5V8heevO128&#xA;fl/SrrVnQqk1woPpRkj4RJO5EabdOTYqgNF03VZfM9jpunDnqz3sVvaBDyBuPVCpQjqOeKv0/wAV&#xA;YN+cnmvzN5Z8mNeeV7eK5124uYbWzjmUutXJaRuIIrxjRj12G/bFXhWjXSaf5hs/P/5waNqnmW+u&#xA;LOK/03VdPh+uaLYW9OcYZESOJHj3Y0ZwD8X2vixV55+dP5v6/wDm55qt9E8vQXJ0GOUR6TpSKfVu&#xA;ZjUGeVFrVjU8R0VfctiryWfT7iLUH09ONxcrL6AFufVDycuNIytedW2BXr2xV+h35FeUNV8o/lVo&#xA;Oh6t8OowxyzXEPX0muZnn9L5oJKN/lVxVnuKuxV2KuxV47+cP5mflnpF3N5ZvdCfzZ5iuOFzPpFj&#xA;EJJYmijrFNLKPihdIzVWT41BrsDXFXzJ+c/5nXn5ieaLF7fSJNFi8t2rQnT5JOVwjQycpz/ulqoF&#xA;Hwj4gFJ+SqVeeNQ0Pzhq3ly10C7up72SH6rf3GpPcqiStOxUqtxc6i0cSxkFqTNvyNB0xVnX5I/m&#xA;15m0nyl/gvyVptuPMN1eSXmo6zqDcraKB/QtYWWNPjZuRVOhA60NTxVei6f+df5o+SdasB+Yctjr&#xA;Hlu/MC3OoWcYhuLP6woKuYwI+caNVZPgNGFKg8Qyr6TBDAEGoO4I6EYq8v8ANX5Z6Fo/5Z/mDp8V&#xA;x6ejatBe6pHZypGLexmEJlZogig8BNGJKfs02xV8OWGo2reTNR0h7+7humu7e6tdOB52dwQGicsv&#xA;+65owwKuPtKWU9sVfa3/ADirrv6V/JjSY3nE8+mS3FjKB9pAkpkiRvlFIlPamKsi/Mz8tfJvmSNf&#xA;MGtTPp1/okBltNZWQqLRYJUuvVaMn0mCtDvyHSvsQq+cvzq/PjzB5n8jWtrp2lTRaKt7EkXm6QNa&#xA;Pc3lmBKJLW3VmaEftg+o1K9jirybyQfy7v8AWtbn86yz2di+nXMumLA00jtqJdPRQsFkYgguavt4&#xA;nFUy/Lr8wfPcF1o3kjSvNN1ouiX+oRL60PFPQlu2SNnLGjekjnkycwp3PU4q+v8A8jvzE1fzHZ6n&#xA;5f8AMk0Vx5m8vSJHPeQjgl5azAm3u1Wi8S4BDrxFD1AJoFWS/mJ+WXlP8wNKg03zHBJLDazCe3kh&#xA;kMUiPSjUYV2ZdiCPxxV8ofmP56/MPXtB1630zU2/wVFN+h9P0UwxyNNp+nK7tePNxqGracmIavUb&#xA;KBVV4hYrpxju/rjOriAmzCCvKfmtAfbjyrir2f8A5x0/NjUfL3nTTrO5vrifSdan+p6vaTO8sUMk&#xA;rIlteqzEhC0z8JPbvuvFV9xYq8J/5yY1KO3sbqO4Ev1c6K9vVAeNL3VLBZWYjoFW3Ck/5YH7WKvO&#xA;PyguLz8r9d/NfyqZi+pWelS6howBH+kCyillhlQ+LQ3CSUXtXbbFUp/5w58hprPnm780XShrXy7E&#xA;Pq6mm93dBkQ08EjVz/rccVfaeKsO/M/8ztE8g6LFeX0Ul9qN/J9W0jR7ccp7u4NAI0ADUHxDk1DS&#xA;uwJIBVfLH5n/AJpfmhY+VJ/K0/lzRvKmj+YIxcHTdMi4XSQS8ZeUvCQxqbhWo1Ywx4sKLQ4q8O5z&#xA;6fe+pazyxMtWt7lKxSFGB4sKGq8lO++Kp/8Al9qb6bqpuIZV066LRovmKSNp106NyRJNHEFP79tl&#xA;icsOJr0JDoq9fvvJur6FFJ5l8peb9Tu/M+mxy3d7cSXHrw3LQTT+o23WEwwr8UjFWZ0X9sAKvqn8&#xA;u/Na+bfI+i+YwgjfUrVJpol3VJqcZVX2WRWAxVkWKuxVIfPnmdPK3kzWvMLKHOmWctxFGejyKp9N&#xA;DTsz0GKvmGWe88iflxPr+pWszeY/MKJfXWuXVrcMk91fOHktJJGijpxTjIBQr8EoVz6gXFXn2naC&#xA;j/l/qv5hW+nyRLpupWj2VzMJZDKkMkcDo8iq0X75py83OnJtlPwlWVST84vJP/KvvzJ1XQ7C45Wi&#xA;VlsmVgXW2u0JEUncMqOUNeo374qg9Pk8v6Z5ajutMvJ5fN0nJ5Ghle3jghkrCIOP7qSWWpEn7tmW&#xA;mzDY1VelaTrWqax+TfmWXzBbXEcTQObeZom9KYwsFjYzMTxWO7LBY+BQO548Hbkyr6/8jrcL5K8v&#xA;rc8vrI02zE3LduYgTlX3riqG/Mu1ku/y581Wkf8AeXGj38SUFTV7WRRt9OKvzengXT7iyuIZVmWS&#xA;OK5QjiSrA0dGB5qCsiMKEdKEjemKvp3/AJwi1qV5PNmkv8MLm2vYIxXirEyRy0rXt6ffFXqv/OR8&#xA;l1N+X9toUEjQjzJq+n6PPNGrSOsVxNyYqifExPp04jrWmKvn/wDOe/j/AMdeU/JllafVtOt7u3uD&#xA;p0qyRxRyyypbiKKNo2lELJF6gJRm/eFKfBxxV5X+a/lWPyt+YGr6LCrrbQyJLb+pE0B9OeNZl4xt&#xA;VlUc6ANuBsd64qhPLvlTWtbtJrnR7O5up9OBmu3WMC2it03MjTllo3Jtk4knqPDFX1T+Tl9rrfmd&#xA;oT6tbJDqN/5YuzqVxGjJ9ZlGoLM00gIQet60sgegoCSB7KvonFXwRrV9e6T5BsmWqJHea3ZTFYiw&#xA;juJxLbToZFKLykt7lQa148VNSKKFXlF1bSW07QuKMAp4kgkBlDANQmjUO47HbFUy0KbVIrbUvqVo&#xA;1wvoB7mVQ1YEjdZUmqtOPF0Xc7e2Kv0y0m9+vaVZXvT61BFN0p/eIG6b+OKvlH/nJT80tI8z/V9L&#xA;0m0uo7K1upbO48yK6LDPbwzwNeRxR0LOiXKW7LJUDku1RXFXnf5saF588i+eLPVta1j9Myxuf8P3&#xA;l7cC6uLiwiJ9OWVVZ6RtzIo7fFvsRXFUq/Knz7578k6neQ+W71bO6vJYYp9PuLdZo7uWFmVbdmYc&#xA;kb94fsEMfHFX3z5P8yWvmfyrpXmG1X04dUtYrlYialDIoLITtUo1VxV4Nrt9Dr35z+bNW1GKW8t/&#xA;K0Nvomi2cX21kuoybiRBU/GXYoCYnVg3EgbHFXkHkHVdR86fmfLrGt2yTrZxc9SnkcJaqttbrZ2x&#xA;cHnHzCK3EH1ObsfgYVXFUh88eX9Os/yp8ha0sLx3uqS6vFC9AA1nbXYMQfevIPM9DTcH2GKpf5It&#xA;teufLmu2+k6ctzHKYVv7tbkRTonxCOOOPkKq7t8RKMG2TZiKqs/8teWfNH5b6Z5t1TXrm2lt7ZJd&#xA;Lt7ZZJJRPdt+6heErwdOfAhG2JRHBpTiyr6x/KPy1c+Wfy08uaJdIY7u0sozdRHqk0tZZUP+q7kY&#xA;qy7FXYqwb88dEu9b/KTzRp1mpkuXsmmijUVZzbss/BR3LenQYq8HurDTPzL8nW140TXU95DDb20N&#xA;txjaCa1iE85YIETk7ILeHmCaNJUtxqFVO68uQS3enflD5TSPVYGuzq96/FI3TSopDeQRXF1Gq/HM&#xA;HjHJ1ahYABKUZVGaZ/zjr+YXnz8xdW80fmcIdNjMkckdlGRcw3KcWRYY2guI5Io4VROp5H6a4qwy&#xA;LTbT8vvMWn+V/OPp6IPL2oPq0OpR2XMa1HacprINOPU+FmHDjxopPxVcfCqzPyv5fm/NDUbbQdHi&#xA;uT+W1hqBvtY1u6Ro01FoiAIrdJFV63EiGWY7dRUAovJV9UgACg2A6DFVO6tobq2ltpl5wzo0cqno&#xA;VccWH3HFXw75d/LLSdb8xaJpmsvIJP0kvl+bTY348TaQSx3EwjWjJ8dr6jNy3LdOpxV6R/zi9pK6&#xA;P+YGtaOy+lf6ZZTWup23plfSmiltYyS52cSyRyyJTbidvZV6j/zkVpWoXX5azanpwdr7y5eWutwp&#xA;GeLkWUnKQqw6FY2Zq+2KsEl0Hy75w1XTfOGnwRy3M/P9CMB9abhb2sdzCLyWZpOc8stz6MoflQ0T&#xA;fiCVXnmn/k7rv5x/mRqnmF54rfyUl1LYprNly4yrZRrHH9XhuZHlCv8ADvuimoXYYq9C82aHqX5T&#xA;6rfpo3l2bVPy28xz2E+oW+mxCSexltJI/rCGIfbiuoo6HkQtWIqP2lU7/ILy15ju9f1jz7rlrdaf&#xA;a3cJ07y1p9+T9aSxac3M0syno001HPieR6UOKvbsVfI3n/QbPyv+aWueXdaYW+g+abuHXNBunIii&#xA;W6luIheAS0/dyJGZeB5UHwVFWUqqxP8ALD8lvMv5m+b4fMd/C0flB5+VxqjN6guRaMsbxIssgn/e&#xA;8COTD4fopiqZT/kv+aGleYb7yDFpVzqGlahIIdM8yCPlaQ2czxCWeeTiUEi29ssfpmhB+zWiYq+w&#xA;tXSa18uXqaeGWeCzlW0C7sHSIiOnvUDFXxK3l291O18vxokTeWbbR4Lm6llTi1fq6XN6i+m0pYer&#xA;AG+PizHZPtAFVnPmf8kfMPnny5+WfmcNJPpltoGn2euwxkfW0tIgZhLAjUEjNHKRStemxxV4FoGm&#xA;aVcwSazqepRm4tLtWuNLlEnqzxBWld/VVkPxMnpni3KrVqMVffX5LaNfaN+VXlnT75GjvEskkniY&#xA;UZGnJm4FaDjw9Tjx7dMVeHfmbNe/lp+auuatqlpPL5Q84CKeK/h5FYblE4TQycdx6i8w3Eq/Bvhb&#xA;jzRlUq0u5vPzCu5fLH5b6e9tYXtta2fmLzWLcWsMcC20UN0BxCNI0vBgEYioLfCa8kVfRGsflB5A&#xA;1ryfpnlHVdNFzo+kLEtgnN45IzEnDkJIijVYV5b798VebedP+cdNR0/zFF5k/Kw6XpkxgW2vdD1G&#xA;3WWzkCEFZU5pOA9VU/ZG45cqk1VRfkD8g/MJ1ux8xfmVq0Or3WlP6ukaLZqfqUEtBSWRmVGldQi0&#xA;qv7I+JgBir3HFXYq7FXYq8X17/nF3yzc65car5c1zVPKovJRPdWWmSiO3MorR41HEp9pqCpAr8IA&#xA;2xVnP5cflZ5S/L7TJbPQoHae6YPf6jct6l1cOOhkegFBXZVAHtUk4qy/FUPe6dp99GIr22iuogah&#xA;JkWRQfGjAjFVaOOOKNY41CRoKKigAADsAMVXYq7FWAj8mPKafmbF+YEDTQ6gvqSy2CsPqsl1JEYP&#xA;rRQiok9NyDQ0J+LrWqrNYdM02C+uNQhtIYr+8CLd3aRos0qxAiMSSAcnCAnjU7YqiHRJEaORQ6OC&#xA;rowqCDsQQcVeLXv/ADjFpYvLiHQ/NOraF5avXZ7vy/auDCObo7rbu/8AdBmiUn4W6DsAMVer+WvL&#xA;ejeWtCs9C0a3W102wjEdvCu+1almJ3ZmYlmY7kmuKpnirsVdiqQ+cPInlHzlp6af5m0yLUrWNucQ&#xA;k5K8bdzHJGUkSvfiwriqZaNo2laJpdtpWk2sdnp1mgjtraIURFG+307kncnFUZirsVeF6r/zjPNc&#xA;6rcWVn5jaz8j3kzzzaKLcG4ijmkSWa0guOQ4QyPEp+zVQKb71Ve32trb2lrDa20axW1uixQxKKKi&#xA;IAqqB4ACmKpTrPkjyfrc9lPq+jWd9Npz+pYyTwo5iatfhqOld6dK79cVTvFVO4t7e5heC4iSaCQU&#xA;kikUMjDwKmoOKut7a3toVgtokghQUSKNQigeAUUAxVUxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:adfb9d14-52d2-3743-939e-c20b8011f2fc</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:adfb9d14-52d2-3743-939e-c20b8011f2fc</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:325600bf-5388-11ed-0000-ac80a5b7b75f</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:82f299e6-d09a-5a4f-9c18-d6dc3c1e307e</stRef:instanceID>
            <stRef:documentID>xmp.did:82f299e6-d09a-5a4f-9c18-d6dc3c1e307e</stRef:documentID>
            <stRef:originalDocumentID>uuid:325600bf-5388-11ed-0000-ac80a5b7b75f</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f9915d3d-067d-7947-98da-2569f80e61db</stEvt:instanceID>
                  <stEvt:when>2022-10-21T17:53:26+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:adfb9d14-52d2-3743-939e-c20b8011f2fc</stEvt:instanceID>
                  <stEvt:when>2022-10-21T21:09:25+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4000.000000</stDim:w>
            <stDim:h>1500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1500 li
4000 1500 li
4000 0 li
cp
clp
4000 1500 mo
0 1500 li
0 -9.09495e-13 li
4000 -9.09495e-13 li
4000 1500 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
2128.01 467.639 mo
2128.01 467.639 2122.08 458.242 2119.53 453.872 cv
2119.35 453.576 2119.17 453.309 2118.95 453.06 cv
2130.16 448.919 2135.62 441.607 2135.62 441.607 cv
2127.23 449.085 2114.22 450.118 2114.22 450.118 cv
2110.85 448.606 2106.76 446.891 2103.83 442.013 cv
2098.91 433.805 2091.8 419.577 2094.54 409.175 cv
2097.27 398.782 2099.09 398.957 2099.09 398.957 cv
2099.09 398.957 2106.49 378.439 2111.77 371.505 cv
2117.06 364.57 2123.99 353.08 2142.24 350.526 cv
2160.48 347.971 2173.61 345.417 2180.18 347.971 cv
2186.74 350.526 2187.84 351.438 2191.12 355.275 cv
2194.41 359.102 2202.61 364.939 2204.07 367.862 cv
2205.54 370.776 2211.64 373.792 2213.65 382.358 cv
2215.66 390.935 2214.2 403.706 2212.74 406.261 cv
2211.28 408.815 2219.12 407.533 2219.49 413.371 cv
2219.86 419.208 2219.67 421.578 2219.67 421.578 cv
2219.67 421.578 2234.35 423.311 2251.14 423.311 cv
2267.92 423.311 2285.98 422.398 2295.46 430.246 cv
2304.94 438.084 2317.99 450.948 2332.22 460.253 cv
2346.45 469.557 2350.18 482.597 2364.6 496.097 cv
2379.01 509.597 2384.39 516.255 2389.87 523.005 cv
2395.33 529.752 2392.6 532.673 2393.88 536.686 cv
2393.88 536.686 2392.96 548.176 2386.03 554.744 cv
2379.1 561.311 2394.06 552.01 2395.89 540.699 cv
2395.89 540.699 2402.45 544.164 2406.82 553.284 cv
2411.2 562.405 2423.79 581.558 2419.41 616.218 cv
2415.04 650.875 2396.43 672.4 2383.3 679.332 cv
2370.17 686.266 2360.13 693.286 2360.13 693.286 cv
2362.18 726.714 li
2362.18 726.714 2370.12 738.937 2373.58 748.788 cv
2377.05 758.637 2379.06 763.381 2379.06 763.381 cv
2379.06 763.381 2379.06 763.689 2379.03 764.224 cv
2384.56 759.619 2390.67 756.702 2397.26 755.733 cv
2438.99 749.595 2484.92 823.418 2499.87 920.618 cv
2514.81 1017.82 2493.1 1101.59 2451.38 1107.73 cv
2421.15 1112.17 2388.73 1074.65 2367.47 1016.7 cv
2365.23 1018.02 2363.01 1019.26 2362.5 1019.26 cv
2361.41 1019.26 2365.7 1031.58 2359.67 1047.63 cv
2353.65 1063.68 2347.27 1064.96 2341.98 1064.23 cv
2336.69 1063.5 2336.51 1063.5 2336.51 1063.5 cv
2336.51 1063.5 2333.68 1072.16 2332.77 1082.01 cv
2331.85 1091.87 2331.31 1095.51 2326.75 1094.6 cv
2322.19 1093.69 2319.82 1090.59 2319.82 1090.59 cv
2319.82 1090.59 2317.54 1092.41 2314.85 1093.75 cv
2314.6 1093.91 2314.33 1094.03 2314.05 1094.13 cv
2312.8 1094.69 2311.5 1095.1 2310.33 1095.15 cv
2310.17 1095.16 li
2309.24 1095.33 2308.41 1095.41 2307.68 1095.44 cv
2305.28 1095.04 2298.16 1093.12 2291.7 1091.32 cv
2282.22 1126.33 2265.51 1149.49 2243.66 1152.71 cv
2199.07 1159.26 2149.99 1080.38 2134.02 976.514 cv
2118.06 872.648 2141.25 783.135 2185.83 776.579 cv
2198.77 774.678 2212.07 779.977 2224.84 790.973 cv
2225.37 716.866 li
2225.37 716.866 2224.74 710.393 2218.53 707.291 cv
2212.33 704.19 2209.41 708.203 2200.29 706.924 cv
2191.17 705.649 2182.42 704.554 2182.42 704.554 cv
2182.42 704.554 2143.11 712.306 2139.27 714.131 cv
2135.44 715.955 2133.34 730.821 2133.34 738.667 cv
2133.34 746.508 2133.89 757.091 2131.88 760.373 cv
2129.88 763.654 2126.6 770.041 2126.6 770.041 cv
2125.36 773.186 li
2137.67 779.209 li
2137.67 779.209 2140.15 781.763 2138.59 785.502 cv
2137.04 789.24 2135.22 790.241 2130.66 789.057 cv
2126.09 787.871 2116.7 783.401 2116.7 783.401 cv
2116.7 783.401 2110.91 790.379 2104.07 791.11 cv
2097.23 791.838 2091.94 786.002 2088.29 783.085 cv
2084.64 780.163 2083.41 775.102 2083.5 772.274 cv
2083.5 772.274 2081.82 760.604 2085.29 758.597 cv
2087.3 755.676 2084.07 757.052 2083.54 750.122 cv
2082.98 743.19 2083.64 737.023 2091.67 737.208 cv
2091.67 737.208 2091.94 730.184 2091.94 728.54 cv
2091.94 726.898 2083.91 720.151 2083.91 720.151 cv
2082.95 738.619 li
2082.95 738.619 2078.99 745.596 2079.9 755.539 cv
2080.81 765.48 2082.09 772.274 2078.8 773.643 cv
2075.52 775.012 2068.04 774.508 2070.5 769.857 cv
2072.97 765.207 2074.16 758.73 2073.42 749.062 cv
2072.7 739.394 2070.97 728.724 2070.23 723.252 cv
2069.5 717.777 2069.41 715.681 2067.04 705.101 cv
2064.67 694.522 2061.38 690.325 2062.3 684.122 cv
2063.21 677.919 2069.5 671.079 2077.89 670.898 cv
2086.28 670.715 2091.75 682.209 2092.3 691.146 cv
2092.85 700.083 2102.51 704.096 2105.25 697.349 cv
2107.99 690.599 2111.64 659.224 2112.37 642.806 cv
2113.1 626.387 2111.73 621.553 2114.1 615.354 cv
2116.47 609.151 2117.57 607.872 2117.57 607.872 cv
2117.57 607.872 2129.97 613.895 2141.1 612.068 cv
2141.1 612.068 2124.5 611.157 2112.65 600.213 cv
2112.65 600.213 2116.11 572.484 2113.19 541.836 cv
2110.27 511.192 2113.38 497.148 2118.12 487.299 cv
2122.86 477.441 2122.04 475.164 2126.23 473.891 cv
2130.43 472.61 2135.35 479.175 2135.35 479.175 cv
2128.01 467.639 li
cp
2183.43 1047.21 mo
2204.15 1023.78 li
2207.54 992.002 li
2173.66 1021.66 li
2176.53 1030.29 2179.78 1038.85 2183.43 1047.21 cv
cp
2172.67 1018.66 mo
2206.83 988.757 li
2205.27 986.945 2205.03 986.473 2205.03 986.473 cv
2205.03 986.473 2196.54 992.038 2195.27 986.657 cv
2194.75 984.434 2195.04 982.353 2195.58 980.674 cv
2163.77 985.49 li
2166.14 996.394 2169.09 1007.56 2172.67 1018.66 cv
cp
2197.79 961.77 mo
2157.75 949.072 li
2158.62 956.729 2159.71 964.229 2161 971.474 cv
2161.65 975.147 2162.37 978.872 2163.16 982.633 cv
2197.02 977.504 li
2197.34 977 2197.55 976.715 2197.55 976.715 cv
2197.55 976.715 2197.63 969.936 2197.79 961.77 cv
cp
2157.4 945.901 mo
2197.84 958.729 li
2197.91 955.541 2197.98 952.249 2198.07 949.145 cv
2197.07 947.206 li
2155.58 911.073 li
2155.55 922.783 2156.21 934.501 2157.4 945.901 cv
cp
2155.62 907.237 mo
2193.5 940.225 li
2158.58 872.003 li
2156.75 883.48 2155.81 895.335 2155.62 907.237 cv
cp
2159.41 867.234 mo
2198.24 943.11 li
2198.31 940.981 2198.39 939.09 2198.46 937.589 cv
2198.58 935.341 2199.26 929.808 2200.27 922.38 cv
2193.95 886.412 li
2166.69 840.535 li
2165.37 843.917 2164.4 846.728 2163.91 848.37 cv
2162.08 854.479 2160.6 860.786 2159.41 867.234 cv
cp
2168.06 837.143 mo
2192.53 878.318 li
2181.26 814.022 li
2176.11 819.639 2171.35 829.265 2168.06 837.143 cv
cp
2183.79 811.621 mo
2196.74 885.39 li
2203.83 897.316 li
2205.64 884.943 2207.62 871.633 2209.33 860.188 cv
2198.72 812.925 li
2194.94 810.457 2191.39 809.009 2188.52 809.376 cv
2186.95 809.574 2185.36 810.378 2183.79 811.621 cv
cp
2213.52 913.623 mo
2226.05 934.707 li
2216.31 891.29 li
2215.19 899.535 2214.21 907.373 2213.52 913.623 cv
cp
2202.27 815.485 mo
2210.52 852.199 li
2211.86 843.18 2212.89 836.094 2213.33 832.791 cv
2213.64 830.644 2213.96 828.616 2214.26 826.696 cv
2210.53 822.719 2206.36 818.673 2202.27 815.485 cv
cp
2217.44 883.063 mo
2229.59 937.185 li
2238.47 910.962 li
2233.49 851.893 li
2231.13 848.078 2228.66 844.368 2226.08 840.776 cv
2225.75 840.312 2225.33 839.746 2224.84 839.102 cv
2223.41 843.582 2220.22 863.365 2217.44 883.063 cv
cp
2236.89 857.605 mo
2240.81 904.038 li
2243.69 895.552 li
2244.04 871.017 li
2241.79 866.449 2239.41 861.972 2236.89 857.605 cv
cp
2243.55 905.047 mo
2241.43 911.31 li
2243.16 931.847 li
2243.55 905.047 li
cp
2240.91 939.959 mo
2239.08 918.233 li
2230.82 942.649 li
2230.85 942.769 li
2234.07 948.186 li
2236.39 944.343 2239.08 941.583 2240.92 939.959 cv
2240.91 939.959 li
cp
2230.79 955.854 mo
2229.02 947.948 li
2221.72 969.524 li
2223.98 968.988 2226.12 967.767 2227.15 967.004 cv
2229.15 965.516 2230.41 958.431 2230.79 955.854 cv
cp
2218.58 969.716 mo
2227.61 943.035 li
2213.01 918.476 li
2210.96 939.93 2212.4 956.72 2214.2 964.903 cv
2214.9 968.088 2216.6 969.405 2218.58 969.716 cv
cp
2203.17 901.897 mo
2198.16 893.48 li
2201.58 912.961 li
2202.07 909.463 2202.6 905.745 2203.17 901.897 cv
cp
2222.13 992.741 mo
2223.08 994.574 li
2222.91 992.82 li
2222.13 992.741 li
cp
2225.86 993.119 mo
2226.41 998.612 li
2230.83 993.619 li
2225.86 993.119 li
cp
2246.97 999.312 mo
2247.25 1003.24 li
2276.58 1033.13 li
2277.23 1021.61 2277.13 1009.97 2276.44 998.483 cv
2261.38 988.181 li
2260.73 989.617 2259.97 990.947 2259.12 992.129 cv
2255.89 996.577 2251.29 998.897 2246.97 999.312 cv
cp
2276.33 1037.03 mo
2248.31 1008.46 li
2270.34 1065.73 li
2271.32 1065.23 2272.16 1064.85 2272.71 1064.61 cv
2274.49 1055.64 2275.67 1046.39 2276.33 1037.03 cv
cp
2267.78 1067.16 mo
2248.22 1016.34 li
2250.48 1046.92 li
2263.02 1070.89 li
2264.37 1069.45 2266.11 1068.18 2267.78 1067.16 cv
cp
2267.24 1085.21 mo
2266.65 1084.08 li
2262.97 1082.99 2260.47 1081.14 2260.62 1075.81 cv
2260.64 1075.05 2260.84 1074.3 2261.16 1073.58 cv
2251.02 1054.22 li
2255.16 1110.32 li
2260.39 1102.51 2264.87 1091.78 2267.24 1085.21 cv
cp
2252.5 1113.92 mo
2247.61 1047.72 li
2231.81 1017.52 li
2229.76 1031.79 li
2238.56 1118.89 li
2240.56 1119.72 2242.43 1120.11 2244.07 1119.9 cv
2246.9 1119.54 2249.77 1117.25 2252.5 1113.92 cv
cp
2235.48 1117.34 mo
2228.04 1043.77 li
2219.45 1103.76 li
2224.52 1109.06 2230.29 1114.31 2235.48 1117.34 cv
cp
2216.91 1101.04 mo
2226.83 1031.71 li
2224.19 1005.52 li
2206.95 1025 li
2201.05 1080.46 li
2202.82 1083.2 2204.63 1085.88 2206.51 1088.5 cv
2208.21 1090.87 2212.1 1095.78 2216.91 1101.04 cv
cp
2198.55 1076.46 mo
2203.63 1028.77 li
2184.72 1050.13 li
2188.84 1059.25 2193.44 1068.09 2198.55 1076.46 cv
cp
2419.26 797.951 mo
2422.77 823.86 li
2424.62 827.798 2425.91 831.08 2425.91 831.08 cv
2431.21 833.271 2437.18 842.07 2437.72 849.184 cv
2438.27 856.298 2439.27 876.092 2439.27 876.092 cv
2439.27 876.092 2441.56 880.559 2443.38 887.035 cv
2445.2 893.513 2443.98 901.217 2443.98 901.217 cv
2444.25 901.552 li
2444.85 895.461 li
2439.14 821.944 li
2437.78 819.863 2436.38 817.82 2434.94 815.813 cv
2432.69 812.677 2426.34 804.776 2419.26 797.951 cv
cp
2435.81 920.197 mo
2438.04 936.681 li
2441.51 929.556 li
2443.36 910.76 li
2442.55 909.996 2442.08 909.589 2442.08 909.589 cv
2440.12 907.445 li
2440.12 907.445 2439.57 909.452 2436.83 917.751 cv
2436.54 918.626 2436.2 919.437 2435.81 920.197 cv
cp
2442.48 827.222 mo
2446.49 878.802 li
2450.18 841.007 li
2447.77 836.288 2445.19 831.685 2442.48 827.222 cv
cp
2452.63 845.924 mo
2447.78 895.454 li
2448.65 906.686 li
2451.22 909.687 li
2466.02 879.359 li
2462.27 867.983 2457.83 856.706 2452.63 845.924 cv
cp
2467.31 883.369 mo
2453.28 912.1 li
2464.5 925.208 li
2464.5 925.208 2469.23 926.635 2474.2 932.88 cv
2478.29 929.79 li
2478.05 928.294 2477.79 926.807 2477.53 925.334 cv
2475.14 911.793 2471.76 897.543 2467.31 883.369 cv
cp
2450.31 918.194 mo
2449.65 919.545 li
2450.22 926.948 li
2453.48 926.544 2456.85 927.1 2456.85 927.1 cv
2454.7 923.724 2452.42 920.72 2450.31 918.194 cv
cp
2447.35 927.64 mo
2447.12 924.715 li
2444.35 930.384 li
2444.35 930.527 li
2444.48 930.232 2444.62 929.955 2444.77 929.699 cv
2445.31 928.738 2446.25 928.078 2447.35 927.64 cv
cp
2441.39 945.751 mo
2439.95 945.614 li
2440.7 937.876 li
2438.75 941.89 li
2439.6 948.179 li
2441.16 948.405 2441.51 947.238 2441.39 945.751 cv
cp
2444.79 971.208 mo
2448.27 980.278 li
2450.19 968.312 li
2449.21 968.743 2447.86 969.413 2446.07 970.443 cv
2445.64 970.695 2445.2 970.951 2444.79 971.208 cv
cp
2478.81 933.05 mo
2475.91 935.232 li
2477.37 937.404 2478.8 940.02 2480.09 943.175 cv
2480.15 943.316 2480.21 943.46 2480.26 943.604 cv
2479.83 940.042 2479.34 936.521 2478.81 933.05 cv
cp
2468.14 987.461 mo
2480.76 1011.65 li
2482.61 997.074 2482.97 981.974 2482.26 967.111 cv
2480.75 977.615 2476.28 986.693 2469.42 987.41 cv
2468.99 987.453 2468.56 987.467 2468.14 987.461 cv
cp
2480.08 1016.62 mo
2464.42 986.617 li
2457.74 983.646 2454.19 973.639 2452.96 969.424 cv
2450.35 985.685 li
2473.24 1045.17 li
2473.95 1043.22 2474.49 1041.62 2474.8 1040.54 cv
2477.1 1032.85 2478.83 1024.84 2480.08 1016.62 cv
cp
2471.68 1049.22 mo
2449.44 991.397 li
2444.83 1020.13 li
2456.5 1074.69 li
2462.5 1069.69 2468.19 1057.88 2471.68 1049.22 cv
cp
2453.89 1076.39 mo
2443.55 1028.09 li
2436.89 1069.68 li
2442.33 1074.26 2447.77 1077.54 2451.78 1077.03 cv
2452.48 1076.94 2453.18 1076.72 2453.89 1076.39 cv
cp
2434.31 1067.4 mo
2441.87 1020.21 li
2436.22 993.811 li
2435.54 994.459 2434.55 994.945 2433.16 995.208 cv
2427.88 996.21 2422.86 999.037 2422.31 1000.13 cv
2421.76 1001.23 2424.32 1002.69 2424.95 1005.88 cv
2425.6 1009.07 2426 1009.94 2426.19 1019.06 cv
2426.37 1028.18 2430.34 1038.72 2431.25 1042.36 cv
2432.16 1046.01 2434.89 1045.1 2434.44 1049.02 cv
2433.98 1052.94 2433.21 1056.82 2432.48 1063.84 cv
2432.42 1064.41 2432.3 1064.91 2432.15 1065.36 cv
2432.87 1066.06 2433.58 1066.74 2434.31 1067.4 cv
cp
2436.33 980.403 mo
2443.15 1012.25 li
2447.35 985.99 li
2442.3 972.839 li
2439.43 974.87 2437.36 976.945 2436.77 978.837 cv
2436.56 979.488 2436.42 979.975 2436.33 980.403 cv
cp
2436.47 946.813 mo
2436.44 946.601 li
2436.37 946.748 li
2436.47 946.813 li
cp
2433.95 945.052 mo
2435.74 941.393 li
2433.36 923.824 li
2430.09 927.689 2426.2 929.616 2426.39 931.479 cv
2426.65 934.008 2428.67 940.798 2433.95 945.052 cv
cp
2418.88 816.869 mo
2415.91 794.85 li
2410.07 789.712 2404.1 785.876 2399.79 786.428 cv
2397.64 786.701 2395.46 788.167 2393.36 790.375 cv
2394.09 791.81 2394.68 792.969 2395.07 793.707 cv
2395.83 795.177 2397.03 797.137 2398.34 799.157 cv
2398.34 799.157 2409.95 813.174 2418.88 816.869 cv
cp
2446.68 918.976 mo
2446.26 913.666 li
2446.01 913.411 li
2445.18 922.067 li
2446.68 918.976 li
cp
2270.94 954.227 mo
2265.9 959.41 li
2265.83 966.582 2265.37 977.166 2262.49 985.41 cv
2276.2 994.791 li
2275.3 982.071 2273.69 969.601 2271.6 957.803 cv
2271.39 956.618 2271.17 955.426 2270.94 954.227 cv
cp
2265.9 955.238 mo
2270.27 950.743 li
2267.78 938.143 2264.52 925.085 2260.39 912.092 cv
2260.35 942.376 li
2260.35 942.376 2265.6 947.109 2265.9 955.238 cv
cp
2207.48 1020.01 mo
2223.59 1001.81 li
2218.66 992.392 li
2214.24 991.948 li
2214.24 991.948 2212.33 992.038 2211.14 990.396 cv
2210.99 990.176 2210.83 990.036 2210.68 989.945 cv
2207.48 1020.01 li
cp
2235.04 994.953 mo
2232.52 1012.6 li
2247.08 1040.42 li
2244.61 1006.95 li
2243.18 1003.25 li
2235.04 994.953 li
cp
2228.54 1019.74 mo
2229.49 1013.1 li
2227.49 1009.26 li
2228.54 1019.74 li
cp
2230.2 1008.18 mo
2231.82 996.891 li
2227.09 1002.24 li
2230.2 1008.18 li
cp
2415.23 1045.67 mo
2415.18 1042.04 2414.96 1037.85 2414.44 1033.36 cv
2412.8 1018.94 2412.8 1016.76 2412.8 1016.76 cv
2412.8 1016.76 2408.66 1018.5 2405.77 1016.59 cv
2403.49 1004.97 li
2403.84 1004.46 2404.29 1004.07 2404.78 1003.8 cv
2406.78 1002.71 2409.29 1001.21 2409.29 1001.21 cv
2409.29 1001.21 2406.92 999.106 2408.47 995.367 cv
2410.02 991.628 2412.84 990.259 2412.84 987.067 cv
2411.16 988.479 li
2411.16 988.479 2404.52 991.656 2401.38 994.282 cv
2401.37 994.29 2397.14 997.269 2391.69 1001.02 cv
2398.02 1016.88 2405.81 1032.15 2415.23 1045.67 cv
cp
2347.53 835.795 mo
2347.83 833.864 2348.16 831.963 2348.51 830.082 cv
2349.12 819.621 2350.14 798.516 2348.77 794.302 cv
2346.96 788.646 2334.54 781.532 2334.54 781.532 cv
2332.41 780.664 li
2332.41 780.664 2335.28 794.575 2336.56 809.716 cv
2337.83 824.855 2328.35 836.983 2327.25 842.822 cv
2326.15 848.658 2333.45 847.473 2335.73 842.732 cv
2338.01 837.988 2336.65 835.435 2341.57 835.345 cv
2344.85 835.283 2346.67 835.586 2347.53 835.795 cv
cp
2388.31 948.247 mo
2387.62 941.014 2387.15 933.918 2386.87 926.99 cv
2388.35 929.199 2389.84 931.519 2390.36 932.664 cv
2391.52 935.139 2390.69 946.803 2388.31 948.247 cv
cp
2386.56 911.293 mo
2386.59 898.249 2387.35 885.958 2388.76 874.681 cv
2389.15 876.568 2389.52 878.779 2389.87 881.358 cv
2391.69 895.039 2391.87 905.255 2391.32 912.187 cv
2390.85 918.141 2389.85 919.652 2386.56 911.293 cv
cp
2144.29 697.162 mo
2144.29 697.162 2147.57 673.449 2151.59 655.939 cv
2155.6 638.426 2154.14 624.197 2155.23 613.981 cv
2156.33 603.766 2160.89 572.574 2161.61 556.887 cv
2162.35 541.199 2163.9 536.545 2170.28 535.086 cv
2176.67 533.627 2177.58 538.004 2186.52 545.119 cv
2195.46 552.233 2205.04 558.346 2213.25 562.906 cv
2221.45 567.466 2229.12 568.925 2234.4 571.479 cv
2239.69 574.033 2248.36 575.038 2249.63 580.326 cv
2250.92 585.618 2250.45 597.566 2251.74 620.915 cv
2253.01 644.265 2254.2 658.583 2252 668.615 cv
2249.82 678.647 2247.45 681.021 2243.8 682.113 cv
2240.14 683.207 2235.95 679.926 2231.58 678.831 cv
2227.2 677.736 2224.64 679.014 2220.82 678.831 cv
2216.98 678.647 2214.79 676.641 2214.79 676.641 cv
2214.79 676.641 2220.63 675.913 2218.99 672.264 cv
2217.35 668.615 2206.77 664.602 2202.75 663.507 cv
2198.74 662.412 2188.48 663.28 2183.46 665.103 cv
2178.44 666.929 2176.89 669.757 2178.08 672.4 cv
2179.27 675.045 2183.19 674.864 2186.47 674.498 cv
2189.76 674.133 2192.4 676.777 2193.22 678.604 cv
2194.05 680.426 2196.18 687.13 2187.7 688.409 cv
2179.22 689.685 2155.69 694.608 2151.41 695.796 cv
2144.29 697.162 li
cp
0 0 0 rgb
ef
1524.54 413.213 mo
1524.54 413.213 1516.83 411.25 1509.17 414.625 cv
1501.52 418 1496.41 411.25 1493.49 406.777 cv
1490.57 402.314 1486.78 389.68 1491.35 372.897 cv
1495.9 356.114 1501.43 341.203 1510.08 336.094 cv
1518.75 330.985 1532.39 325.102 1540.6 322.188 cv
1548.81 319.265 1567.87 318.084 1577.9 320.455 cv
1587.93 322.824 1593.77 325.563 1597.05 332.488 cv
1600.34 339.423 1601.89 339.875 1606.63 350.646 cv
1611.37 361.407 1609.19 353.744 1612.66 365.418 cv
1616.11 377.093 1615.75 385.844 1610.82 386.213 cv
1610.82 386.213 1609.19 386.213 1606.45 387.486 cv
1603.71 388.768 1614.47 385.669 1615.93 394.789 cv
1617.4 403.909 1616.53 410.152 1612.88 411.978 cv
1612.88 411.978 1632.76 409.064 1658.12 415.989 cv
1683.48 422.924 1684.93 420.001 1695.15 430.587 cv
1705.37 441.164 1707.46 440.159 1714.76 445.268 cv
1722.05 450.376 1732.73 460.686 1754.25 478.198 cv
1775.78 495.709 1779.52 499.998 1788.46 509.846 cv
1797.39 519.695 1797.3 519.243 1798.03 522.885 cv
1798.77 526.537 1795.66 524.896 1802.05 534.928 cv
1808.43 544.96 1805.42 544.686 1807.61 551.437 cv
1809.8 558.184 1800.86 562.016 1780.98 560.553 cv
1780.98 560.553 1801.82 565.161 1809.2 558.778 cv
1809.2 558.778 1811.48 559.873 1815.49 576.288 cv
1819.51 592.706 1815.68 632.291 1801.82 648.342 cv
1787.95 664.397 1762.78 692.85 1757.3 695.771 cv
1751.84 698.689 1746.64 699.874 1746.64 699.874 cv
1746.64 699.874 1747.55 690.938 1738.06 681.45 cv
1738.06 681.45 1744.72 690.664 1743.44 702.519 cv
1742.16 714.377 1730.31 714.74 1736.69 721.675 cv
1743.08 728.606 1754.66 724.502 1771.08 742.56 cv
1787.5 760.617 1800.18 786.067 1800.18 786.067 cv
1800.18 786.067 1801.17 787.588 1802.72 789.899 cv
1814.28 778.597 1827.65 771.684 1842.25 770.441 cv
1895.9 765.87 1945.95 839.249 1954.05 934.335 cv
1962.15 1029.42 1925.24 1110.21 1871.6 1114.79 cv
1830 1118.33 1790.57 1075 1771.17 1011.01 cv
1768.27 1011.59 1765.5 1012.05 1763.78 1012.54 cv
1759.22 1013.81 1757.77 1011.08 1758.13 1013.81 cv
1758.49 1016.55 1758.59 1036.52 1748.54 1047.83 cv
1738.51 1059.14 1726.12 1058.05 1722.28 1056.04 cv
1718.45 1054.04 1716.63 1052.76 1716.63 1052.76 cv
1716.63 1052.76 1710.33 1086.05 1707.05 1088.24 cv
1703.76 1090.42 1699.38 1090.61 1694.64 1087.51 cv
1694.64 1087.51 1677.95 1087.78 1674.31 1088.14 cv
1674.31 1088.14 1674.07 1088.08 1673.64 1087.96 cv
1656.13 1141.77 1621.6 1178.79 1580.27 1180.73 cv
1517.3 1183.69 1462.4 1104.12 1457.65 1003 cv
1453.05 905.071 1497.17 822.853 1557.13 815.067 cv
1558.34 812.867 1560.64 809.78 1564.45 808.548 cv
1570.64 806.541 1584.33 804.535 1587.79 803.257 cv
1591.26 801.981 1590.62 797.147 1590.07 783.467 cv
1589.53 769.785 1589.07 753.641 1589.07 753.641 cv
1589.07 753.641 1591.4 751.86 1594.5 752.045 cv
1594.5 752.045 1596.05 741.191 1594.04 736.995 cv
1592.04 732.801 1584.73 734.441 1573.61 735.172 cv
1562.48 735.9 1548.25 737.542 1534.39 739.549 cv
1520.52 741.556 1490.16 742.56 1482.13 752.229 cv
1474.1 761.896 1481.3 781.323 1491.35 787.525 cv
1501.37 793.726 1505.94 794.093 1514.87 796.099 cv
1523.82 798.105 1522.72 810.328 1516.7 812.15 cv
1510.67 813.973 1490.61 809.597 1476.2 795.915 cv
1461.79 782.234 1463.7 758.611 1463.7 756.058 cv
1463.7 753.504 1458.42 750.039 1456.59 755.51 cv
1454.76 760.981 1454.72 765.498 1454.72 765.498 cv
1454.72 765.498 1459.47 767.321 1461.19 770.148 cv
1462.93 772.977 1463.02 777.811 1461.56 777.994 cv
1460.1 778.174 1457.37 776.352 1457.37 776.352 cv
1457.37 776.352 1457.69 778.312 1454.41 778.859 cv
1454.41 778.859 1449.07 777.174 1447.24 776.626 cv
1445.41 776.078 1447.7 784.104 1445.6 785.653 cv
1443.51 787.205 1437.3 789.85 1433.92 781.64 cv
1430.55 773.431 1430.69 771.471 1430.5 769.102 cv
1430.32 766.727 1429.32 762.167 1431.06 758.701 cv
1432.79 755.235 1432.65 753.73 1433.65 746.8 cv
1434.65 739.866 1432.73 736.037 1433.92 733.94 cv
1435.11 731.84 1430.19 724.178 1435.84 717.795 cv
1441.5 711.412 1451.17 706.668 1457.18 706.121 cv
1463.2 705.573 1461.28 707.122 1463.48 701.65 cv
1465.66 696.179 1468.53 690.843 1470.09 689.385 cv
1471.64 687.926 1476.02 687.015 1482.04 689.749 cv
1482.04 689.749 1480.12 685.189 1471.55 685.646 cv
1471.55 685.646 1480.94 667.037 1482.76 651.897 cv
1484.6 636.757 1488.24 617.237 1498.82 600.091 cv
1509.4 582.945 1515.6 569.448 1516.7 562.513 cv
1516.7 562.513 1519.34 555.125 1531.38 555.125 cv
1531.38 555.125 1524.77 552.07 1515.29 557.269 cv
1515.29 557.269 1518.57 542.313 1519.11 529.542 cv
1519.66 516.771 1516.29 513.396 1517.19 494.796 cv
1518.11 476.188 1520.94 480.106 1526.05 468.801 cv
1531.16 457.486 1536.39 460.456 1536.39 460.456 cv
1541.87 464.827 li
1541.87 464.827 1532.75 453.89 1528.37 449.325 cv
1523.99 444.77 1520.12 433.953 1519.66 428.946 cv
1519.21 423.92 1519.56 423.652 1519.56 423.652 cv
1519.56 423.652 1513.26 422.435 1514.14 417.4 cv
1515.01 412.485 1520.8 413.739 1524.54 413.213 cv
cp
1796.82 962.36 mo
1827.29 947.93 li
1826.46 946.532 1827.04 947.443 1825.39 945.081 cv
1823.74 942.718 1824.75 936.867 1826.71 932.253 cv
1802.51 942.278 li
1802.4 942.897 1802.57 941.568 1802.22 944.169 cv
1801.87 946.767 1799.45 954.356 1796.82 962.36 cv
cp
1830.86 954.389 mo
1793.56 973.775 li
1792.62 976.521 1792.01 978.281 1792.01 978.281 cv
1832.32 957.851 li
1832.32 957.851 1831.89 956.558 1830.86 954.389 cv
cp
1543.57 851.738 mo
1550.72 933.294 li
1559.77 947.573 li
1564.11 930.398 1569.06 909.707 1570.73 897.11 cv
1572.35 884.986 1574.41 864.19 1575.94 848.046 cv
1571.14 847.105 1566.26 846.796 1561.35 847.185 cv
1555.18 847.675 1549.23 849.23 1543.57 851.738 cv
cp
1558.78 951.457 mo
1551.29 939.609 li
1553.96 970.108 li
1555.15 965.494 1556.88 958.924 1558.78 951.457 cv
cp
1562.07 1011.35 mo
1565.2 1021 li
1572.9 1012.52 li
1567.07 1008.14 li
1566.34 1009.38 1564.88 1010.92 1562.07 1011.35 cv
cp
1569.45 1006.29 mo
1574.87 1010.36 li
1579.27 1005.52 li
1579.26 1005.51 li
1569.45 1006.29 li
cp
1598.5 1002.56 mo
1661.89 1021.37 li
1662.27 1011.84 1662.12 1002.03 1661.38 992.046 cv
1660.69 982.665 1659.52 973.526 1657.92 964.69 cv
1610.73 986.138 li
1612.24 992.954 1611.97 998.522 1608.77 999.991 cv
1604.39 1002 1600.01 1001.27 1600.01 1001.27 cv
1600.01 1001.27 1599.45 1001.97 1598.5 1002.56 cv
cp
1661.75 1024.37 mo
1593.79 1004.2 li
1593.68 1004.65 1593.51 1005.18 1593.29 1005.7 cv
1602.34 1031.03 li
1614.81 1040.42 1628.3 1050.59 1639.5 1059.08 cv
1640.54 1058.1 1642.08 1057.02 1644.25 1055.72 cv
1649.51 1052.57 1655.26 1048.33 1659.82 1044.76 cv
1660.74 1038.14 1661.39 1031.33 1661.75 1024.37 cv
cp
1637.88 1061.49 mo
1627.71 1053.79 1615.62 1044.67 1604.12 1036.01 cv
1633.51 1118.27 li
1641.13 1107.26 1647.49 1093.9 1652.25 1078.82 cv
1649.48 1077.05 1647.02 1075.06 1645.35 1072.87 cv
1640.76 1066.91 1637.19 1064.26 1637.88 1061.49 cv
cp
1631.44 1121.15 mo
1599.88 1032.81 li
1587.54 1023.53 li
1580.46 1068.14 li
1605.24 1144.64 li
1614.97 1139.49 1623.8 1131.46 1631.44 1121.15 cv
cp
1602.61 1145.95 mo
1579.46 1074.48 li
1567.52 1149.83 li
1572.82 1151.03 1578.23 1151.46 1583.69 1151.02 cv
1590.28 1150.5 1596.6 1148.76 1602.61 1145.95 cv
cp
1564.69 1149.11 mo
1577.48 1068.37 li
1563.98 1026.67 li
1550.69 1041.29 li
1533.38 1130.26 li
1543.04 1139.52 1553.62 1146.01 1564.69 1149.11 cv
cp
1530.89 1127.8 mo
1546.92 1045.44 li
1505.58 1090.91 li
1512.75 1105.51 1521.33 1118.02 1530.89 1127.8 cv
cp
1504.21 1088.08 mo
1547.99 1039.93 li
1553.87 1009.67 li
1551.87 1008.28 1551.44 1006.61 1551.44 1006.61 cv
1551.44 1006.61 1550.31 1006.74 1549.01 1006.55 cv
1487.58 1035.98 li
1491.25 1055.07 1496.96 1072.68 1504.21 1088.08 cv
cp
1487.03 1033.02 mo
1545.25 1005.13 li
1543.2 1004.74 1540.29 1005.53 1540 1002.91 cv
1539.63 999.719 1542.09 997.255 1544.38 997.255 cv
1545.65 997.255 1547.34 993.461 1549.01 988.396 cv
1548.86 988.231 li
1483.14 977.032 li
1482.77 986.505 1482.92 996.242 1483.66 1006.16 cv
1484.33 1015.37 1485.46 1024.34 1487.03 1033.02 cv
cp
1483.28 974.1 mo
1545.95 984.776 li
1492.2 921.277 li
1487.34 937.268 1484.25 955.12 1483.28 974.1 cv
cp
1493.24 917.989 mo
1550.03 985.101 li
1550.64 983.044 1551.24 980.879 1551.79 978.746 cv
1547.88 934.238 li
1512.57 878.466 li
1504.72 889.412 1498.16 902.806 1493.24 917.989 cv
cp
1514.42 875.956 mo
1547.33 927.924 li
1540.76 853.082 li
1531 858.031 1522.13 865.844 1514.42 875.956 cv
cp
1803.18 938.85 mo
1828.45 928.381 li
1830.47 924.048 1831.88 921.051 1828.85 922.279 cv
1822.1 925.017 1806.05 929.394 1806.05 929.394 cv
1806.05 929.394 1804.43 933.298 1803.18 938.85 cv
cp
1829.97 814.96 mo
1829.2 807.69 li
1826.28 809.301 1823.45 811.246 1820.74 813.505 cv
1823.36 814.798 1826.6 814.798 1829.97 814.96 cv
cp
1831.98 806.275 mo
1832.92 815.176 li
1833.13 815.197 1833.35 815.223 1833.56 815.252 cv
1836.7 815.674 1839.44 816.638 1841.64 818.497 cv
1836.85 804.33 li
1835.2 804.878 1833.58 805.53 1831.98 806.275 cv
cp
1849.24 916.576 mo
1856.14 903.814 li
1856.12 903.472 li
1849.68 896.479 1844.31 890.677 1844.31 890.677 cv
1843.54 894.643 li
1843.54 896.102 1845.45 897.561 1847.19 900.752 cv
1848.92 903.947 1846.41 903.9 1846.41 908.098 cv
1846.41 912.078 1846.58 912.776 1849.24 916.576 cv
cp
1855.63 886.391 mo
1854.79 857.454 li
1853.65 854.068 li
1852.83 857.646 1851.59 861.417 1850.25 865.51 cv
1847.15 874.994 1846.32 875.995 1846.32 875.995 cv
1855.63 886.391 li
cp
1839.64 803.509 mo
1848.46 829.624 li
1850.36 832.683 1852.39 835.654 1853.8 840.607 cv
1854.07 841.526 1854.26 842.444 1854.39 843.367 cv
1853.2 802.345 li
1850.89 802.161 1848.58 802.161 1846.25 802.37 cv
1844.01 802.572 1841.8 802.954 1839.64 803.509 cv
cp
1856.11 802.673 mo
1857.69 856.933 li
1866.83 884.002 li
1896.21 829.588 li
1884.36 814.487 1870.56 804.841 1856.11 802.673 cv
cp
1898.15 832.128 mo
1868.1 887.774 li
1874.91 907.914 li
1879.85 913.432 li
1893.05 894.928 li
1906.01 844.098 li
1903.51 839.829 1900.89 835.827 1898.15 832.128 cv
cp
1908.1 847.758 mo
1897.73 888.351 li
1915.59 863.301 li
1913.27 857.825 1910.76 852.632 1908.1 847.758 cv
cp
1916.9 866.474 mo
1895.74 896.16 li
1889.52 920.525 li
1890.93 921.102 1892.49 922.069 1893.85 923.698 cv
1897.31 927.895 1899.49 928.442 1899.49 934.095 cv
1899.49 934.271 li
1932.72 936.472 li
1932.69 936.205 1932.68 935.938 1932.65 935.672 cv
1930.59 910.129 1924.98 886.517 1916.91 866.474 cv
1916.9 866.474 li
cp
1932.93 939.407 mo
1899.05 937.16 li
1898.07 940.081 1895.53 941.601 1891.77 942.894 cv
1933.51 957.883 li
1933.53 951.824 1933.34 945.657 1932.93 939.407 cv
cp
1933.48 960.959 mo
1887.57 944.472 li
1887.2 944.645 1886.79 944.832 1886.35 945.041 cv
1890.31 963.139 li
1932.87 974.701 li
1933.21 970.195 1933.4 965.613 1933.48 960.959 cv
cp
1932.64 977.663 mo
1891.02 966.352 li
1899.89 1006.91 li
1918.34 1037.44 li
1925.73 1020.7 1930.73 1000.25 1932.64 977.663 cv
cp
1916.87 1040.65 mo
1901.82 1015.74 li
1910 1053.15 li
1912.46 1049.29 1914.75 1045.11 1916.87 1040.65 cv
cp
1907.75 1056.52 mo
1897.14 1008 li
1872.06 966.495 li
1865.75 988.774 li
1901.06 1064.94 li
1903.39 1062.37 1905.63 1059.56 1907.75 1056.52 cv
cp
1898.9 1067.21 mo
1864.53 993.075 li
1859.62 1010.41 li
1858 1081.96 li
1861.61 1082.59 1865.26 1082.76 1868.92 1082.43 cv
1879.97 1081.44 1890.1 1076.05 1898.9 1067.21 cv
cp
1855.11 1081.35 mo
1856.46 1021.58 li
1841.18 1075.53 li
1845.71 1078.22 1850.37 1080.19 1855.11 1081.35 cv
cp
1838.62 1073.91 mo
1856.72 1009.96 li
1857.45 977.807 li
1850.62 963.077 li
1847.45 964.713 1844.24 966.376 1841.02 968.045 cv
1795.49 1011.02 li
1805.84 1039.92 1821.15 1062.34 1838.62 1073.91 cv
cp
1794.44 1008.01 mo
1831.59 972.933 li
1810.41 983.948 1791.6 993.836 1791.6 993.836 cv
1791.6 993.836 1791.19 994.395 1790.53 995.284 cv
1791.74 999.646 1793.04 1003.89 1794.44 1008.01 cv
cp
1864.27 956.067 mo
1866.04 956.546 li
1865.4 955.487 li
1864.27 956.067 li
cp
1868.01 954.161 mo
1870.12 957.655 li
1871.43 958.009 li
1873.27 951.493 li
1871.6 952.336 1869.84 953.229 1868.01 954.161 cv
cp
1876.81 949.717 mo
1874.24 958.772 li
1887.13 962.277 li
1883.65 946.334 li
1881.7 947.274 1879.4 948.417 1876.81 949.717 cv
cp
1875.51 924.537 mo
1872.26 929.084 li
1876.26 929.437 1879.84 929.4 1877.88 927.16 cv
1877.54 926.774 1876.71 925.849 1875.51 924.537 cv
cp
1868.93 928.738 mo
1873.5 922.34 li
1869.79 918.295 1864.32 912.366 1859.13 906.729 cv
1859.77 928.673 li
1862.59 928.763 1865.75 928.385 1868.66 928.709 cv
1868.93 928.738 li
cp
1869.98 902.409 mo
1866.21 891.271 li
1863.88 895.602 li
1869.98 902.409 li
cp
1856.84 928.331 mo
1856.3 909.636 li
1850.97 919.517 li
1852.37 922.866 1851.78 925.641 1854.62 927.434 cv
1855.28 927.855 1856.04 928.14 1856.84 928.331 cv
cp
1853.21 961.741 mo
1857.6 971.204 li
1857.87 959.349 li
1853.21 961.741 li
cp
1860.8 958.149 mo
1860.37 977.187 li
1863.87 984.723 li
1869.99 963.084 li
1868.23 960.167 li
1860.8 958.149 li
cp
1860.23 983.789 mo
1859.89 998.793 li
1862.65 989.023 li
1860.23 983.789 li
cp
1873.44 961.582 mo
1873.15 962.655 li
1895.2 999.163 li
1887.84 965.49 li
1873.44 961.582 li
cp
1891.04 902.737 mo
1881.84 915.654 li
1885.45 919.686 li
1885.45 919.686 1885.94 919.668 1886.7 919.771 cv
1891.04 902.737 li
cp
1864.95 887.5 mo
1857.98 866.874 li
1858.64 889.744 li
1861.81 893.292 li
1864.95 887.5 li
cp
1642.82 914.517 mo
1607.15 963.063 li
1606.55 966.687 1606.25 972.342 1608.4 978.285 cv
1609.01 979.968 1609.56 981.639 1610.01 983.264 cv
1657.35 961.744 li
1654.02 944.627 1649.06 928.713 1642.82 914.517 cv
cp
1608.68 956.064 mo
1641.45 911.469 li
1634.61 896.643 1626.36 883.801 1617.11 873.567 cv
1616.34 888.927 1613.99 926.52 1608.68 956.064 cv
cp
1581.4 1007.51 mo
1577.21 1012.12 li
1585.42 1018.29 li
1586.87 1009.14 li
1585.61 1009.32 1584.51 1009.34 1583.82 1009.16 cv
1583.22 1009 1582.27 1008.28 1581.4 1007.51 cv
cp
1575.24 1014.28 mo
1566.23 1024.19 li
1578.49 1062.03 li
1584.91 1021.54 li
1575.24 1014.28 li
cp
1598.1 1027.84 mo
1591.07 1008.17 li
1590.99 1008.2 1590.92 1008.22 1590.85 1008.25 cv
1590.53 1008.34 1590.23 1008.43 1589.92 1008.51 cv
1588.05 1020.27 li
1598.1 1027.84 li
cp
1562.94 1023.48 mo
1559.02 1011.39 li
1558.11 1011.29 1557.31 1011.13 1556.6 1010.93 cv
1551.76 1035.78 li
1562.94 1023.48 li
cp
1782.86 952.944 mo
1782.74 951.68 1782.62 950.408 1782.52 949.133 cv
1780.34 922.185 1782.38 896.649 1787.73 874.658 cv
1789.1 876.784 1791.54 882.145 1789.64 891.632 cv
1787.08 904.401 1783.98 915.529 1786.71 920.82 cv
1789.45 926.107 1791.82 927.023 1791.82 927.023 cv
1782.86 952.944 li
cp
1764.14 806.311 mo
1764.14 806.311 1773.81 816.159 1774.91 820.172 cv
1776 824.185 1767.15 841.973 1763.5 861.673 cv
1764.14 806.311 li
cp
1705.59 786.791 mo
1731.85 786.428 li
1745.9 792.446 li
1744.35 836.316 li
1744.35 836.316 1740.71 838.688 1738.15 842.521 cv
1735.6 846.349 1720.64 845.258 1719.54 845.258 cv
1718.45 845.258 1714.98 854.011 1715.35 856.929 cv
1715.71 859.851 1702.48 844.437 1701.21 839.146 cv
1699.93 833.853 1697.65 819.718 1698.92 812.968 cv
1700.21 806.218 1704.45 795.32 1703.81 786.654 cv
1705.59 786.791 li
cp
1709.51 761.436 mo
1709.51 761.436 1715.62 768.002 1716.26 769.098 cv
1716.9 770.192 1707.68 768.823 1707.68 768.823 cv
1709.51 761.436 li
cp
1624.91 787.839 mo
1624.91 787.839 1659.21 786.017 1678.54 787.111 cv
1678.54 787.111 1651.64 789.393 1645.62 790.304 cv
1639.59 791.215 1644.98 806.628 1644.98 814.474 cv
1644.98 822.315 1643.7 817.208 1634.4 806.448 cv
1625.1 795.685 1621.58 789.619 1621.22 787.612 cv
1624.91 787.839 li
cp
1612.79 741.598 mo
1612.79 741.598 1613.7 749.077 1616.98 748.529 cv
1620.26 747.981 1622.63 747.434 1622.63 747.434 cv
1622.63 747.434 1624.64 744.974 1626.83 747.527 cv
1629.01 750.082 1631.48 755.373 1634.12 757.56 cv
1636.77 759.75 1642.33 768.232 1642.33 768.232 cv
1642.33 768.232 1615.34 770.239 1613.33 766.954 cv
1611.32 763.673 1613.51 756.558 1612.79 753.457 cv
1612.06 750.355 1610.46 750.492 1610.46 747.48 cv
1610.46 744.473 1610.96 740.96 1612.42 739.682 cv
1612.79 741.598 li
cp
1583.03 549.859 mo
1591.05 557.701 1609.47 563.356 1617.14 562.445 cv
1624.8 561.534 1631.55 556.606 1633.55 560.802 cv
1635.56 564.999 1635.2 567.917 1639.94 567.553 cv
1644.68 567.189 1645.6 565.546 1649.79 569.743 cv
1653.99 573.936 1659.92 577.127 1657.73 586.979 cv
1655.54 596.831 1642.31 640.338 1639.76 650.002 cv
1637.2 659.671 1636.66 661.497 1636.66 661.497 cv
1636.66 661.497 1628.9 678.917 1625.25 681.287 cv
1621.61 683.661 1611.94 680.924 1608.11 682.746 cv
1604.27 684.573 1598.81 687.126 1600.26 690.955 cv
1600.26 690.955 1595.57 696.291 1597.66 700.029 cv
1599.76 703.772 1600.77 705.047 1601.31 707.237 cv
1601.86 709.424 1599.08 713.667 1599.08 713.667 cv
1599.08 713.667 1578.92 715.947 1576.91 717.316 cv
1574.91 718.682 1578.65 711.203 1574.36 710.839 cv
1570.07 710.475 1568.25 707.922 1568.25 707.922 cv
1568.25 707.922 1567.34 707.648 1552.38 708.923 cv
1537.42 710.202 1529.21 713.12 1529.76 716.401 cv
1530.31 719.687 1532.68 720.962 1532.68 720.962 cv
1532.68 720.962 1515.53 723.699 1507.87 724.794 cv
1500.21 725.889 1488.53 732.636 1485.98 729.171 cv
1483.43 725.706 1484.52 724.247 1486.16 720.781 cv
1487.81 717.316 1488.9 712.572 1490.72 710.565 cv
1492.55 708.559 1497.61 709.607 1497.79 707.417 cv
1497.98 705.231 1492.78 705.321 1494.97 700.944 cv
1497.16 696.563 1508.65 683.615 1519.41 669.021 cv
1530.17 654.426 1535.55 635 1539.57 625.879 cv
1543.58 616.759 1545.86 619.586 1546.59 607.912 cv
1547.32 596.237 1557.99 569.512 1558.9 564.225 cv
1559.82 558.932 1564.37 538.958 1564.01 536.405 cv
1563.64 533.851 1557.9 526.924 1557.9 526.924 cv
1557.9 526.924 1564.65 532.662 1565.63 534.604 cv
1567.41 538.119 1579.03 545.95 1583.03 549.859 cv
cp
ef
1046.71 430.394 mo
1046.71 430.394 1037.77 417.806 1037.77 413.979 cv
1037.77 410.143 1033.94 409.045 1032.84 401.936 cv
1031.75 394.826 1027.83 386.526 1029.47 372.657 cv
1031.11 358.788 1039.87 349.493 1039.87 349.493 cv
1039.87 349.493 1042.42 337.45 1055.92 333.982 cv
1055.92 333.982 1067.14 321.671 1084.83 326.421 cv
1084.83 326.421 1096.87 318.389 1107.27 327.877 cv
1107.27 327.877 1117.12 324.595 1126.61 337.542 cv
1126.61 337.542 1135.09 338.907 1139.65 348.949 cv
1139.65 348.949 1149.23 363.989 1147.59 379.131 cv
1147.59 379.131 1148.95 381.049 1149.14 389.625 cv
1149.32 398.201 1143.57 402.849 1143.57 402.849 cv
1143.57 402.849 1147.76 403.577 1147.95 408.686 cv
1148.13 413.795 1148.13 415.067 1148.13 415.067 cv
1148.13 415.067 1166.19 410.512 1181.33 415.621 cv
1196.47 420.729 1218.36 423.099 1228.94 451.188 cv
1239.52 479.277 1245.72 499.711 1247.91 503.723 cv
1250.1 507.734 1267.71 545.771 1270.26 549.052 cv
1272.81 552.337 1264.6 554.344 1258.03 556.713 cv
1251.47 559.087 1269.89 554.344 1269.89 554.344 cv
1269.89 554.344 1276.64 573.313 1280.65 586.449 cv
1284.66 599.583 1280.93 602.958 1279.47 609.342 cv
1278.01 615.728 1272.63 641.357 1265.88 651.206 cv
1259.13 661.058 1259.86 662.333 1259.86 662.333 cv
1259.86 662.333 1258.85 657.499 1250.83 654.764 cv
1250.83 654.764 1256.81 656.814 1259.54 665.208 cv
1259.54 665.208 1259.63 669.4 1258.08 671.954 cv
1258.08 671.954 1255.94 681.579 1256.85 688.693 cv
1257.76 695.808 1259.77 698.906 1258.49 704.561 cv
1257.21 710.216 1255.94 717.151 1251.93 721.344 cv
1247.91 725.54 1255.12 733.111 1258.22 739.678 cv
1261.32 746.245 1263.69 747.157 1263.69 747.157 cv
1263.69 747.157 1265.79 752.354 1270.9 764.944 cv
1276.01 777.529 1283.58 799.326 1283.21 819.21 cv
1282.84 839.095 1284.3 841.284 1284.3 841.284 cv
1284.3 841.284 1279.65 849.764 1271.08 852.318 cv
1271.08 852.318 1280.2 851.407 1286.04 843.929 cv
1286.04 843.929 1286.58 869.648 1290.78 887.342 cv
1290.78 887.342 1286.21 862.533 1288.22 849.4 cv
1288.22 849.4 1298.07 875.487 1303.91 899.2 cv
1309.75 922.913 1315.04 956.658 1318.32 988.037 cv
1321.61 1019.41 1329.81 1111.17 1311.94 1131.96 cv
1294.06 1152.76 1268.53 1111.89 1258.31 1083.07 cv
1248.09 1054.25 1243.35 1030.9 1243.35 1030.9 cv
1229.35 1032.77 li
1229.35 1032.77 1223.24 1033.96 1222.51 1038.7 cv
1222.21 1040.67 1222.59 1051.13 1222.84 1064.77 cv
1223.3 1065.11 li
1222.86 1065.69 li
1223.18 1084.77 1223.2 1109.68 1220.69 1126.26 cv
1217.4 1147.91 1210.2 1182.33 1188.57 1175.99 cv
1187.83 1176.01 li
1187.82 1175.75 li
1180.79 1173.43 1172.29 1166.89 1161.94 1154.35 cv
1153.8 1144.49 1146.89 1128.93 1141.03 1110.21 cv
1140.38 1109.87 li
1140.73 1109.22 li
1115.85 1028.82 1110.14 891.308 1110.14 891.308 cv
1110.14 891.308 1111.42 829.469 1135.13 813.782 cv
1135.13 813.782 1124.64 816.062 1118.08 831.202 cv
1118.08 831.202 1115.34 827.373 1113.88 814.787 cv
1112.42 802.197 1109.59 800.284 1109.05 789.158 cv
1108.5 778.03 1107.95 776.204 1107.95 776.204 cv
1107.95 776.204 1098.28 762.34 1093.91 749.206 cv
1089.53 736.072 1087.34 724.035 1087.34 724.035 cv
1087.34 724.035 1077.39 728.685 1065.54 731.786 cv
1053.68 734.887 1044.92 737.989 1040.37 745.103 cv
1035.8 752.218 1033.16 754.861 1036.81 768.179 cv
1040.46 781.496 1047.39 784.23 1051.58 784.597 cv
1055.78 784.961 1058.52 791.711 1055.96 798.459 cv
1053.41 805.209 1041.55 806.304 1035.54 801.923 cv
1029.51 797.547 1022.86 789.611 1020.85 779.032 cv
1018.84 768.453 1018.29 764.987 1018.29 764.987 cv
1018.29 764.987 1010.36 762.159 1006.52 757.234 cv
1002.7 752.308 1000.87 744.646 1000.87 744.646 cv
1000.87 744.646 995.312 746.014 993.67 736.53 cv
992.028 727.045 993.393 722.755 995.763 718.015 cv
998.133 713.271 995.403 715.097 997.773 708.71 cv
1000.14 702.327 1001.78 696.672 1001.97 694.85 cv
1002.15 693.023 994.767 673.78 994.583 661.375 cv
994.398 648.969 996.492 644.683 996.492 633.919 cv
996.492 623.159 998.687 619.874 1001.06 614.219 cv
1003.43 608.563 1003.52 607.562 1003.52 607.562 cv
1003.52 607.562 1011 606.651 1016.28 605.92 cv
1016.28 605.92 1003.89 607.562 1002.79 604.461 cv
1001.69 601.359 997.22 581.749 999.23 558.399 cv
1001.23 535.05 1000.42 532.59 998.41 509.791 cv
996.409 486.986 1000.7 473.947 1008.35 460.99 cv
1016.01 448.043 1038 434.995 1048.94 434.082 cv
1046.7 430.394 li
1046.71 430.394 li
cp
1154.35 1012.71 mo
1155.35 1013.47 li
1154.83 1012.11 li
1154.67 1012.33 1154.5 1012.53 1154.35 1012.71 cv
cp
1151.4 990.356 mo
1158.01 938.187 li
1148.22 917.528 li
1146.4 989.766 li
1146.4 989.766 1148.83 989.704 1151.4 990.356 cv
cp
1159.17 940.628 mo
1152.81 990.789 li
1152.95 990.839 1153.09 990.893 1153.23 990.951 cv
1156.34 992.229 1160.16 992.229 1160.16 992.229 cv
1174.76 990.039 li
1174.76 990.039 1165.09 987.121 1165.83 979.276 cv
1166.55 971.435 1167.64 967.965 1167.83 964.137 cv
1168.01 960.303 1167.28 957.753 1167.28 957.753 cv
1159.17 940.628 li
cp
1155.85 1010.67 mo
1157.53 1015.13 li
1166.37 1021.85 li
1167.09 1019.62 1168.26 1017.86 1170.15 1016.81 cv
1174.26 1014.53 1181.38 1011.49 1183.66 1010.54 cv
1183.65 1010.26 li
1184.38 1010.24 li
1182.01 1000.94 li
1182.01 1000.94 1167.96 1004.04 1161.58 1005.86 cv
1158.72 1006.68 1157.1 1008.85 1155.85 1010.67 cv
cp
1194.13 1042.94 mo
1209.21 1054.41 li
1209.15 1048.55 1208.92 1043.71 1208.55 1040.43 cv
1208.55 1040.43 1201.14 1042 1194.13 1042.94 cv
cp
1209.22 1056.24 mo
1193.81 1044.53 li
1207.51 1096.82 li
1208.76 1082.21 1209.29 1067.54 1209.22 1056.24 cv
cp
1207.12 1101.07 mo
1191.96 1043.21 li
1189.77 1043.46 1187.71 1043.62 1186.02 1043.62 cv
1185.95 1043.62 li
1187.22 1094.2 li
1202.13 1133.89 li
1204.34 1124.43 1205.98 1112.88 1207.12 1101.07 cv
cp
1201.52 1136.41 mo
1187.33 1098.63 li
1188.79 1156.29 li
1194.23 1156.71 1198.41 1148.61 1201.52 1136.41 cv
cp
1187.32 1155.97 mo
1185.77 1094.48 li
1171.07 1055.34 li
1164.42 1067.81 li
1180.81 1150.31 li
1183.14 1153.44 1185.32 1155.27 1187.32 1155.97 cv
cp
1178.72 1147.23 mo
1163.35 1069.84 li
1154.65 1086.17 li
1160.87 1108.75 1168.92 1131.59 1178.72 1147.23 cv
cp
1154.09 1084.13 mo
1162.89 1067.59 li
1152.12 1013.31 li
1151.83 1013.16 1151.52 1012.93 1151.18 1012.61 cv
1150.32 1011.79 1149.5 1011.01 1148.77 1010.29 cv
1144.17 1006.81 li
1144.62 1006.23 li
1144.62 1006.23 1141.29 1009.65 1138.83 1008.1 cv
1138.69 1010.33 li
1138.69 1010.33 1143.88 1046.53 1154.09 1084.13 cv
cp
1135.82 897.85 mo
1133.65 868.787 li
1130.72 893.537 1127.6 937.631 1134.31 984.795 cv
1135.82 897.85 li
cp
1134.11 865.084 mo
1134.83 865.03 li
1136.1 881.924 li
1136.68 848.165 li
1136.68 848.165 1135.47 854.378 1134.11 865.084 cv
cp
1248.83 867.347 mo
1249.29 891.229 li
1258.75 915.867 li
1258.84 911.559 1258.71 905.01 1257.76 896.459 cv
1256.82 888.095 1252.67 876.607 1248.83 867.347 cv
cp
1258.6 919.531 mo
1249.37 895.493 li
1249.9 922.924 li
1256.19 935.697 li
1255.98 934.012 1255.75 932.466 1255.66 931.209 cv
1255.29 926.469 1258.39 921.908 1258.39 921.908 cv
1258.39 921.908 1258.5 921.102 1258.6 919.531 cv
cp
1256.6 939.847 mo
1249.96 926.354 li
1250.53 955.617 li
1253.61 958.156 li
1253.29 955.833 1253.35 952.671 1255.02 949.907 cv
1256.66 947.209 1256.84 943.474 1256.6 939.847 cv
cp
1254.05 960.412 mo
1250.56 957.53 li
1250.87 973.559 li
1254.38 961.492 li
1254.38 961.492 1254.23 961.089 1254.05 960.412 cv
cp
1249.43 974.518 mo
1249.08 956.313 li
1243.73 951.893 li
1244.76 963.999 1247.96 971.582 1249.43 974.518 cv
cp
1243.58 949.887 mo
1249.05 954.396 li
1248.45 923.28 li
1238.57 903.205 li
1243.44 946.716 li
1243.46 947.801 1243.52 948.855 1243.58 949.887 cv
cp
1238.1 898.94 mo
1248.39 919.848 li
1247.84 891.506 li
1232.91 852.628 li
1238.1 898.94 li
cp
1232.59 849.768 mo
1233.27 849.508 li
1247.76 887.241 li
1247.31 863.755 li
1244.24 856.658 1241.7 851.587 1241.7 851.587 cv
1231.49 839.912 li
1232.59 849.768 li
cp
1307.97 1007.19 mo
1298.55 998.338 li
1296.88 1017.86 li
1310.97 1043.4 li
1310.24 1029.29 1308.93 1016.2 1307.97 1007.19 cv
cp
1311.13 1046.71 mo
1296.65 1020.47 li
1295.12 1038.44 li
1311.53 1066.45 li
1311.58 1059.9 1311.43 1053.22 1311.13 1046.71 cv
cp
1311.48 1069.26 mo
1294.91 1040.95 li
1293.52 1057.17 li
1305.01 1109.11 li
1306.28 1106.8 1307.43 1103.58 1308.42 1099.26 cv
1310.38 1090.67 1311.27 1080.21 1311.48 1069.26 cv
cp
1303.9 1110.83 mo
1293.1 1062.02 li
1291.06 1085.99 li
1295.43 1112.62 li
1298.49 1114.45 1301.39 1114.19 1303.9 1110.83 cv
cp
1293.76 1111.43 mo
1290.55 1091.9 li
1289.29 1106.62 li
1290.79 1108.58 1292.28 1110.22 1293.76 1111.43 cv
cp
1287.98 1104.81 mo
1289.59 1086.04 li
1278.04 1015.69 li
1268.88 1060.55 li
1271.1 1068.24 1273.72 1076.19 1276.68 1083.21 cv
1280.04 1091.14 1283.97 1099.04 1287.98 1104.81 cv
cp
1268.01 1057.51 mo
1277.39 1011.66 li
1277.24 1010.79 li
1270.87 999.913 li
1265.47 1000.85 li
1274.68 1008.42 li
1274.68 1008.42 1275.41 1014.62 1274.68 1019 cv
1273.95 1023.37 1260.73 1026.2 1260.73 1026.2 cv
1260.73 1026.2 1263.38 1040.84 1268.01 1057.51 cv
cp
1272.4 999.646 mo
1276.59 1006.79 li
1275.33 999.143 li
1272.4 999.646 li
cp
1276.76 998.894 mo
1278.2 1007.65 li
1279.58 1000.88 li
1279.1 998.728 li
1278.17 998.757 1277.59 998.749 1277.59 998.749 cv
1276.76 998.894 li
cp
1294.45 992.489 mo
1297.34 995.216 li
1297.84 989.445 li
1296.02 990.54 li
1296.02 990.54 1295.81 990.741 1294.45 992.489 cv
cp
1299.38 988.52 mo
1298.71 996.491 li
1307.73 1004.97 li
1307.51 1002.83 1307.3 1000.99 1307.15 999.478 cv
1305.51 983.609 1303.49 979.597 1303.49 979.597 cv
1303.32 986.163 li
1299.38 988.52 li
cp
1297.19 997.067 mo
1293.54 993.642 li
1292.56 994.917 li
1291.3 996.527 1288.66 997.463 1285.92 998.004 cv
1295.61 1015.56 li
1297.19 997.067 li
cp
1281.54 998.595 mo
1281.07 1000.87 li
1285.9 1022.69 li
1293.84 1036.26 li
1295.39 1018.18 li
1284.41 998.267 li
1283.4 998.418 1282.42 998.522 1281.54 998.595 cv
cp
1280.36 1004.37 mo
1279.01 1010.94 li
1283.5 1018.6 li
1280.36 1004.37 li
cp
1290.1 1080.13 mo
1292.05 1057.25 li
1284.53 1023.23 li
1279.29 1014.29 li
1290.1 1080.13 li
cp
1292.47 1052.39 mo
1293.63 1038.77 li
1286.91 1027.31 li
1292.47 1052.39 li
cp
1153.76 1014.09 mo
1163.98 1065.55 li
1170.39 1053.52 li
1156.31 1016.03 li
1153.76 1014.09 li
cp
1158.48 1017.68 mo
1165.25 1035.68 li
1165.24 1035.53 1165.23 1035.38 1165.23 1035.23 cv
1165.23 1030.87 1165.23 1026.71 1165.96 1023.37 cv
1158.48 1017.68 li
cp
1166.52 1039.07 mo
1171.3 1051.81 li
1175.93 1043.1 li
1172.01 1042.55 1168.37 1041.41 1166.52 1039.07 cv
cp
1177.48 1043.29 mo
1171.99 1053.62 li
1185.66 1090.04 li
1184.5 1043.62 li
1182.36 1043.6 1179.91 1043.54 1177.48 1043.29 cv
cp
1213.84 810.587 mo
1216.03 858.744 li
1216.03 858.744 1209.91 841.691 1201.72 837.131 cv
1193.5 832.567 1190.22 832.751 1190.22 832.751 cv
1185.29 822.171 li
1174.81 797.09 li
1174.99 785.052 li
1213.84 810.587 li
cp
1206.27 513.71 mo
1206.27 513.71 1218.4 536.052 1219.5 541.343 cv
1220.59 546.635 1220.78 546.635 1220.78 546.635 cv
1220.78 546.635 1212.75 533.682 1209.1 525.652 cv
1205.45 517.629 1203.27 512.336 1203.08 509.606 cv
1206.27 513.71 li
cp
1171.85 710.033 mo
1188.45 705.473 li
1188.45 705.473 1184.61 719.337 1196.1 736.667 cv
1207.6 753.997 1207.14 756.821 1207.14 756.821 cv
1211.7 786.193 li
1179.05 762.477 li
1179.05 762.477 1168.06 752.854 1165.41 749.479 cv
1162.77 746.104 1159.03 742.182 1159.03 742.182 cv
1152.73 723.029 li
1152.73 723.029 1154.83 723.487 1156.29 718.926 cv
1157.75 714.366 1157.02 712.724 1159.03 712.176 cv
1171.85 710.033 li
cp
1178.59 638.709 mo
1178.59 638.709 1184.07 654.397 1185.89 659.688 cv
1187.71 664.977 1189.9 677.198 1189.9 677.198 cv
1189.9 677.198 1175.95 677.472 1173.94 683.855 cv
1171.93 690.242 1174.13 659.415 1175.22 651.022 cv
1178.59 638.709 li
cp
1047.66 523.098 mo
1085.61 555.208 li
1085.61 555.208 1087.79 565.424 1088.53 579.652 cv
1089.25 593.881 1085.98 604.461 1085.61 611.027 cv
1085.24 617.594 1079.95 671.406 1082.14 687.094 cv
1084.33 702.782 1085.42 710.08 1085.42 710.08 cv
1085.42 710.08 1077.12 713.455 1065.27 714.002 cv
1053.41 714.549 1045.74 715.097 1042.47 718.015 cv
1039.18 720.933 1039.18 722.391 1037.36 712.907 cv
1035.54 703.423 1033.71 703.97 1032.61 696.856 cv
1031.52 689.742 1028.96 688.279 1030.43 682.443 cv
1031.88 676.604 1037.27 649.152 1038.36 634.012 cv
1039.45 618.872 1039.55 604.918 1039.55 604.918 cv
1033.8 605.555 li
1033.8 605.555 1039.64 605.739 1040.18 595.156 cv
1040.74 584.577 1043.37 550.557 1044.29 541.8 cv
1045.2 533.044 1047.35 522.784 1046.7 520.414 cv
1047.66 523.098 li
cp
ef
793.834 789.564 mo
864.339 805.746 902.508 894.723 879.08 988.3 cv
855.654 1081.88 779.512 1144.63 709.007 1128.44 cv
675.074 1120.66 648.638 1096.01 632.951 1062.1 cv
567.063 1061.53 li
559.027 1084.22 li
559.027 1084.22 559.445 1093.35 554.319 1095.73 cv
549.193 1098.12 543.229 1092.87 537.983 1090.72 cv
532.735 1088.58 524.746 1089.29 521.169 1089.05 cv
517.592 1088.82 508.529 1085.24 508.529 1085.24 cv
508.529 1085.24 489.211 1086.19 487.301 1080.23 cv
485.396 1074.27 486.588 1068.07 495.413 1063.06 cv
504.235 1058.05 513.359 1054.18 520.037 1044.52 cv
526.713 1034.86 525.523 1034.03 528.622 1028.3 cv
531.723 1022.57 532.915 1019.71 534.824 1018.05 cv
536.73 1016.38 531.842 997.892 544.482 978.098 cv
545.854 973.624 li
464.885 834.465 li
461.906 830.528 li
461.906 830.528 462.144 845.795 459.759 850.088 cv
459.521 850.51 458.948 851.756 458.102 853.65 cv
493.9 892.723 508.694 959.972 491.739 1029.67 cv
467.922 1127.56 390.507 1193.2 318.825 1176.28 cv
247.142 1159.34 208.339 1066.27 232.157 968.376 cv
255.971 870.479 333.388 804.845 405.067 821.771 cv
407.423 822.326 409.743 822.972 412.023 823.688 cv
425.891 798.095 li
433.524 780.447 li
436.684 774.663 li
436.684 774.663 428.932 773.471 430.365 766.911 cv
431.795 760.354 441.932 742.823 441.932 742.823 cv
441.932 742.823 431.795 741.036 429.173 735.313 cv
426.547 729.589 423.982 730.72 422.433 726.667 cv
420.885 722.612 420.405 722.255 420.405 722.255 cv
420.405 722.255 411.285 723.865 396.498 719.333 cv
381.711 714.802 360.725 714.084 352.854 715.756 cv
344.983 717.425 336.158 726.726 339.259 736.025 cv
342.36 745.33 348.084 756.299 361.917 758.445 cv
375.749 760.593 382.903 756.299 385.288 762.501 cv
387.672 768.701 382.846 777.94 371.873 776.392 cv
360.901 774.843 342.062 772.695 332.761 758.146 cv
323.46 743.601 321.194 727.741 321.194 727.741 cv
321.194 727.741 316.007 732.928 314.099 730.543 cv
312.189 728.158 311.476 724.819 311.476 724.819 cv
308.375 724.819 li
308.375 724.819 307.063 732.809 308.375 736.624 cv
309.686 740.439 310.759 740.442 305.036 748.788 cv
299.312 757.135 298.897 761.248 298.897 761.248 cv
298.897 761.248 301.282 768.881 295.079 769.595 cv
288.879 770.311 287.568 765.304 291.502 759.699 cv
295.439 754.094 296.39 743.601 296.152 741.573 cv
295.915 739.545 296.509 735.968 296.509 735.968 cv
296.509 735.968 286.672 743.54 286.791 736.267 cv
286.91 728.991 290.429 725.118 291.383 719.87 cv
292.337 714.622 295.439 707.349 297.345 699.715 cv
299.253 692.086 297.345 688.748 302.114 683.262 cv
306.887 677.775 310.464 678.254 320.72 678.254 cv
330.975 678.254 339.8 671.814 341.706 670.384 cv
342.012 670.153 342.772 669.447 343.874 668.337 cv
353.441 669.811 362.288 672.664 357.148 669.728 cv
353.549 667.671 349.738 666.097 346.994 665.085 cv
353.967 657.606 366.149 643.285 374.5 628.289 cv
386.185 607.303 396.916 591.799 408.364 577.491 cv
419.812 563.18 438.413 532.176 447 512.622 cv
455.094 494.179 464.251 470.442 474.067 457.394 cv
474.067 457.394 475.889 451.787 476.624 447.195 cv
474.572 441.957 471.949 436.775 470.955 434.073 cv
470.955 434.063 li
469.946 431.73 470.137 430.753 470.605 429.028 cv
466.981 425.949 462.201 420.757 462.201 414.837 cv
462.201 408.372 465.605 404.619 470.796 402.554 cv
470.543 400.682 470.27 398.92 470.003 397.325 cv
464.658 396.947 460.09 394.521 456.675 387.311 cv
456.207 386.517 455.793 385.586 455.477 384.489 cv
455.473 384.47 li
455.242 383.668 455.062 382.764 454.954 381.768 cv
452.518 359.222 469.47 332.682 491.087 327.278 cv
493.951 326.559 511.598 320.842 515.65 321.072 cv
519.706 321.321 542.004 319.763 559.654 335.744 cv
577.301 351.725 576.347 363.168 577.063 371.043 cv
577.78 378.91 575.572 391.847 573.068 392.327 cv
570.565 392.807 566.75 391.368 566.75 391.368 cv
566.75 391.368 566.358 395.231 566.203 397.675 cv
566.53 398.45 566.84 399.234 567.133 400.009 cv
569.55 400.691 575.814 401.576 578.972 407.414 cv
582.906 414.689 609.976 433.879 634.539 423.394 cv
634.539 423.394 625.718 431.021 617.606 432.45 cv
617.606 432.45 638.833 428.872 655.288 441.275 cv
655.288 441.275 639.488 438.232 634.122 441.938 cv
634.122 441.938 645.45 456.96 668.825 451.944 cv
668.825 451.944 652.547 457.496 643.246 453.438 cv
643.246 453.438 650.281 470.019 672.459 472.397 cv
672.459 472.397 651.535 472.822 644.856 466.855 cv
644.856 466.855 654.636 477.469 663.339 479.139 cv
663.339 479.139 650.699 479.738 643.545 474.251 cv
643.545 474.251 665.604 495.599 679.916 498.458 cv
671.329 499.887 li
671.329 499.887 680.392 505.374 691.839 511.57 cv
703.287 517.777 701.259 525.292 710.084 531.25 cv
718.909 537.212 721.293 540.075 721.77 549.138 cv
722.245 558.198 713.185 571.079 710.322 574.418 cv
707.461 577.754 721.053 567.502 723.916 559.631 cv
726.78 551.761 734.889 568.932 747.766 588.488 cv
760.644 608.044 772.329 652.167 760.406 677.447 cv
748.479 702.728 734.171 712.266 711.752 718.465 cv
689.335 724.668 679.556 726.815 679.556 726.815 cv
660.241 805.277 li
674.307 834.354 li
707.955 798.246 751.894 779.94 793.834 789.564 cv
cp
342.098 862.32 mo
355.808 943.662 li
361.113 931.691 366.913 918.648 372.436 906.257 cv
367.328 855.188 li
358.794 856.313 350.333 858.733 342.098 862.32 cv
cp
360.357 970.642 mo
360.382 970.808 li
363.387 966.578 371.92 962.288 377.781 959.709 cv
375.558 937.494 li
367.817 953.186 362.098 966.475 362.098 966.475 cv
360.357 970.642 li
cp
348.898 959.284 mo
313.666 880.098 li
305.5 886.892 297.827 894.903 290.85 903.947 cv
325.986 967.706 li
341.659 975.785 li
343.666 971.182 346.128 965.565 348.898 959.284 cv
cp
315.961 878.231 mo
350.455 955.766 li
353.711 948.398 li
339.407 863.539 li
331.302 867.347 323.435 872.288 315.961 878.231 cv
cp
714.453 837.557 mo
733.775 873.636 li
733.001 827.365 li
726.658 830.067 720.451 833.485 714.453 837.557 cv
cp
735.836 826.213 mo
736.722 879.133 li
753.223 909.941 li
753.756 910.366 754.293 910.799 754.831 911.238 cv
761.825 820.287 li
753.058 820.878 744.337 822.898 735.836 826.213 cv
cp
764.704 820.146 mo
757.521 913.522 li
759.426 915.19 761.303 916.955 763.09 918.813 cv
765.547 916.58 li
790.271 823.627 li
788.531 823.083 786.767 822.596 784.977 822.175 cv
778.255 820.587 771.472 819.935 764.704 820.146 cv
cp
792.984 824.534 mo
769.444 913.036 li
795.239 889.575 li
811.895 834.325 li
806.052 830.229 799.735 826.927 792.984 824.534 cv
cp
814.345 836.108 mo
799.349 885.836 li
833.008 855.221 li
827.565 847.826 821.315 841.385 814.345 836.108 cv
cp
834.679 857.563 mo
797.747 891.156 li
785.87 930.542 li
786.137 930.643 786.396 930.752 786.641 930.867 cv
848.061 883.206 li
844.491 873.848 840.003 865.229 834.679 857.563 cv
cp
849.095 886.017 mo
789.209 932.483 li
791.337 934.151 793.758 936.854 795.632 940.751 cv
855.792 912.474 li
854.311 903.199 852.06 894.329 849.095 886.017 cv
cp
856.234 915.417 mo
796.738 943.385 li
798.413 947.987 799.291 953.931 798.405 961.406 cv
802.332 963.12 li
857.729 946.299 li
858.147 935.675 857.628 925.323 856.234 915.417 cv
cp
783.128 929.731 mo
793.633 894.896 li
768.089 918.129 li
766.804 922.963 li
768.306 924.782 769.707 926.674 770.96 928.638 cv
770.96 928.638 777.726 928.496 783.128 929.731 cv
cp
857.589 949.32 mo
806.356 964.878 li
852.175 984.91 li
852.254 984.589 852.341 984.272 852.42 983.952 cv
855.266 972.251 856.959 960.643 857.589 949.32 cv
cp
851.462 987.712 mo
802.148 966.157 li
797.303 967.627 li
797.148 968.279 796.979 968.924 796.799 969.558 cv
839.646 1020.28 li
844.431 1010.11 848.425 999.214 851.462 987.712 cv
cp
838.288 1023.1 mo
795.78 972.774 li
790.84 986.639 780.895 994.931 774.544 996.317 cv
822.572 1049.12 li
828.401 1041.18 833.681 1032.46 838.288 1023.1 cv
cp
820.829 1051.45 mo
774.412 1000.42 li
798.435 1075.06 li
806.464 1068.34 814 1060.41 820.829 1051.45 cv
cp
796.06 1077 mo
770.19 996.609 li
769.98 996.606 769.769 996.599 769.552 996.592 cv
765.557 1010.25 li
771.738 1092.01 li
780.16 1088.21 788.327 1083.16 796.06 1077 cv
cp
768.961 1093.21 mo
763.277 1018.03 li
739.279 1100.01 li
749.308 1099.56 759.286 1097.21 768.961 1093.21 cv
cp
736.282 1100.1 mo
762.669 1009.97 li
761.552 995.208 li
756.664 993.651 751.966 990.658 749.139 985.519 cv
747.453 986.372 li
728.426 1018.38 li
730.713 1022.88 731.97 1023.83 732.205 1030.59 cv
732.442 1037.51 730.295 1039.66 730.295 1039.66 cv
730.295 1039.66 737.454 1041.56 736.736 1044.19 cv
736.02 1046.81 730.058 1053.97 724.334 1055.16 cv
723.347 1055.36 721.031 1055.62 717.875 1055.9 cv
711.625 1096.28 li
713.668 1096.94 715.747 1097.53 717.865 1098.03 cv
723.971 1099.47 730.129 1100.15 736.282 1100.1 cv
cp
708.888 1095.33 mo
714.95 1056.15 li
712.163 1056.38 708.96 1056.62 705.56 1056.86 cv
689.101 1084.56 li
695.174 1089.07 701.788 1092.71 708.888 1095.33 cv
cp
686.818 1082.8 mo
702.094 1057.1 li
694.123 1057.65 685.55 1058.18 679.029 1058.58 cv
671.437 1067.11 li
676.036 1073.04 681.18 1078.31 686.818 1082.8 cv
cp
695.448 1040.13 mo
682.34 1054.86 li
701.438 1053.25 li
701.438 1053.25 694.062 1045.22 695.448 1040.13 cv
cp
669.683 1064.78 mo
674.873 1058.95 li
666.304 1059.88 li
667.391 1061.56 668.519 1063.19 669.683 1064.78 cv
cp
678.201 1055.21 mo
702.412 1028.02 li
702.969 1026.92 703.457 1025.79 703.823 1024.63 cv
705.495 1019.39 707.642 1020.82 709.785 1014.61 cv
711.932 1008.41 712.648 998.396 712.648 998.396 cv
701.089 1001.66 li
654.352 1035.86 li
657.06 1043.16 660.327 1050.03 664.106 1056.35 cv
674.029 1055.56 li
678.201 1055.21 li
cp
653.347 1033.06 mo
693.215 1003.88 li
648.696 1016.45 li
649.946 1022.18 651.502 1027.73 653.347 1033.06 cv
cp
719.547 940.822 mo
719.183 940.513 li
658.238 942.391 li
655.284 944.648 652.464 946.313 650.137 946.976 cv
649.305 975.951 li
649.305 975.951 718.942 949.003 719.183 943.755 cv
719.23 942.732 719.374 941.767 719.547 940.822 cv
cp
661.811 939.426 mo
715.959 937.758 li
682.714 909.365 li
680.77 912.672 678.785 916.354 677.326 919.79 cv
674.851 925.61 668.378 933.568 661.811 939.426 cv
cp
684.203 906.888 mo
720.131 937.566 li
720.519 934.703 720.379 931.525 717.75 926.825 cv
713.218 918.717 689.49 898.8 689.49 898.8 cv
689.49 898.8 687.063 902.223 684.203 906.888 cv
cp
734.68 927.566 mo
734.434 913.015 li
724.226 906.357 707.375 896.178 707.375 896.178 cv
700.279 892.54 li
715.065 905.896 731.463 930.996 731.463 930.996 cv
732.276 929.642 733.397 928.511 734.68 927.566 cv
cp
734.164 896.794 mo
733.88 879.867 li
712.098 839.195 li
707.504 842.474 703.045 846.137 698.751 850.153 cv
699.375 851.054 700.012 852.033 700.664 853.097 cv
705.195 860.487 707.998 864.244 706.806 871.16 cv
705.613 878.076 706.806 879.032 706.806 879.032 cv
706.806 879.032 726.957 891.553 732.442 895.604 cv
732.903 895.947 733.483 896.344 734.164 896.794 cv
cp
747.802 905.86 mo
736.826 885.364 li
737.046 898.66 li
739.967 900.529 743.743 902.95 747.802 905.86 cv
cp
737.32 914.923 mo
737.503 925.871 li
742.666 923.331 748.634 922.888 748.634 922.888 cv
748.634 922.888 747.442 921.934 738.854 915.972 cv
738.386 915.647 737.871 915.295 737.32 914.923 cv
cp
739.921 990.184 mo
738.937 991.289 li
737.849 993.043 735.277 997.16 732.562 1001.14 cv
728.984 1006.39 729.222 1007.34 728.268 1009.49 cv
727.558 1011.09 726.579 1012.43 727.123 1014.99 cv
742.698 988.778 li
739.921 990.184 li
cp
764.945 1002.18 mo
766.656 996.34 li
765.935 996.246 765.208 996.123 764.476 995.972 cv
764.945 1002.18 li
cp
797.958 964.449 mo
798.128 964.396 li
797.98 964.334 li
797.958 964.449 li
cp
344.011 1000.42 mo
344.669 1001.62 li
345.523 1001.15 li
345.664 1000.63 345.758 1000.34 345.758 1000.34 cv
345.758 1000.34 345.051 1000.43 344.011 1000.42 cv
cp
351.903 1032.73 mo
353.369 1036.49 li
354.233 1034.93 li
353.87 1034.62 353.509 1034.3 353.153 1033.96 cv
352.717 1033.56 352.303 1033.15 351.903 1032.73 cv
cp
364.849 1040.87 mo
363.293 1062 li
390.346 1131.54 li
398.486 1127.1 406.342 1121.52 413.749 1114.92 cv
389.229 1038.54 li
384.316 1040.66 374.849 1043.93 364.849 1040.87 cv
cp
387.806 1132.88 mo
362.807 1068.62 li
357.343 1142.76 li
367.706 1141.3 377.95 1137.93 387.806 1132.88 cv
cp
354.45 1143.12 mo
360.397 1062.42 li
352.923 1043.21 li
348.131 1051.9 li
332.001 1142.4 li
339.461 1143.7 346.979 1143.92 354.45 1143.12 cv
cp
329.191 1141.86 mo
343.838 1059.67 li
304.005 1131.86 li
311.166 1136.22 318.955 1139.48 327.297 1141.45 cv
327.927 1141.6 328.558 1141.73 329.191 1141.86 cv
cp
301.588 1130.33 mo
345.395 1050.94 li
348.704 1032.37 li
343.42 1018.78 li
344.752 1018.27 li
344.403 1016.37 344.238 1014.51 344.191 1012.75 cv
343.773 1012.76 li
323.125 1032.47 li
282.342 1113.19 li
288.059 1119.89 294.499 1125.66 301.588 1130.33 cv
cp
280.357 1110.79 mo
316.948 1038.37 li
265.836 1087.15 li
269.875 1095.84 274.741 1103.78 280.357 1110.79 cv
cp
264.591 1084.39 mo
320.799 1030.74 li
329.652 1013.22 li
329.541 1013.22 li
255.239 1054.17 li
257.365 1064.91 260.509 1075.06 264.591 1084.39 cv
cp
254.681 1051.21 mo
323.252 1013.42 li
252.091 1015.73 li
251.77 1028.01 252.664 1039.92 254.681 1051.21 cv
cp
252.184 1012.87 mo
328.752 1010.39 li
331.976 1008.62 li
337.203 998.273 li
335.722 996.897 334.865 994.657 335.585 991.052 cv
331.425 983.502 li
256.288 980.439 li
253.971 991.408 252.624 1002.27 252.184 1012.87 cv
cp
256.904 977.612 mo
329.814 980.58 li
323.9 969.846 li
268.779 941.433 li
264.238 951.773 260.474 962.8 257.652 974.396 cv
257.394 975.469 257.141 976.538 256.904 977.612 cv
cp
269.947 938.823 mo
321.429 965.361 li
288.966 906.443 li
281.755 916.166 275.339 927.026 269.947 938.823 cv
cp
328.457 972.194 mo
333.15 980.717 li
339.411 980.97 li
340.516 978.411 li
328.457 972.194 li
cp
334.76 983.635 mo
336.756 987.255 li
336.814 987.1 li
337.145 986.282 337.617 985.161 338.208 983.778 cv
334.76 983.635 li
cp
342.17 1003 mo
340.514 999.995 li
340.229 999.92 339.944 999.834 339.667 999.732 cv
336.41 1006.17 li
342.17 1003 li
cp
326.976 1024.85 mo
339.494 1012.9 li
332.906 1013.11 li
326.976 1024.85 li
cp
342.588 1009.94 mo
344.317 1008.29 li
344.421 1007.02 344.573 1005.86 344.742 1004.84 cv
335.045 1010.19 li
342.588 1009.94 li
cp
356.506 1036.72 mo
354.72 1039.96 li
360.883 1055.81 li
362.062 1039.85 li
360.206 1039.06 358.347 1038.03 356.506 1036.72 cv
cp
349.688 1043.16 mo
351.576 1039.75 li
350.697 1037.49 li
349.688 1043.16 li
cp
394.83 1034.4 mo
438.744 1086.25 li
444.364 1078.02 449.432 1069.06 453.823 1059.49 cv
398.757 1029.52 li
397.463 1031.36 396.138 1033.02 394.83 1034.4 cv
cp
437.058 1088.67 mo
392.755 1036.37 li
392.427 1036.65 392.1 1036.91 391.775 1037.14 cv
416.068 1112.81 li
423.619 1105.78 430.671 1097.69 437.058 1088.67 cv
cp
400.345 1027.14 mo
454.997 1056.88 li
459.589 1046.47 463.397 1035.35 466.239 1023.65 cv
466.625 1022.07 466.985 1020.5 467.327 1018.93 cv
408.003 1011.02 li
406.246 1016.46 403.451 1022.26 400.345 1027.14 cv
cp
408.813 1008.25 mo
467.922 1016.13 li
470.382 1004.04 471.657 992.089 471.848 980.482 cv
415.208 985.025 li
412.07 988.977 407.646 990.677 407.646 990.677 cv
407.646 990.677 411.75 996.833 408.813 1008.25 cv
cp
370.163 854.865 mo
374.777 901.001 li
383.617 881.175 391.412 863.737 394.783 856.197 cv
386.614 854.469 378.361 854.061 370.163 854.865 cv
cp
377.946 932.711 mo
380.533 958.538 li
382.446 957.746 383.681 957.292 383.681 957.292 cv
383.681 957.292 397.874 930.222 399.304 924.498 cv
400.454 919.901 414.815 881.499 420.438 866.528 cv
420.012 866.266 419.588 865.995 419.156 865.74 cv
413.9 873.488 403.5 888.981 393.101 905.418 cv
387.979 913.519 382.68 923.338 377.946 932.711 cv
cp
410.989 962.047 mo
459.41 913.896 li
455.116 904.02 449.789 895.047 443.524 887.233 cv
431.562 914.822 416.35 949.515 409.912 960.988 cv
409.912 960.988 410.337 961.366 410.989 962.047 cv
cp
460.605 916.731 mo
416.433 960.66 li
468.433 942.757 li
466.553 933.597 463.923 924.876 460.605 916.731 cv
cp
468.988 945.592 mo
413.327 964.753 li
415.889 968.045 418.842 973.098 418.14 978.275 cv
417.956 979.644 417.578 980.883 417.066 982.007 cv
471.874 977.612 li
471.883 966.542 470.893 955.808 468.988 945.592 cv
cp
637.421 768.91 mo
637.421 768.91 651.495 750.547 656.264 735.042 cv
644.337 781.787 li
637.421 768.91 li
cp
631.334 1058.48 mo
626.82 1048.03 623.297 1036.77 620.858 1024.89 cv
619.35 1025.91 616.925 1027.46 615.163 1028.15 cv
612.422 1029.22 607.415 1028.39 607.415 1028.39 cv
607.415 1028.39 599.217 1048.21 589.793 1051.19 cv
582.477 1053.51 573.717 1055.9 570.176 1056.85 cv
573.627 1057.42 631.327 1058.47 631.327 1058.47 cv
631.334 1058.48 li
cp
718.523 960.643 mo
718.523 960.643 719.716 970.897 724.723 976.621 cv
672.733 985.446 li
718.523 960.643 li
cp
614.9 821.707 mo
628.016 836.973 li
628.016 836.973 599.397 942.861 588.428 956.693 cv
588.428 956.693 589.203 944.354 590.514 936.007 cv
591.825 927.657 594.926 930.164 597.791 910.608 cv
600.65 891.052 602.081 867.678 603.514 853.369 cv
614.9 821.707 li
cp
484.982 780.148 mo
484.982 780.148 490.229 791.838 501.915 794.223 cv
513.601 796.607 520.996 796.131 524.811 796.845 cv
528.625 797.562 531.727 803.285 529.58 808.529 cv
527.433 813.778 523.618 814.495 515.985 813.778 cv
508.355 813.062 497.622 813.062 493.09 809.722 cv
488.559 806.383 474.727 794.223 474.727 794.223 cv
495.954 822.125 li
505.852 836.076 li
511.458 844.544 li
511.458 844.544 514.137 845.676 511.753 840.188 cv
509.368 834.707 508.057 835.539 510.561 831.844 cv
513.064 828.147 515.689 827.313 517.955 828.267 cv
520.221 829.221 524.512 833.634 524.512 833.634 cv
524.512 833.634 530.833 829.34 535.246 831.605 cv
539.659 833.871 542.638 840.188 542.043 842.456 cv
541.445 844.722 538.823 848.896 538.823 848.896 cv
544.19 844.008 li
552.295 853.784 li
552.295 853.784 553.369 832.917 552.414 824.57 cv
551.462 816.221 558.26 786.77 558.26 786.77 cv
558.26 786.77 544.187 782.713 530.354 781.046 cv
516.522 779.374 491.004 780.092 491.004 780.092 cv
484.982 780.148 li
cp
586.757 578.565 mo
586.757 578.565 596.774 594.302 602.974 598.596 cv
609.176 602.89 619.072 610.642 635.292 610.163 cv
635.292 610.163 616.27 611.892 608.161 607.479 cv
608.161 607.479 607.328 628.707 599.458 639.199 cv
591.587 649.692 583.241 669.49 583.241 669.49 cv
583.241 669.49 548.099 688.297 542.774 708.704 cv
537.45 729.113 541.027 746.047 551.045 757.016 cv
561.059 767.988 564.874 772.281 564.874 772.281 cv
564.874 772.281 546.154 765.959 534.468 765.005 cv
522.783 764.051 497.023 760.953 492.492 760.953 cv
487.96 760.953 483.191 758.807 483.191 758.807 cv
487.248 751.173 li
487.248 751.173 495.831 749.505 497.978 743.302 cv
500.125 737.103 499.351 734.3 497.441 731.08 cv
495.532 727.86 494.7 726.311 494.7 726.311 cv
494.7 726.311 496.486 723.09 497.441 721.182 cv
498.396 719.275 500.78 710.45 506.029 704.964 cv
511.273 699.479 535.721 666.926 544.542 652.618 cv
553.369 638.307 575.19 601.46 581.393 588.103 cv
586.757 578.565 li
cp
358.758 694.709 mo
358.758 694.709 372.115 680.163 384.993 667.761 cv
397.871 655.359 416.115 640.215 424.703 627.813 cv
433.287 615.412 444.854 604.32 450.101 591.442 cv
455.347 578.565 467.928 554.416 475.562 543.447 cv
483.191 532.475 501.436 513.276 501.436 513.276 cv
501.436 513.276 512.408 525.919 520.517 530.209 cv
528.625 534.502 538.163 546.188 543.174 552.629 cv
548.182 559.066 548.3 557.755 548.3 557.755 cv
548.3 557.755 537.09 582.56 531.129 596.15 cv
525.167 609.745 519.799 622.745 503.583 648.979 cv
487.366 675.214 473.177 696.794 473.177 696.794 cv
485.576 702.756 li
470.371 701.506 li
470.371 701.506 464.409 715.696 459.165 715.22 cv
453.916 714.744 448.43 709.02 441.993 708.065 cv
435.552 707.111 430.066 705.202 424.105 704.727 cv
418.143 704.248 387.971 697.691 377.958 697.45 cv
367.94 697.213 356.193 697.155 356.193 697.155 cv
358.758 694.709 li
cp
ef
2816.86 433.335 mo
2816.86 433.335 2814.04 418.608 2808.39 409.83 cv
2802.76 401.06 2802.45 394.171 2802.45 394.171 cv
2802.45 394.171 2793.67 384.452 2793.98 380.689 cv
2794.29 376.936 2795.47 378.273 2796.57 376.235 cv
2797.67 374.197 2805.65 372.316 2805.65 372.316 cv
2805.65 372.316 2805.65 368.554 2806.28 365.732 cv
2806.91 362.919 2807.62 360.328 2806.05 357.359 cv
2804.48 354.38 2800.72 353.91 2801.66 346.708 cv
2802.6 339.497 2806.59 331.585 2814.75 323.913 cv
2822.89 316.231 2834.48 310.597 2839.96 309.029 cv
2845.45 307.461 2861.27 309.186 2864.71 309.656 cv
2868.16 310.126 2883.43 314.276 2887.35 316.941 cv
2891.27 319.597 2901.13 321.792 2905.21 329.787 cv
2909.29 337.772 2914.06 342.706 2913.44 356.806 cv
2912.81 370.905 2909.67 383.438 2908.11 385.475 cv
2906.54 387.513 2903.76 389.044 2901.64 388.961 cv
2899.53 388.878 2897.65 388.334 2897.65 388.334 cv
2897.65 388.334 2897.38 396.597 2895.73 400.977 cv
2894.09 405.366 2894.25 407.017 2894.25 407.017 cv
2894.25 407.017 2907.48 409.516 2913.59 416.57 cv
2919.7 423.616 2922.68 431.924 2928.15 434.11 cv
2933.64 436.304 2944.6 440.694 2947.9 446.808 cv
2950.48 451.603 2953.93 458.427 2955.45 467.206 cv
2955.45 467.206 2965.05 495.092 2973.66 498.384 cv
2973.66 498.384 2966.18 497.406 2963.67 491.606 cv
2963.67 491.606 2970.18 504.221 2979.42 505.632 cv
2979.42 505.632 2967.82 504.378 2964.93 499.832 cv
2964.93 499.832 2970.18 511.58 2978.95 514.401 cv
2978.95 514.401 2973 520.35 2963.91 504.848 cv
2962.13 501.823 2960.47 499.666 2958.94 498.144 cv
2960.39 508.38 2961.85 519.713 2961.68 530.141 cv
2961.37 549.88 2964.5 568.99 2972.65 587.163 cv
2980.79 605.332 2980.32 613.322 2971.86 618.023 cv
2963.41 622.719 2954.31 625.227 2954.31 625.227 cv
2954.31 625.227 2974.37 621.784 2980.32 616.143 cv
2986.28 610.501 2987.22 617.709 2989.41 630.242 cv
2991.6 642.772 2991.13 642.301 2996.46 666.115 cv
3001.78 689.925 2992.85 713.577 2982.51 735.824 cv
2972.18 758.067 2957.14 795.037 2948.99 813.836 cv
2940.84 832.632 2933.8 847.517 2930.66 853.467 cv
2927.54 859.422 2931.22 875.801 2934.11 885.111 cv
2936.99 894.424 2940.1 907.896 2941.18 912.776 cv
2941.18 912.78 li
2946.88 909.772 2952.9 908.159 2959.13 908.159 cv
2994.95 908.159 3023.98 961.438 3023.98 1027.16 cv
3023.98 1092.89 2994.95 1146.17 2959.13 1146.17 cv
2944.28 1146.17 2930.61 1137.01 2919.68 1121.61 cv
2919.88 1122.52 2920.09 1123.43 2920.32 1124.32 cv
2919.76 1123.68 2919.22 1123.03 2918.68 1122.36 cv
2918.68 1122.36 2893.15 1132.23 2883.74 1127.84 cv
2874.35 1123.46 2871.84 1119.07 2873.72 1112.18 cv
2875.6 1105.28 2874.66 1100.27 2874.66 1100.27 cv
2874.66 1100.27 2850.94 1093.09 2827.18 1082.16 cv
2811.2 1077.65 2799 1053.57 2799 1024.53 cv
2799 993.198 2813.2 967.631 2831.02 966.204 cv
2831.64 964.654 2831.86 962.829 2831.19 960.771 cv
2828.99 954.036 2814.43 952.473 2805.65 957.797 cv
2796.88 963.124 2787.49 968.447 2779.65 967.194 cv
2771.82 965.941 2769.63 963.751 2769.63 955.603 cv
2769.63 947.458 2774.33 930.853 2774.33 930.853 cv
2740.49 927.092 li
2737.98 934.613 li
2737.98 934.613 2745.5 944.951 2744.56 957.17 cv
2743.62 969.388 2743.62 969.388 2743.62 969.388 cv
2742.73 973.174 li
2758.93 995.918 2769.21 1029.79 2769.21 1067.63 cv
2769.21 1136.1 2735.54 1191.62 2694.02 1191.62 cv
2652.49 1191.62 2618.83 1136.1 2618.83 1067.63 cv
2618.83 999.148 2652.49 943.64 2694.02 943.64 cv
2696.96 943.64 2699.86 943.925 2702.71 944.469 cv
2704.8 939.479 2706.98 935.29 2708.92 933.439 cv
2710.46 931.969 2711.7 930.279 2712.68 928.468 cv
2650.85 865.625 2701.37 722.557 2722.57 670.932 cv
2721.69 669.847 2720.99 668.409 2720.67 666.504 cv
2719.42 658.986 2719.27 657.264 2719.27 657.264 cv
2719.27 657.264 2714.88 654.444 2715.19 649.902 cv
2715.5 645.359 2715.19 644.732 2715.19 644.732 cv
2704.38 643.947 li
2704.38 643.947 2708.38 649.667 2697.57 654.365 cv
2686.76 659.065 2687.39 662.509 2682.37 663.921 cv
2677.36 665.33 2673.13 661.414 2672.82 659.22 cv
2672.5 657.026 2664.82 657.653 2663.89 657.653 cv
2662.95 657.653 2655.58 655.305 2654.17 652.33 cv
2652.76 649.354 2651.82 649.195 2651.82 649.195 cv
2651.82 649.195 2653.54 655.773 2643.52 656.872 cv
2633.5 657.967 2629.74 659.534 2628.01 659.534 cv
2626.29 659.534 2623.47 658.439 2623.32 656.559 cv
2623.16 654.679 2620.65 657.185 2618.61 653.896 cv
2616.58 650.604 2610.47 643.713 2611.73 638.231 cv
2612.98 632.748 2613.61 628.048 2622.06 623.505 cv
2630.52 618.963 2634.75 614.733 2634.75 614.733 cv
2647.98 604.158 li
2647.98 604.158 2655.66 603.218 2661.14 608.386 cv
2661.14 608.386 2660.36 603.218 2649.87 601.496 cv
2649.87 601.496 2665.85 586.77 2677.75 571.104 cv
2689.66 555.442 2699.52 546.826 2713 533.354 cv
2726.47 519.879 2735.24 502.34 2735.24 502.34 cv
2735.24 502.34 2755.77 469.908 2768.3 459.257 cv
2780.83 448.606 2799.31 435.447 2818.1 439.2 cv
2816.86 433.335 li
cp
2943.46 1113.85 mo
2956.11 1074.25 li
2956.02 1064.85 li
2953.51 1066.3 2950.27 1067.22 2946.13 1066.83 cv
2933.75 1060.87 li
2933.75 1060.87 2927.29 1074.43 2924.98 1078.42 cv
2923.6 1080.81 2926.99 1086.61 2927.71 1093.94 cv
2932.17 1102.61 2937.52 1109.44 2943.46 1113.85 cv
cp
2957.93 1068.57 mo
2959.99 1062.14 li
2959.82 1061.77 li
2959.25 1062.39 2958.6 1063 2957.87 1063.58 cv
2957.93 1068.57 li
cp
2963.98 1055.78 mo
2961.98 1062.03 li
2968.76 1077.58 li
2970.28 1055.81 li
2963.98 1055.78 li
cp
2961.12 1064.74 mo
2957.99 1074.53 li
2958.45 1119.45 li
2958.68 1119.46 2958.9 1119.46 2959.13 1119.46 cv
2961.44 1119.46 2963.72 1119.11 2965.94 1118.43 cv
2968.49 1081.63 li
2961.12 1064.74 li
cp
2956.17 1080.21 mo
2945.07 1114.97 li
2948.72 1117.38 2952.58 1118.87 2956.57 1119.32 cv
2956.17 1080.21 li
cp
2970.4 1081.31 mo
2981.74 1107.3 li
2983.33 1105.44 2984.88 1103.39 2986.35 1101.16 cv
2977.29 1058.31 li
2976.78 1058.35 2976.34 1058.37 2975.98 1058.37 cv
2972.68 1058.37 2973.42 1055.82 2973.42 1055.82 cv
2972.16 1055.82 li
2970.4 1081.31 li
cp
2980.36 1108.84 mo
2970.11 1085.35 li
2967.87 1117.76 li
2972.3 1116.02 2976.49 1112.98 2980.36 1108.84 cv
cp
2995.1 1083.67 mo
2979.5 1059.7 li
2987.78 1098.89 li
2990.5 1094.4 2992.96 1089.29 2995.1 1083.67 cv
cp
2980.55 1057.88 mo
2995.91 1081.48 li
2997.52 1077.01 2998.92 1072.23 3000.1 1067.21 cv
2990.33 1053.53 li
2988.54 1055.88 2984.17 1057.23 2980.55 1057.88 cv
cp
2974.14 1034.32 mo
2974.38 1035.45 li
2976.35 1037.72 2981.35 1043.29 2984.29 1045.07 cv
2976.24 1033.8 li
2974.14 1034.32 li
cp
2978.19 1033.32 mo
2987.48 1046.3 li
2989.82 1047.22 2991.79 1048.53 2991.19 1051.52 cv
3000.64 1064.75 li
3003.08 1053.57 3004.42 1041.23 3004.42 1028.25 cv
3004.42 1009.32 3001.56 991.747 2996.66 977.172 cv
2980.6 994.87 li
2984.6 1000.51 2987.9 1006.71 2989.87 1013.45 cv
2989.87 1013.45 2996.65 1026.17 2993.36 1014.27 cv
2990.07 1002.36 2989.13 999.466 2991.01 997.74 cv
2992.89 996.019 2992.26 998.213 2995.24 1006.83 cv
2998.22 1015.44 3000.87 1021.86 3000.1 1027.03 cv
2999.31 1032.21 2988.42 1032.83 2988.42 1032.83 cv
2988.42 1032.83 2984.82 1035.1 2982.39 1034.4 cv
2979.96 1033.69 2979.5 1032.99 2979.5 1032.99 cv
2978.19 1033.32 li
cp
2979.47 993.321 mo
2995.96 975.151 li
2993.02 966.892 2989.4 959.658 2985.28 953.78 cv
2978.81 992.442 li
2979.03 992.733 2979.25 993.025 2979.47 993.321 cv
cp
2977.24 990.454 mo
2983.73 951.665 li
2983.52 951.385 2983.3 951.111 2983.09 950.837 cv
2971.36 968.711 li
2972.42 984.931 li
2974.07 986.699 2975.69 988.54 2977.24 990.454 cv
cp
2969.65 971.319 mo
2965.31 977.946 li
2967 979.503 2968.72 981.135 2970.4 982.839 cv
2969.65 971.319 li
cp
2963.89 976.671 mo
2969.45 968.207 li
2967.52 938.611 li
2964.87 937.613 2962.14 937.073 2959.35 937.048 cv
2957.74 971.448 li
2959.74 973.077 2961.81 974.82 2963.89 976.671 cv
cp
2971.15 965.599 mo
2981.83 949.316 li
2978.02 944.864 2973.86 941.497 2969.46 939.43 cv
2971.15 965.599 li
cp
2951.18 938.445 mo
2955.49 969.636 li
2955.93 969.989 li
2957.47 937.102 li
2955.33 937.257 2953.23 937.714 2951.18 938.445 cv
cp
2953.36 967.965 mo
2949.38 939.163 li
2946.33 940.513 2943.39 942.483 2940.6 945.006 cv
2940.36 950.235 2940.04 954.371 2939.59 955.643 cv
2938.98 957.364 2945.1 961.531 2953.36 967.965 cv
cp
2690.08 968.052 mo
2690.88 1013.73 li
2692.47 1006.29 2693.78 998.922 2694.05 994.063 cv
2694.67 982.468 2693.11 972.756 2693.11 972.756 cv
2693.11 972.756 2693.62 970.891 2694.51 967.962 cv
2693.99 967.937 2693.47 967.918 2692.94 967.918 cv
2691.99 967.918 2691.03 967.965 2690.08 968.052 cv
cp
2705.22 1008.05 mo
2719.92 980.67 li
2715.48 976.142 2710.65 972.698 2705.54 970.541 cv
2705.27 981.308 2706.25 994.231 2705.22 1008.05 cv
cp
2721.29 982.1 mo
2705.28 1011.91 li
2707.66 1051.88 li
2708.47 1051.27 li
2711.99 1041.78 2715.79 1025.86 2716.48 1019.16 cv
2717.08 1013.36 2720.97 999.657 2724.36 985.698 cv
2723.36 984.441 2722.34 983.238 2721.29 982.1 cv
cp
2727.71 1036.66 mo
2742.83 1025.17 li
2740.85 1017.56 2738.35 1010.48 2735.41 1004.07 cv
2727.71 1036.66 li
cp
2743.33 1027.15 mo
2727.03 1039.52 li
2722.16 1060.09 li
2722.16 1060.09 2722.19 1061.6 2721.79 1063.56 cv
2747.28 1050.78 li
2746.5 1042.51 2745.16 1034.59 2743.33 1027.15 cv
cp
2705.43 1057.69 mo
2704.01 1057 li
2697.61 1061.87 li
2697.72 1062.22 li
2699.41 1061.79 2701.9 1061.31 2704.96 1058.25 cv
2705.12 1058.09 2705.28 1057.91 2705.43 1057.69 cv
cp
2693.1 1072.85 mo
2693.45 1075.25 li
2695.02 1072.81 li
2693.1 1072.85 li
cp
2696.16 1072.78 mo
2696.94 1073.29 li
2694.95 1076.37 li
2700.92 1075.56 li
2700.71 1075.16 li
2699.85 1073.5 2699.52 1072.7 2699.52 1072.7 cv
2696.16 1072.78 li
cp
2747.46 1052.79 mo
2721.08 1066 li
2720.94 1066.41 2720.76 1066.82 2720.56 1067.22 cv
2747.66 1079.77 li
2747.93 1075.79 2748.07 1071.74 2748.07 1067.63 cv
2748.07 1062.58 2747.85 1057.63 2747.46 1052.79 cv
cp
2747.51 1081.77 mo
2719.58 1068.84 li
2718.94 1069.72 2718.22 1070.48 2717.49 1071.12 cv
2743.62 1106.91 li
2745.49 1099 2746.82 1090.57 2747.51 1081.77 cv
cp
2743.03 1109.28 mo
2716.02 1072.29 li
2714.44 1073.41 2713.15 1073.96 2713.15 1073.96 cv
2713.15 1073.96 2712.18 1074.28 2710.87 1074.75 cv
2708.53 1083.46 li
2714.05 1108 li
2735.02 1132.03 li
2738.23 1125.18 2740.94 1117.53 2743.03 1109.28 cv
cp
2734.13 1133.87 mo
2714.92 1111.84 li
2723.6 1150.5 li
2727.49 1145.78 2731.03 1140.18 2734.13 1133.87 cv
cp
2722.08 1152.28 mo
2712.32 1108.88 li
2704.22 1099.59 li
2699.55 1117.04 li
2706.45 1164.32 li
2712.05 1161.76 2717.31 1157.66 2722.08 1152.28 cv
cp
2704.67 1165.07 mo
2698.33 1121.63 li
2686.28 1166.61 li
2688.47 1167.09 2690.69 1167.34 2692.94 1167.34 cv
2696.97 1167.34 2700.89 1166.55 2704.67 1165.07 cv
cp
2684.46 1166.16 mo
2697.63 1116.92 li
2693.27 1087.04 li
2690.28 1083.62 li
2677.92 1102.8 li
2670.74 1158.91 li
2675.06 1162.35 2679.65 1164.82 2684.46 1166.16 cv
cp
2669.04 1157.5 mo
2675.56 1106.45 li
2654.51 1139.1 li
2658.76 1146.56 2663.64 1152.8 2669.04 1157.5 cv
cp
2653.48 1137.23 mo
2676.11 1102.13 li
2678.85 1080.74 li
2644.98 1116.79 li
2647.33 1124.26 2650.19 1131.13 2653.48 1137.23 cv
cp
2644.35 1114.72 mo
2676.18 1080.84 li
2638.75 1085.96 li
2639.81 1096.18 2641.71 1105.86 2644.35 1114.72 cv
cp
2638.57 1084.1 mo
2678.22 1078.67 li
2679.25 1077.57 li
2679.79 1073.37 li
2677.23 1073.37 2673.12 1073.25 2670.38 1072.54 cv
2666.16 1071.45 2662.71 1070.04 2663.81 1063.77 cv
2664.03 1062.53 2664.21 1061.28 2664.39 1060.03 cv
2638.24 1055.31 li
2637.96 1059.34 2637.82 1063.46 2637.82 1067.63 cv
2637.82 1073.24 2638.08 1078.74 2638.57 1084.1 cv
cp
2686.73 1076.7 mo
2687.36 1077.41 li
2691.78 1076.81 li
2691.38 1074.08 li
2690.14 1075.08 2688.29 1076.37 2686.73 1076.7 cv
cp
2638.38 1053.43 mo
2664.64 1058.17 li
2665.2 1053.82 2665.56 1049.84 2666 1047.64 cv
2666.31 1046.13 2667.77 1042.83 2669.39 1040.1 cv
2642.59 1027.02 li
2640.54 1035.29 2639.11 1044.15 2638.38 1053.43 cv
cp
2676.17 1054.53 mo
2672.91 1044.89 li
2672.86 1045.22 2672.8 1045.56 2672.74 1045.91 cv
2671.48 1053.75 2670.55 1058.44 2673.68 1056.72 cv
2674.39 1056.33 2675.24 1055.56 2676.17 1054.53 cv
cp
2643.06 1025.16 mo
2670.4 1038.5 li
2670.49 1038.39 2670.56 1038.27 2670.64 1038.16 cv
2655.76 994.034 li
2650.48 1002.76 2646.14 1013.32 2643.06 1025.16 cv
cp
2657.04 991.974 mo
2672.05 1036.48 li
2672.8 1035.78 2673.45 1035.58 2673.83 1036.2 cv
2674.85 1037.82 2674.62 1038.13 2673.99 1040.26 cv
2682.58 1044.45 li
2683.51 1042.52 2684.28 1040.55 2684.8 1038.71 cv
2685.12 1037.58 2685.54 1035.99 2686.05 1034.08 cv
2667.24 979.409 li
2663.58 982.907 2660.16 987.129 2657.04 991.974 cv
cp
2668.75 978.019 mo
2686.9 1030.78 li
2687.6 1028.01 2688.38 1024.85 2689.15 1021.52 cv
2688.22 968.29 li
2681.28 969.355 2674.71 972.738 2668.75 978.019 cv
cp
2681.75 1046.13 mo
2674.04 1042.37 li
2677.56 1052.81 li
2678.98 1050.94 2680.45 1048.6 2681.75 1046.13 cv
cp
2689.86 1061.75 mo
2689.7 1052.94 li
2688.54 1054.87 2687.81 1055.98 2687.81 1055.98 cv
2685.18 1060.48 li
2685.18 1060.48 2687.39 1061.14 2689.86 1061.75 cv
cp
2706.02 1055.89 mo
2706 1055.5 li
2705.68 1055.73 li
2706.02 1055.89 li
cp
2693.43 1049.74 mo
2703.81 1054.81 li
2705.86 1053.25 li
2703.84 1019.31 li
2701.74 1029.76 2696.61 1040.54 2692.72 1047.68 cv
2693.43 1049.74 li
cp
2702.13 1056.08 mo
2694.29 1052.26 li
2696.96 1060.01 li
2702.13 1056.08 li
cp
2691.91 1051.09 mo
2691.54 1050.91 li
2691.74 1062.19 li
2692.39 1062.33 2693.02 1062.46 2693.6 1062.55 cv
2695.38 1061.2 li
2691.91 1051.09 li
cp
2693.91 1078.41 mo
2695.05 1086.23 li
2703.31 1095.7 li
2706.61 1083.42 li
2705.41 1078.1 li
2704.15 1078.88 2702.94 1079.13 2702.03 1077.56 cv
2701.89 1077.32 li
2693.91 1078.41 li
cp
2688.84 1079.1 mo
2690.06 1080.51 li
2691.17 1078.79 li
2688.84 1079.1 li
cp
2681.17 1078.26 mo
2685.14 1077.72 li
2683.47 1075.81 li
2681.17 1078.26 li
cp
2708.48 1076.41 mo
2707.45 1076.56 li
2707.06 1076.87 li
2707.65 1079.52 li
2708.48 1076.41 li
cp
2686.61 1079.41 mo
2680.8 1080.21 li
2678.47 1098.49 li
2689 1082.15 li
2686.61 1079.41 li
cp
2681.43 1075.25 mo
2682.23 1074.39 li
2681.63 1073.7 li
2681.43 1075.25 li
cp
2691.34 1081.98 mo
2692.77 1083.62 li
2692.31 1080.47 li
2691.34 1081.98 li
cp
2704.8 1097.41 mo
2711.47 1105.04 li
2707.49 1087.37 li
2704.8 1097.41 li
cp
2702.73 1097.88 mo
2695.55 1089.65 li
2698.86 1112.34 li
2702.73 1097.88 li
cp
2713.67 947.927 mo
2719.19 950.384 2724.46 953.852 2729.4 958.203 cv
2730.06 944.126 2723.72 941.817 2718.91 944.363 cv
2717.24 945.246 2715.42 946.378 2713.67 947.927 cv
cp
2864.48 1042.99 mo
2864.17 1044.62 2863.82 1046.2 2863.44 1047.76 cv
2862.63 1053.13 2860.31 1062.23 2853.54 1070.18 cv
2849.09 1076.37 2843.7 1080.63 2837.81 1082.22 cv
2842.6 1084.42 2866.45 1095.18 2874.31 1094.87 cv
2876.34 1094.8 2877.14 1055.25 2877.3 1041.63 cv
2864.48 1042.99 li
cp
2934.89 976.949 mo
2934.89 976.949 2940.53 977.73 2948.05 988.854 cv
2948.05 988.854 2934.89 990.263 2931.13 1004.52 cv
2934.89 976.949 li
cp
2729.12 677.548 mo
2718.18 689.454 2702.91 719.271 2699.79 793.581 cv
2695.29 900.962 2701.54 905.338 2716.64 912.578 cv
2716.69 911.872 2716.72 911.198 2716.76 910.565 cv
2717.07 904.301 2719.74 875.948 2719.74 875.948 cv
2721.92 864.043 li
2721.92 864.043 2709.39 864.982 2712.21 854.015 cv
2715.03 843.05 2718.71 830.438 2718.87 825.741 cv
2719.03 821.04 2723.42 824.016 2724.5 825.114 cv
2725.61 826.209 2725.61 806.16 2725.61 806.16 cv
2729.12 677.548 li
cp
2716.24 916.54 mo
2715.61 916.234 li
2698.52 908.058 2691.39 904.646 2696.05 793.433 cv
2696.75 776.781 2698.08 762.307 2699.86 749.714 cv
2683.88 810.227 2675.83 884.272 2714.33 924.768 cv
2715.32 922.027 2715.9 919.182 2716.24 916.54 cv
cp
2723.28 679.201 mo
2724.78 677.185 2726.26 675.469 2727.66 674.018 cv
2727.08 673.878 2726.38 673.662 2725.65 673.316 cv
2724.89 675.163 2724.1 677.138 2723.28 679.201 cv
cp
2879.56 1014.54 mo
2887.15 960.891 li
2887.15 960.891 2891.22 966.841 2893.1 981.254 cv
2894.98 995.666 2893.69 1017.17 2893.69 1017.17 cv
2893.69 1017.17 2884.31 1012.8 2882.43 1014.52 cv
2879.56 1014.54 li
cp
2745.73 771.618 mo
2745.73 771.618 2755.6 801.538 2769.39 829.109 cv
2783.17 856.676 2787.88 873.282 2792.57 875.162 cv
2797.27 877.043 2800.13 876.456 2800.13 876.456 cv
2801.23 879.979 li
2801.23 879.979 2800.6 886.013 2797.78 886.168 cv
2794.97 886.326 2793.12 887.067 2792.42 890.984 cv
2791.71 894.903 2789.6 901.013 2789.6 901.013 cv
2742.84 887.774 li
2745.03 870.073 li
2745.03 870.073 2756.78 870.387 2755.68 865.217 cv
2754.59 860.045 2748.43 858.441 2748.2 857.581 cv
2747.96 856.716 2745.62 853.114 2743.97 850.139 cv
2745.73 771.618 li
cp
2800.64 735.039 mo
2800.64 735.039 2814.11 779.215 2814.11 802.399 cv
2814.11 825.583 2824.3 850.805 2827.74 852.371 cv
2831.19 853.936 2823.36 860.203 2817.09 864.277 cv
2828.29 859.342 li
2831.58 868.74 li
2831.58 868.74 2836.44 865.451 2840.67 870.462 cv
2844.89 875.477 2848.97 879.863 2851.95 887.227 cv
2854.92 894.59 2858.06 898.505 2855.7 902.889 cv
2853.36 907.275 2848.18 911.35 2848.18 911.35 cv
2847.8 915.658 li
2868.31 920.982 li
2868.31 920.982 2878.5 906.729 2867.84 875.396 cv
2857.19 844.069 2857.04 842.97 2862.04 819.16 cv
2867.06 795.35 2885.71 733.472 2884.77 704.964 cv
2862.55 721.369 2827.21 731.595 2800.64 735.039 cv
cp
2660.99 628.595 mo
2660.99 628.595 2664.82 621.156 2677.04 614.733 cv
2689.27 608.311 2704.61 597.029 2723.42 583.248 cv
2742.21 569.461 2756.47 551.447 2766.49 542.359 cv
2776.51 533.274 2803.46 511.036 2803.46 511.036 cv
2803.46 511.036 2795.59 521.76 2807.19 545.882 cv
2818.79 570.005 2840.12 552.698 2848.58 602.198 cv
2848.58 602.198 2834.32 617.396 2830.88 624.913 cv
2830.88 624.913 2794.53 625.227 2786.39 628.987 cv
2778.24 632.748 2781.37 634.002 2771.66 632.748 cv
2761.95 631.495 2752.86 629.928 2752.86 629.928 cv
2752.86 629.928 2759.36 624.366 2749.18 623.739 cv
2739 623.112 2736.96 622.485 2733.51 625.147 cv
2730.08 627.813 2723.02 629.535 2720.05 628.908 cv
2717.07 628.282 2715.5 623.426 2714.88 616.376 cv
2714.25 609.327 2703.6 603.69 2698.58 608.545 cv
2693.57 613.401 2697.96 615.75 2692.79 616.221 cv
2687.62 616.689 2681.66 619.51 2684.64 621.859 cv
2687.62 624.211 2690.91 624.679 2692.48 624.679 cv
2694.05 624.679 2699.21 627.5 2695.3 628.908 cv
2691.38 630.321 2690.91 629.222 2683.54 630.788 cv
2676.18 632.356 2673.05 632.356 2670.7 632.824 cv
2668.36 633.296 2662.87 631.884 2662.87 631.884 cv
2660.99 628.595 li
cp
ef
3357.42 470.12 mo
3357.42 470.12 3347.93 471.789 3345.7 455.503 cv
3343.47 439.218 3345.81 421.707 3355.63 407.422 cv
3365.45 393.147 3386.31 376.53 3409.73 371.837 cv
3433.15 367.161 3454.79 374.068 3461.49 377.194 cv
3468.18 380.32 3465.56 382.045 3468.35 392.871 cv
3471.14 403.688 3471.59 400.672 3472.14 406.03 cv
3472.7 411.388 3474.04 407.146 3474.37 412.393 cv
3474.71 417.631 3472.92 422.426 3471.37 428.678 cv
3470.84 430.771 3470.46 431.795 3470.55 432.561 cv
3470.55 432.561 3463.97 439.688 3452.36 442.142 cv
3452.36 442.142 3465.27 443.276 3473.25 435.65 cv
3474.51 436.729 3468.69 443.626 3478.72 440.722 cv
3486.05 438.601 3492.59 438.057 3498.5 438.665 cv
3498.49 438.646 li
3498.49 438.646 3510.67 437.42 3517.58 438.979 cv
3524.5 440.546 3527.29 439.873 3527.29 439.873 cv
3527.29 439.873 3523.38 441.551 3518.59 441.883 cv
3516.99 441.994 3515.38 442.557 3513.93 443.267 cv
3518.92 445.839 3523.31 449.233 3527.22 452.977 cv
3527.23 452.977 li
3527.23 452.977 3533.04 455.882 3537.95 454.204 cv
3541.69 452.94 3540.83 456.896 3532.73 458.768 cv
3545.73 473.615 3552.99 489.918 3561.28 482.218 cv
3567.52 476.418 3564.84 470.175 3583.58 475.081 cv
3602.32 479.987 3611.7 471.061 3611.7 471.061 cv
3611.7 471.061 3598.75 482.218 3583.14 481.324 cv
3567.52 480.438 3601.55 499.066 3610.69 495.267 cv
3610.69 495.267 3590.61 505.309 3577.01 497.95 cv
3563.4 490.583 3562.95 503.52 3555.81 500.846 cv
3548.67 498.172 3545.77 501.962 3545.77 501.962 cv
3545.77 501.962 3560.82 513.452 3578.23 528.178 cv
3595.64 542.903 3608.57 558.518 3612.14 565.658 cv
3615.71 572.798 3609.69 587.747 3590.94 601.132 cv
3590.94 601.132 3613.15 589.641 3619.17 569.34 cv
3619.17 569.34 3634.34 571.349 3643.71 599.014 cv
3653.08 626.675 3666.01 667.948 3646.38 699.63 cv
3626.76 731.311 3573.21 786.64 3573.21 786.64 cv
3563.62 797.569 li
3558.15 812.406 li
3566.85 818.206 li
3567.69 818.887 li
3597.08 780.704 3636.82 756.122 3676.58 756.122 cv
3744.87 756.122 3787.39 828.608 3771.54 918.025 cv
3755.69 1007.44 3687.49 1079.93 3619.2 1079.93 cv
3578.56 1079.93 3547.06 1054.27 3531.54 1014.65 cv
3523.46 1016.03 3514.97 1017.51 3511.41 1019.78 cv
3504.94 1023.9 3497.52 1024.63 3497.52 1024.63 cv
3484.58 1024.07 li
3484.58 1024.07 3491.58 1025.08 3497.6 1025.24 cv
3497.6 1025.24 3499.31 1033.78 3491.83 1034.22 cv
3484.36 1034.67 3481.57 1034.67 3477.55 1032.11 cv
3473.54 1029.54 3472.65 1026.97 3464.84 1026.97 cv
3457.03 1026.97 3454.57 1024.52 3453.57 1020.06 cv
3452.56 1015.6 3453.64 1012.03 3453.64 1012.03 cv
3459.99 1014.42 li
3459.99 1014.42 3446.27 1009.18 3445.15 1004.49 cv
3443.53 998.083 li
3443.53 998.083 3429.25 968.855 3450.23 940.077 cv
3377.49 805.771 li
3373.59 819.269 li
3372.52 822.02 li
3403.15 851.479 3417.72 903.681 3407.17 963.181 cv
3390.88 1055.17 3320.71 1129.74 3250.45 1129.74 cv
3180.19 1129.74 3136.45 1055.17 3152.75 963.181 cv
3169.06 871.193 3239.22 796.621 3309.48 796.621 cv
3318.26 796.621 3326.63 797.785 3334.51 800 cv
3337.78 793.498 li
3350.83 775.538 li
3350.83 775.538 3352.5 766.727 3355.85 761.594 cv
3359.2 756.465 3355.96 738.058 3355.96 738.058 cv
3355.96 738.058 3347.71 728.912 3344.59 730.471 cv
3341.46 732.034 3337 736.274 3334.32 735.381 cv
3331.64 734.487 3313.58 734.264 3310.45 733.151 cv
3307.32 732.034 3291.04 729.582 3289.92 721.996 cv
3288.81 714.409 3302.42 710.616 3311.34 713.963 cv
3320.26 717.31 3329.86 718.873 3329.86 718.873 cv
3329.86 718.873 3331.42 714.409 3317.37 711.51 cv
3303.31 708.61 3289.48 701.47 3270.29 705.934 cv
3251.1 710.393 3253.56 743.414 3268.28 748.319 cv
3283.01 753.229 3292.6 746.314 3294.39 756.8 cv
3296.18 767.285 3285.24 767.731 3269.85 763.938 cv
3254.45 760.146 3245.64 750.441 3244.53 732.146 cv
3243.41 713.851 3245.42 709.834 3245.42 709.834 cv
3245.42 709.834 3236.71 706.492 3232.92 711.397 cv
3229.13 716.308 3231.58 715.638 3230.69 721.437 cv
3229.8 727.236 3227.79 730.136 3221.32 742.409 cv
3214.85 754.678 3205.92 760.48 3208.38 748.208 cv
3210.84 735.939 3210.84 741.739 3212.84 729.916 cv
3214.85 718.09 3215.29 713.627 3215.29 713.627 cv
3215.29 713.627 3208.72 707.047 3212.73 698.124 cv
3216.75 689.201 3214.52 687.638 3215.63 682.504 cv
3216.75 677.375 3224.78 674.252 3224.78 674.252 cv
3224.78 674.252 3228.57 662.65 3245.97 669.789 cv
3272.41 661.648 li
3272.41 661.648 3279.16 662.931 3281.95 669.177 cv
3281.95 669.177 3281.5 664.826 3275.14 659.138 cv
3275.14 659.138 3293.16 643.688 3299.74 633.983 cv
3306.32 624.28 3319.82 615.019 3329.86 606.989 cv
3339.89 598.957 3357.53 563.259 3365.56 547.643 cv
3373.59 532.028 3379.94 511.396 3379.94 511.396 cv
3379.94 511.396 3376.77 509.099 3376.54 504.977 cv
3376.32 500.846 3376.99 499.177 3376.99 499.177 cv
3376.99 499.177 3368.85 499.288 3370.18 493.376 cv
3371.52 487.465 3371.97 485.566 3371.97 485.566 cv
3371.97 485.566 3366.22 482.605 3365.67 479.821 cv
3365.11 477.036 3364.55 475.357 3364.55 475.357 cv
3364.55 475.357 3358.64 469.788 3359.76 465.767 cv
3357.42 470.12 li
cp
3472.94 814.445 mo
3472.94 814.445 3480.31 814.109 3483.21 809.089 cv
3484.32 847.239 li
3472.94 814.445 li
cp
3655.34 794.136 mo
3645.98 845.956 li
3660.91 890.04 li
3661.05 889.949 3661.2 889.856 3661.36 889.762 cv
3680.42 793.451 li
3677.07 792.962 3673.63 792.702 3670.09 792.702 cv
3665.16 792.702 3660.23 793.192 3655.34 794.136 cv
cp
3682.19 793.726 mo
3664.12 884.976 li
3700.55 799.752 li
3694.84 796.898 3688.71 794.853 3682.19 793.726 cv
cp
3702.13 800.569 mo
3665.05 887.338 li
3699.6 860.963 li
3720.12 814.435 li
3714.8 808.797 3708.78 804.121 3702.13 800.569 cv
cp
3721.44 815.86 mo
3702.53 858.719 li
3734.1 834.62 li
3730.57 827.618 3726.32 821.318 3721.44 815.86 cv
cp
3734.91 836.245 mo
3701.05 862.098 li
3688.01 891.657 li
3689.3 892.789 3690.47 894.046 3691.54 895.421 cv
3743.82 863.83 li
3741.92 853.827 3738.91 844.559 3734.91 836.245 cv
cp
3744.16 865.707 mo
3692.58 896.869 li
3695.41 901.065 3697.25 906.181 3697.92 911.872 cv
3746.02 896.182 li
3746.48 885.497 3745.82 875.277 3744.16 865.707 cv
cp
3686.58 890.486 mo
3698.11 864.342 li
3668.92 886.625 li
3673.47 885.537 3679 885.635 3684.64 889.153 cv
3685.31 889.567 3685.95 890.011 3686.58 890.486 cv
cp
3659.37 891.066 mo
3645.32 849.58 li
3640.26 877.615 li
3658.09 892.054 li
3658.09 892.054 3658.54 891.657 3659.37 891.066 cv
cp
3637.54 887.67 mo
3636.66 887.515 li
3636.74 887.101 li
3582.1 848.07 li
3627.77 889.845 li
3633.16 887.32 3637.4 887.658 3637.54 887.67 cv
cp
3628.56 868.146 mo
3602.9 822.464 li
3598.25 826.789 3593.78 831.516 3589.57 836.591 cv
3628.56 868.146 li
cp
3604.25 821.228 mo
3632.3 871.179 li
3638.68 876.341 li
3644.14 846.101 li
3629.64 803.3 li
3620.77 807.943 3612.23 814.002 3604.25 821.228 cv
cp
3631.25 802.475 mo
3644.79 842.477 li
3653.45 794.518 li
3645.92 796.149 3638.48 798.841 3631.25 802.475 cv
cp
3566.6 875.044 mo
3606.17 896.905 li
3619.97 895.425 li
3576.01 857.052 li
3572.66 862.318 3569.46 868.43 3566.6 875.044 cv
cp
3611.5 901.888 mo
3611.28 901.769 li
3556.1 907.975 li
3551.87 937.869 li
3610.37 906.805 li
3609.14 904.618 3610.93 902.478 3611.5 901.888 cv
cp
3603.09 897.241 mo
3565.9 876.693 li
3562.55 884.694 3559.72 893.365 3557.73 902.118 cv
3603.09 897.241 li
cp
3562.56 1003.14 mo
3605.2 958.646 li
3604.94 956.806 li
3552.32 974.06 li
3554.51 984.708 3557.97 994.492 3562.56 1003.14 cv
cp
3605.51 960.895 mo
3563.45 1004.79 li
3563.99 1005.75 3564.53 1006.7 3565.09 1007.64 cv
3596.39 1004.06 li
3596.02 999.549 3597.28 998.4 3598.13 997.968 cv
3599 997.539 3600.03 993.508 3604.28 989.269 cv
3608.51 985.028 3609.18 981.905 3609.18 981.236 cv
3609.18 980.565 3607.39 974.432 3606.28 966.402 cv
3605.51 960.895 li
cp
3620.84 1043.19 mo
3646.61 977.468 li
3647.42 958.502 li
3643.46 954.118 3640.8 949.054 3640.8 949.054 cv
3626.42 953.405 li
3626.42 953.405 3624.41 956.305 3621.73 961.215 cv
3619.05 966.121 3616.94 975.159 3616.71 984.528 cv
3616.49 993.897 3616.1 1006.56 3616.1 1006.56 cv
3616.1 1006.56 3617.1 1013.14 3612.86 1012.8 cv
3608.62 1012.47 3605.05 1008.68 3605.05 1008.68 cv
3605.05 1008.68 3600.72 1010.35 3598.24 1009.08 cv
3568.35 1012.63 li
3580.84 1030.46 3598.98 1041.74 3620.84 1043.19 cv
cp
3649.12 960.264 mo
3648.6 972.378 li
3652.34 962.854 li
3651.21 962.122 3650.13 961.236 3649.12 960.264 cv
cp
3664.43 964.446 mo
3693.91 1012.62 li
3701.11 1005.79 3707.83 997.989 3713.91 989.413 cv
3686.03 950.61 li
3679.18 959.061 3671.05 963.135 3664.43 964.446 cv
cp
3692.57 1013.86 mo
3662.53 964.749 li
3662.23 964.785 3661.94 964.817 3661.65 964.842 cv
3667.36 1032.09 li
3676.19 1027.33 3684.66 1021.17 3692.57 1013.86 cv
cp
3665.65 1033 mo
3659.87 964.929 li
3658.69 964.939 3657.61 964.85 3656.65 964.673 cv
3655.71 964.5 3654.8 964.18 3653.91 963.744 cv
3648.37 977.846 li
3645.71 1040.72 li
3652.48 1038.97 3659.15 1036.36 3665.65 1033 cv
cp
3643.91 1041.17 mo
3646.38 982.936 li
3622.71 1043.29 li
3623.69 1043.33 3624.68 1043.35 3625.68 1043.35 cv
3631.77 1043.35 3637.88 1042.59 3643.91 1041.17 cv
cp
3687.16 949.145 mo
3714.99 987.875 li
3721.6 978.3 3727.39 967.789 3732.14 956.594 cv
3694.67 935.218 li
3694.11 936.699 3693.49 938.189 3692.78 939.685 cv
3691.1 943.283 3689.2 946.421 3687.16 949.145 cv
cp
3696.21 930.604 mo
3741.97 926.091 li
3742.57 923.421 3743.13 920.737 3743.6 918.025 cv
3744.8 911.238 3745.57 904.582 3745.92 898.087 cv
3698.1 913.688 li
3698.48 918.965 3697.89 924.688 3696.21 930.604 cv
cp
3741.56 927.916 mo
3695.64 932.447 li
3695.53 932.805 3695.41 933.161 3695.29 933.519 cv
3732.83 954.939 li
3736.4 946.295 3739.34 937.249 3741.56 927.916 cv
cp
3289.85 835.33 mo
3284.84 899.265 li
3295.39 878.07 3307.01 854.843 3316.67 835.571 cv
3312.22 834.707 3307.6 834.253 3302.81 834.253 cv
3298.48 834.253 3294.16 834.62 3289.85 835.33 cv
cp
3292.8 923.154 mo
3322.1 891.542 li
3339.3 844.357 li
3337.88 843.485 3336.42 842.664 3334.93 841.896 cv
3292.8 923.154 li
cp
3320.52 895.854 mo
3289.73 929.087 li
3285.02 938.175 li
3297.11 926.306 3307.46 930.683 3307.77 930.813 cv
3307.78 930.802 li
3320.52 895.854 li
cp
3265.76 937.805 mo
3259.18 932.434 li
3258.48 952.769 li
3260.34 948.892 3262.82 943.799 3265.76 937.805 cv
cp
3262.29 970.901 mo
3244.82 1012.37 li
3259.66 1001.26 li
3260.72 980.371 li
3261.6 980.418 li
3261.47 977.795 3261.59 974.59 3262.29 970.901 cv
cp
3262.25 985.307 mo
3261.51 999.874 li
3267.06 995.713 li
3265.58 993.587 3264.27 991.152 3263.15 988.375 cv
3263.15 988.375 3262.68 987.298 3262.25 985.307 cv
cp
3288.38 1007.48 mo
3293.21 1022.35 li
3295.82 1006.99 li
3293.34 1007.42 3290.85 1007.6 3288.38 1007.48 cv
cp
3297.69 1006.61 mo
3294.39 1026.01 li
3310.07 1074.41 li
3317.52 1069.37 3324.65 1063.37 3331.33 1056.55 cv
3300.67 1005.79 li
3299.68 1006.1 3298.68 1006.38 3297.69 1006.61 cv
cp
3308.53 1075.43 mo
3293.74 1029.79 li
3283.92 1087.56 li
3292.36 1084.72 3300.62 1080.62 3308.53 1075.43 cv
cp
3282.02 1088.18 mo
3292.56 1026.14 li
3286.46 1007.33 li
3280.96 1006.71 3275.69 1004.57 3271.28 1000.54 cv
3260.1 1027.71 li
3258.97 1050.3 3257.68 1075.89 3256.89 1092.11 cv
3257.12 1092.11 li
3265.47 1092.11 3273.81 1090.74 3282.02 1088.18 cv
3282.02 1088.18 li
cp
3255.11 1092.08 mo
3255.85 1077.04 3257 1053.95 3258.07 1032.65 cv
3235.04 1088.66 li
3241.33 1090.72 3248.04 1091.89 3255.11 1092.08 cv
cp
3233.35 1088.09 mo
3258.34 1027.32 li
3259.54 1003.57 li
3243.45 1015.62 li
3216.61 1079.35 li
3221.77 1083.01 3227.35 1085.96 3233.35 1088.09 cv
cp
3215.14 1078.26 mo
3240.63 1017.73 li
3193.45 1053.06 li
3199.2 1063.24 3206.51 1071.79 3215.14 1078.26 cv
cp
3192.58 1051.49 mo
3242 1014.48 li
3261.18 968.935 li
3255.73 968.253 li
3251.99 969.413 3248.03 970.663 3243.94 971.975 cv
3184.63 1032.48 li
3186.74 1039.28 3189.41 1045.64 3192.58 1051.49 cv
cp
3184.05 1030.53 mo
3240.3 973.146 li
3218.52 980.191 3193.86 988.617 3178.87 993.793 cv
3178.99 1006.94 3180.78 1019.3 3184.05 1030.53 cv
cp
3178.86 991.913 mo
3194.67 986.459 3220.7 977.568 3242.99 970.411 cv
3246.26 967.068 li
3182.28 959.071 li
3182 960.437 3181.74 961.806 3181.5 963.181 cv
3179.74 973.059 3178.89 982.673 3178.86 991.913 cv
cp
3182.63 957.317 mo
3247.83 965.469 li
3255.91 957.227 li
3192.83 924.577 li
3188.49 934.983 3185.04 945.96 3182.63 957.317 cv
cp
3193.52 922.935 mo
3257.03 955.801 li
3257.52 954.773 li
3256.62 954.745 li
3257.45 931.024 li
3210.17 892.453 li
3203.79 901.833 3198.18 912.063 3193.52 922.935 cv
cp
3211.17 890.98 mo
3257.53 928.792 li
3258.04 914.25 li
3228.88 869.536 li
3222.53 875.991 3216.58 883.178 3211.17 890.98 cv
cp
3230.17 868.246 mo
3258.14 911.156 li
3260.41 845.564 li
3249.73 851.27 3239.53 858.968 3230.17 868.246 cv
cp
3262.23 844.624 mo
3259.83 913.749 li
3269.96 929.282 li
3273.79 921.52 3278.13 912.763 3282.72 903.53 cv
3288.03 835.651 li
3279.27 837.293 3270.61 840.344 3262.23 844.624 cv
cp
3269.05 931.137 mo
3259.72 916.843 li
3259.26 930.204 li
3266.57 936.166 li
3269.05 931.137 li
cp
3254.76 960.945 mo
3250.05 965.746 li
3255.56 966.435 li
3257.25 965.912 3258.89 965.411 3260.48 964.929 cv
3257.62 964.713 3254.06 963.87 3254.76 960.945 cv
cp
3248.48 967.346 mo
3246.62 969.252 li
3248.26 968.729 3249.87 968.217 3251.46 967.72 cv
3248.48 967.346 li
cp
3261.9 967.227 mo
3262.31 966.236 li
3261.52 966.478 3260.71 966.723 3259.89 966.975 cv
3261.9 967.227 li
cp
3268.12 997.14 mo
3261.39 1002.18 li
3260.38 1022.38 li
3269.9 999.192 li
3269.29 998.551 3268.7 997.867 3268.12 997.14 cv
cp
3302.39 1005.2 mo
3332.61 1055.21 li
3339.65 1047.85 3346.16 1039.59 3351.97 1030.59 cv
3311.94 999.729 li
3310.55 1000.98 3309.09 1002.05 3307.55 1002.88 cv
3305.89 1003.77 3304.15 1004.55 3302.39 1005.2 cv
cp
3313.25 998.486 mo
3352.93 1029.08 li
3358.04 1021 3362.6 1012.35 3366.48 1003.26 cv
3325.58 978.44 li
3322.59 985.461 3318.45 993.224 3313.25 998.486 cv
cp
3326.27 976.78 mo
3367.18 1001.61 li
3370.93 992.578 3374.01 983.123 3376.33 973.364 cv
3333.82 960.052 li
3332.61 961.61 3331.31 961.939 3331.31 961.939 cv
3331.31 961.939 3329.59 968.664 3326.27 976.78 cv
cp
3334.03 938.921 mo
3378.54 906.829 li
3376.7 897.353 3373.88 888.526 3370.18 880.523 cv
3340.01 905.95 li
3331.42 928.14 li
3331.42 928.14 3332.79 932.862 3334.03 938.921 cv
cp
3378.9 908.761 mo
3334.41 940.841 li
3334.99 943.902 3335.5 947.198 3335.77 950.337 cv
3335.88 951.626 3335.89 952.771 3335.84 953.795 cv
3381.03 937.289 li
3381.25 927.314 3380.52 917.755 3378.9 908.761 cv
cp
3380.99 939.205 mo
3335.6 955.775 li
3335.4 956.849 3335.11 957.742 3334.77 958.481 cv
3376.73 971.622 li
3377.36 968.833 3377.93 966.017 3378.44 963.181 cv
3379.89 954.987 3380.73 946.972 3380.99 939.205 cv
cp
3341.35 902.504 mo
3369.39 878.862 li
3366.1 872.058 3362.17 865.869 3357.65 860.423 cv
3341.35 902.504 li
cp
3547.89 849.663 mo
3550.41 844.926 3553.08 840.315 3555.9 835.842 cv
3550.39 832.203 li
3547.89 849.663 li
cp
3549.97 954.154 mo
3616.9 919.798 li
3616.9 919.798 3614.23 927.606 3618.02 931.176 cv
3606.42 937.199 li
3549.97 954.154 li
cp
3462.1 750.002 mo
3537.67 688.971 li
3533.53 698.26 3489.07 764.436 3489.07 767.311 cv
3462.1 750.002 li
cp
3464.44 960.317 mo
3471.25 968.128 li
3470.35 993.785 li
3460.83 985.658 3459.32 971.329 3464.44 960.317 cv
cp
3283.45 684.403 mo
3283.45 684.403 3314.46 667.895 3327.18 658.525 cv
3339.89 649.152 3359.98 633.983 3363.1 631.308 cv
3366.22 628.628 3374.14 616.247 3381.73 601.075 cv
3389.31 585.905 3403.03 567.945 3405.94 562.146 cv
3408.83 556.343 3416.19 544.074 3416.19 544.074 cv
3416.19 544.074 3419.24 552.863 3423.93 566.472 cv
3428.61 580.077 3450.38 580.221 3459.97 585.128 cv
3469.57 590.038 3477.55 615.242 3477.55 615.242 cv
3454.74 629.089 3398.17 702.295 3394.34 705.375 cv
3394.34 705.375 3402.26 711.286 3407.39 712.623 cv
3407.39 712.623 3394.5 713.351 3391.82 707.663 cv
3391.82 707.663 3389.26 715.803 3379.89 713.351 cv
3370.52 710.896 3361.15 709.333 3352.22 710.673 cv
3343.3 712.01 3336.16 706.658 3328.57 703.757 cv
3320.99 700.858 3291.65 686.69 3276.49 688.697 cv
3283.45 684.403 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.0.0
%%For: (USER) ()
%%Title: (102201 Collection silhouette of people use bicycle.eps)
%%CreationDate: 10/21/2022 9:09 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&kuo$!Z8R#Xp[e#?875p]7T@s#R>".#)]K2D2P(-S!b;GNP$$OH5JCntn\1,g&qdGjmsXn4qdXbYPfh,l1,A!J\p8@jHZl^H
%4ula/rd1e[;HoX4doqbr9O<t`r5['O:YII+r@>II7T"=#N<3CP]";UqXcpS5YIiQSpD:H4DQc9+>Pul2WNA)ijI9cK?)uH=ri<KS
%C$m%a1\7ZdQ^)`l[F4F_2[;4p8D';XiPVkrnrsQ5^Y/%hX<($`<bjCNe]?D,Ie2[]L!_?GQ2aR-GhG,kpBSCoT\Vd,1ki+(X&b#4
%C7R9U$Q2Y3,l^T]QaN[@Ie0WscoGmZ?Lm8eWeM[oCE'0bl16>S',ge9K`C\.nPqsSDoU^b_eth@_V]&ZX5uCgk2m<=8@=(EC3^t0
%Vr7YtB`bY8Efkn1X4HfTV`AG\bYgGM3A?fpO[!>GJ\N8-b@HVYQ#G+qQ$F"+o466aGdsk?g9#kLeXj.:H`^U6_ti.sX8Srd<LtJA
%O<R95(GF)qXkrB-p-?E)fiIA=XEXDB*LUt.^e1NH,9>GXIto)KR_=@)5`i8*3<T3BC;-.uq:Y:Ao1'2@B#5f4Vlc.ah/+ce`g!oF
%jJfVoqoh!HiFM!R0K71Zc(nC)GqHFoeB?.d@cT*#//T!%`i0r<BiFM@UXq\CT?J0',KQ5Q<?LthHUCJLC!GrsDQ;Ycra3\FLU@L8
%#(tJugl+h>/?Y&lI*u-S$?Nj@4?MC[Bsn&aeCS_J_sB;u"S#9RRY.I;h3_0elJK"'++mU$^6A^lZ4+LM`UC+Nn&<8uRUu7QbOBA7
%iS,p4Dc^!7\3=LV\ljqeetSYAk[s5)8fY2hdAJPCVj&8e?C'eUQKX(<n/L1!(X[)>&W\Osig[nUoN>>5[jru[o'qt[FBD\nLNLqT
%A6k>CWSc^_pjJIMj7il8YV5oD2s`'_<klPLn/He[.K&>b,<5=(ljLSu$(JeM%&LbfTs6'Ek2,V5R^"NiW\Ds<TGt=ohrqDPK!onr
%>eEC,@B#p:DgbT/Y8bjMlfrS@/j:=Vm%Q`.L-=NTL=1_(Sa1LYi:$u_@?9rS'f>b@p5%W$KFKCPi-/9cRd_9PYXeWB_c1_Ti9CY'
%B>as+5%7DP3aJJs*o.NT&N74Ih#J7p9@K;Om!*@#-2sPJ2AgEJ)s$%jF8[#(`,B`r>fRm#0)@8NUCT72O%1a^2bCi`F"!nUFH/m*
%nW&N/PYn64QR&0)6=8?BYh,9XG[,VYR(,@d5.\`/Fa+ol^Xo*^GeL&5fm<?!+<=pF5DmV$gTSrEj72gQmo]eEn/a!Ta#bun6p<fQ
%VKh]fV]B2/4:SA@Js26+5n]M'QQ0YhJb;lM')phH5UoM'8Q5S&poj\X\UGV!X$?0";/"GJ?i=t>57deE+7Jm/pXSUor63LQ=2TO\
%B44(j&-(0%H$j<tRtgt.cgnAj*r`3)8bEb\4O+MQomHFRr1s@%O(l=q(Fr-/JEdlaQfhFNk5Dr"=TZ6)Wc1D<Z@qE(4WiiWl0=T(
%'fr2q^.d@?r1=KHG]:X^5PAF#pFCL$C7<bOlLRXGm$:\<9T%g%>7?lMLY6fYAnC`k]&RT),\u>bnR6m40<mF\NeZNVr-EXuphK#h
%,fe:0CN8ETFQ.>ai=7(HP(hkiJ.hmb<m&InfHhOkmL:sECCu+6QG8[:cl\XhK_(04$PtiTKmAUGH1Cf_7`iNd1&4AmFlKqPINCKi
%IR\h2^+aA\]B)kZ-d4EN>N:fb24h/#CL_bEKnoVG4e+I&[gp@LVN-^=#>pIs_E#e`<I5^5hWl&P[5rMZJO9N7a+`j7(acW4N7sR1
%(;r6s;guCs(*5ACE&[jNb&@f0Wd/KB2!t2W4T1Q(U%)JSge7idKR?n1HlU!"J1M(q++NT__lCR!\p08$QIm>kn90%mhFF*omf9`B
%Psr%dMc1Og?ZA&0SbL:L\Vm4Q.$*[LL*Q8Lfsi@4>Nu:ZihNq+(VK5,-<G6i)Y72C]B@(ajIKQ'@B5"gn/U;15K'\_=mKh>'EN;K
%-6IrT*`.N3>Raao1AL@sCu!iHB<@Xo?/.cVJ#'ail\=Rr$B%FLH"D5+H/;]"7Mlmk+m@oPLBrai[%f61%]tNPQ6PJUm+#q_2^uL,
%*/Z`"-j$)$f`Xh:_n#Eu+[Cm4"Po0$.WgKRE@bC-3$>:GI"UnINJeKREC=_M7:V*(5rXFaot,I!J-g*ScYCOsZr<W6\K20^7q>P<
%Jr&fII)L;9H2q/OZJkmtWVB-)pP@7&I-_EUo'#*(LKf\8V"gU"J_%f2<X?$B.f<?Nd/bHKM`6<&K3b..%^RpBIJ@Eqf-@T>n)os@
%S6NY0mM`PGO)obp11c,gUig!*`NHLgUPCcr,MeY\&b$o>g;mFh=<`jn-qt]h%MctGVMMSkAHJr'/kEWXEVKh<\6V7AdLP2umZA?Y
%7)Z`[)Zk<hcrK\jo.2"jd'2<j#ijX=)](MN\G&*@T"^e8`T\+BJa^SdX#jPm15hmer!8NW%ob4VHj*h#mHFPd`EZ9f#cee?h"`,Y
%XC,<r\4CeD42%BL6*WW/`Gi?BbXt"nF*'U/hggF(OU9&c<75S(d3tNsb-DcK7h08tn.YH@2$I_3/l#Z!f^7ltLSR#W3D'VN#sLNp
%?p%eiX[5%2WSr"S[r)`V.F.g8q+%E2`E@#"H+8ItgBfh](0Y!Ib]8/2'bg,2B=ou\dg3&bXAU2`Bfst@4\(ocolu_['j]fBcC^;9
%oT=+hgm/9pIRJ3Y;8sFX$3,b/edFUYb]m\KBiQ;pV2'<l6V\Go**kq!]qVDT_dc&lmQBbeHHV)n:QbA+,K#:kbW6e\jS=@`XXK8%
%DJ=@d"a-9]]7nK5['#4RSjM?joANe@O/YIlF%6M_bu^*.Uf-HI?AXr?Agr$Uh8,s<J]K@oYXU6o...MCp^mF5TlP5eaRat*#Flm$
%>QQ5G6e2hM(AG#udLB6'gkaJF,=NPDQ9c'(&J^Ol'5;S4b*9g!/*H#_Tk$.j&`n!m:*(E#;CK1&c]('%](mRKLI+1T.+0rZ7&F(W
%7NT+#%\]5d3d9+LQ*VsVeBNq-`!H)c=]ZCtaR0c\Qk*FZ[T*EhJ1udK$JD+TUa/UBE'\t%L*@VF]qpV0N*P*mYfap5@o`A(OM0[X
%N2]c"cFsjNAk:=LbN#;t,Yd91oYrJN.(KQl3`6jGiiBruD[f'%b=YS57h%$X6lHpBQV[<_q@A'.G)tUjkuVbRc!Im.4UBpT5Oc:e
%f&5mOGWXRIj`soKBV3*5nBZSHfC/X(c-D`)q7,$>4'b#&n,Do#POj.WSQ9U0IF>.[QSj4R<L[N'ZT%Y\[s')>=8,nCTuX@aCnFK$
%@aM6PemS7Aiio-L^G>;%CNn.m[Jt(1eM_TbaTmb+s'k@qYIQ/FQHrR'h\gC0e*P'PbHq*`s8AMOQWj9lpu)5,\pX'=X4'3P)-He7
%cA7s\k"2m\!A0nk+7`-):3ANA3jo62Ir!8/YCA$0i@*k"jd-uW^A=t2RY/N36Dnt3f<7ZqO2I5m2qmse,;(l9Sb>@QH$\-"XY'1j
%qM2I[h/9,/rJL'ER7=sO=*X;F0_i]Y::J^?+'6pM[VQ9\[s'p9XWRL-lh=-hm_Rc%`ehRqnh*7aM]8&P%J6('[/0gUfrCsQRRt6k
%h_`O-/g5;d*9Y):jpB:^_cbtB0CQ<&+TCH]?e]5Z?VR6HC[I[">Z?6!^O<C8leX[<%pHl_ff_Mf+A-M:Y^+s^c&"TmL-l_`KWgC+
%XdPSaEjS`Z6PRGr7gEr&fk2\gJ"?(-D,(l>+U!OIR]=UrD]ZB&GGNPcqtO.YD=!M:2XkK=%-27=/MH3e_r[^^-qD1ddZccl8>H]D
%s2<uP$P0tBa!3=Mj6[A)H7FDmPI>tk9N#)uIJB&VpAQLJb.sNY:DT].rU)oM;4EiYiX]p#J2+@3?c-N_fkJPWl:*[UrlWA:#2Bas
%DuTt4/k4i:m`PPGL?kgNrG)YG-A.mOSBIDQ0)m)$Qpe\gEfHdlT@bcK?#9Jm$t7O<JgLb9?Y3dME!IK>])YX5pEMN-?!hs8h.uuM
%lasRHIiil0Ur/-r]3]jICsWeIH&%sRHbJSAkV3$2Z]+P24`#?9HEECX/$7(!$E0u.nS@UrA:S#_:7Uskr6am(n&bgiOr7")cM.:4
%ff?)oj,<n43hFF[%fO7ZqWC*BY6WTQS&'L7G9A1S'rBhK@IbAq)XW":Dm@uZm`Ee@IVtpOmd<qfn$b1m]Dd!u`IAm>k'B;jhH@=W
%4.Xr@h2L5Oh>c@Cs0!)i\NbP8/>2Ih"3Igoh6[*RHi,fFJ,c.8kZkk/R0u,V#gMgJlMnf9@>OF1CH_]A?02(b^]"H4rP*lGpH.cu
%s*MgH_T?T"03c]H2-^&]HZ*lu>A#"'r[fPmn*KDFeNPtj/]pt6rEJWJGp0rXh2gIIfT3ehSkS;50=UTBh]k:6QS$a"(V8Ggp9W3g
%Lh*dAg)k"&_f'D\nj@mG+bJ3`X*`FPD)&<[mib+*F8K1Cj1$s[mYQ2]hlrL=^V#s(]jN)\/Y!dEc))c15JLr,Xg5C^a]2P\SfF9:
%f<a-nKm>F;TQbr_`6i>eIM\DO[2lapkSI]H>814;9i8bD[F9!dp1h35*](31V'QmkT),('9h2eoA.;$VU31Y*#.4OjVuGN[%XP8B
%1bOoVC8PU@h7lJiqPW-T`]VHfKD%WqMaV.F[,&7%nDe-\.(!P#[6/<oNMt(mX0qc06+?QnfcRTZ?Me"fm0o+e"Ai[s[!CBjeb\[n
%ZOVtR(Tt[;Z$mL@,86q!r<Bst8cQ.H\A%i-T\SCf\UT)FUW6ihSbHa"eSk-[B[pFsr]Qnt]t)V[Zj2]o)OpQ()EQmM@e8ZAAq+U+
%K#nPhXhFG]EG_'rpM&[q?$.;Wd[<@_CDbPjX>hDT`H/tHem&*jlKC&fE]?iWq;g<U)eXe%6/Gs2<;>aP&PjP_l+Xf`A@)4&_=2VT
%dhuub>i3q%Q.5N.Xic@_^cssnBOB0;Nc]-0%,*SL.F!*;-I]&Y1m/HT*mLmkS96k)YhQH5,a]'f^U]7$T[u>A?+Pn0HLH%2Vh.K:
%KE!NFirHWgnW@@8jGc@P,MZr2TJsKke*JneFtX.%(S3XHW7_'DeN8IV]DjZZ+ud*=DTc+fbPscnp'/l0kPKj'rF`5Se_QQ:g[4_.
%>'j>0<L\En*M!-nhV^9E_0ia_X%SeG?Ihl__j/g,-Nm;U:C#;O=s1o$]X_%s\@A_>8>J,:;2YGI@K?)EF.b^X-D5"eO*T[(O@/sB
%)KM9^YMM;1J7W)o-oWD_3jRVO=cHmh/R1F4F+#]mj*-:b(3JC'P=s*V#g!#1l78c*\_QArfu-'Yk:Y#_cmdh4fqJ$uH[9XYe.>JD
%cuk!J?g>)SgM74N(0@F2e$4(Ch:#^>eDEFVm/FM6&sk]IT(F6-L4I$$+&.7^mEQ!ePqZMa&Jq7l4Dc);C't*$$5hC=r2mReBFdSq
%]m@1P>]JAHUsj,GG#)Xk!sftHCV%ZQ%AIRC^XF5D2h)"qICUtch;4d=R/L-_aiIS51(pS.OBMN%aM!4A!K?7m9!s:D#hP)]HJ3/)
%;s]"jD:GqD-m?,CHaTCd[ABI6`no3@%T4?13Hnt_%eK)oP.<?]C*=FsN@:f]Wdr\%!duLhrH`,4rV_0q66NsZNB9G(]66,[Xa^0*
%V"r3o,k0.)rDO\#Ps)TPp:F2-1qs#dn!?O*Eab`D_-T,KVE\tlNr$'07Rr-(?W&9XU-$WV[=B>3!Xq0c,u*_!g8OO]*i<#bh]%CW
%\<b:qX@A<C2n"3RS\Nn.#ct2#^H^p1<jd6$kEth:IA,hq`Z^!?.Q0=#4*&jkEYt>_\^h&H]Oj1%HQZ@[^Ta<Y8BOZt;bZNG2ES#J
%c[OR;n9:hh?bkB&hM1V,2qn5!Rl3kMY6#@5"<_!*ZI2Bkln8l>]+"di%?^QG9cqf@o6:&BSg3IV8;j)A;Do!KBbWa4?L-W@<!0^a
%_cH5pY59T!`a7i8\)/2uOB9?!\(Br<LZap(d.&M[^1O2'a[u6<dpo<SZ]j5(A=%kASUr!=^Q*ZFkBUe3(P;5Ae,MTP-"g<L1$R(M
%3sF.2s#Lk]j]\r?S\(eHB><`Z^Q,k2a):YJ*mfA*kEVO;%S_7=0of`=0=m$SG5\dVYS$Oj97G<sf=P]jT[i&%Xp:<)??tl6NK_pZ
%'1R]A-qM+XdtYFGEM<F'nNq)8H-r)/g6o<VIRa!M[798Wm-;t[XZp![?ei9mfhVQN![dY9W"O(7Q[9L0%i@*D?)N_!Gg1;bEWr<(
%2u8<.'%OS]6D7IrJ@da\o<,a%Vg:d%]"+kPFZJDR(67]/g[=TmUMG0*@2kn/=5@$t%QqLSanC*ZQr0F9.KoYab<%(HrrttVfDeIm
%4ZE:A^U;SI?,4JmO*E?N_PAq/T<(?!ri(2&C;##E184ZL1JOAuY+YMhes68'f>eIghJ-@P$XKlEG-8H'kgks`g$?+$D<-^AQXld6
%Lq7YH4]b"sBJLXrrNdgBO4pM+7\3k?`1oDO@paZ.:V/[o`#_)&fnFSPo).(ulDcM'"OMK(K"bBkf9ah+c)1qVlL,cVaHgEsSs4G#
%RQ#Tf(Uj%ha4IW/cg18\S"r615C*'<DWB-;Cp0pir6oSs4$-]8GeA4rkF[7TlVh/WlLio@`p36=VdhK`0@lFJrZ(pY2"gK<n&;;h
%5Ap,_n^Y;LFO6.7DSD3>A,c#8UXip\dDR1h'T][eI@lZeDVa<mjfc:s:\!s-5;$LGmR)BWd*AiOn'9nP/jIYY(YPec0fb!)n'1aS
%Du9+We9u^l-.=ujeX4)r+)[k*fZV;oO.L"Tf:D)LI!N!QIl3.F>\^OnGWF6>5@t>=?!2":^>n6hI%4@=qV_5rrb0HXZ<0X.GC'1c
%].%<.[Q#=O=BXGZFT5/6hOYc@n%;94<phQ1br;r9LUXUDfpU+\=5Wm6=-aY?VZQ>/:WkgYjut?`hg0<al.K55R8>+j=X"/"0KhX,
%5>7DEZh8G)`eV+claD*7kFWEc2gUOdIG-lhY@cY):RCB'$aYW/&#SBTaQ*&N#E9sU]cW:(p<e5(*;T:t:S9L-#$=ZN@3Zh[p8>4H
%>L,K+qb]Fu*h1%ZD1%Ia<aQ=Qm"dJ+0=Dqum,R\lH+`Y7rQG#'HOhJ>Q=n6ZY%Y+\nGVtNdY"=lb7i^@[i[8NZsOW0k4\4*qYmY2
%0S30>@5i^T(jQ5eHP8p,kE!4[B.N^W<]@+.[_'6*^Ah_]H?jq`4So%rf1dp%XZX)GNO.G*s-u5uqQ)mZ@*irq8gdEtk-sb@3a$8@
%lllA`*IiI`=DILN]&i\`.gqF#SprhjIC;A2]AjFaonE(?hd,V6fi[*&m[VNdHT/YlkP8t@@A\GB@;0k&op-#qd!=-_(-9FZ*Tq&3
%qq6@8GL]A/Q(N"m`a1cm\_"Fa>A*WHl%S5@s7*bdbtL?*]X9QaB,Y8Qq_K>#V1nU8#8[n/SEQS5k!/1l;eDmj0$LF][eJie]tX+c
%(Zas8f'<j=%^=BdE*uVR5E43kT"k51^HGZT-F2t%8saLD-U6S=pr[.!-\'i/1S*c#rM]m[Y@`=GoniOt`2C0Bpmn8Eoc*/f:Aq&R
%><HnT"#Y;f\)rjoouVu[&+up`X`"+2Zb)4noS]u.qOR$"g\$tqbMVTESXHJRlp:Mt4ZVAH;)`pTWb:@E)tiRa[B15YpR]t'Sak$K
%B>4$'rm?$m03@]losr]Ich4o^]/Z\arJ<J9rntWANV^Q[qZlda-YBs(0R%lC^A).797;)[GGDmXq>F1haj&:qp!o&NnbTS[ZhaH$
%oB)D9o7tdnp!!fT>(<e5hl^n"Y35K0akPG?mB^_@os`a=bOtU:mN5o,O)JC;qWAZcO7f][MECL%m?_&M]sjmulMGo=f'8%Hk+I/[
%OZ]Tbcb93^mqss'f>$dgq-G/u8Y:sl=.<i4j/3:N@hT71'4[5]DdSQ"00W(LB)4I$N[=#9]47735F-$'MJmQ3a8GO5P@Jh":-O\$
%\CJ5Np8I`Rqq0oebH8%7cd20eePE6:Z*fWg2T@ZKf(6/5SJNY`Y6Wgc`ni!sd)Yt-f[uOmqNnIXA!qZCmV4f6IOtXAO.Uk>45KP0
%QtC='[2g@DlJ3;La<)I`:UPE'N6c=n-fZP#kJrL;CjOkY2uDY0^>@ZfJ+W<dqsgNG:H-:cCaCUlCN#7$O)KJpOcR9RG(4-%h>#L%
%nPA92fQ_JDfc+iMC`SRd9:pWrBuWqT/fp&I-ftqWN,:]4^N&Sbik^W=c]8TT,^5l/]2@'b+5\J2IeeHQ_6_VeNQ!2blc,-)IceZH
%oUFj[b<,\"2r6CR*oH`P]=iKb3B-rr`r>h@_])*Qqe%i_#EKf_lZ^\Cb;;.*hEG;Y3IQ):j%]-XH#h@Dk,3.SHTpuXk!HAgFn>.^
%Mo2%McgFTbgiABE2rBT(hVS1c3Vn2Gmp"Q'r:]7<k0;BRh;a@g?8J4`FgUmPU+pY83g%%Z]+]7Tk/5-4pAC^[1\'+85FYc)HZV%5
%C?!P;M>&YEmn>R%G!9om.R$Or/A5akSBXa@\M_ca1NR?/2>d)J^AY$NlgB\C+)`_nlfPZW2n&EtD16m%nCF*&jQWemB8>f^p?fKV
%>K:N[?Z$=5*^'W`]_133IBp+b^7DX-SX[:lbmu.f=73en>Se;=q<DL+@e/R"k3h<ee'k_Hc9btf#7JktVJ[umG,JpgV`1O/g=h1Y
%LS+I'WQ3n_qGWlCUV3Y9:D_n^II5UX9sl(U_DG3K42/4QF6WSomDd)"n_<cddeDK,TB&MOT4Bla[pMgNS%%9t>G#hlSFZ4D;>\gt
%gOnp\&(=HU#G7klhu,<YpW;(5o[;?%J,8u3V9\_&os_X!k#hZGoXAu#Ql_4"7'?HYaY2Z^GLDc,kBH@=F?eP`m]X"dD!^l9n%AP)
%RGHQpRP!DWhDom<1Nr?SBP-DhKBX742`!ZSs8;b`R:i)hm`]kE0q8"8n]gpS;<-csbh9i0UbTRP@D-(sFukUQLSpN:nSERC9k/P;
%hMk"rg$:#FcI8!&m+BeRhX&J0QTMO&DnMHC4F?XEG%5EOc+\]+o^f/W@kmk/oCG^43B;RBa^1#M,nGpr9(I).3M(%//A4Vu?=ZKF
%+qpH8X-7<SNA8bWB$L:VWC+#G9\.JSY"R$"=mVT@-_&lTc0t&q1qeBS3do@\m\J/E5JKkKhJPGNpKCcRrOt1=/"9_r3lu2%oefr)
%^:qlNh87Y-;gID#p2034k@8Eg:e*43*@stKp[>YLr9:iXZ2F"V)hYfrmRBG0B/f\+o[3%l;8.$[`T+qVS&O^HNN$B2jrc+ehmr.@
%mFr!ZXZ'UZfTh0D/c4hpeebsIRI&SpjgthCqdXML3OQom)37!HHgA*^Udo=+f=gSJHXJbt)fPYf-VmM9Zc.XR^OL4s\Sj]ZoW9+j
%Ga+M.le,m\0X6%0^0!S3=+5#BOIP_-h3kn2IeR;hDIon%jQkdb\Tb0ne%,1QqafGUHfJ8,HT,;Z]Q/41kuRiPX//U-GPBrV]lePG
%9]"Pt-HD$kNu#L<mqj-6Y23sjO&Peen%\mKJ*,_%`VU0`mnMVfhE9T,s(2)IZhpXrMsS9Na3T&BmP!sTHLUjcmF;GKhQI"b*h9Z7
%-Q^RW/06s%n@\M[iPt-9k/6?(SY_+Tdq8DhG2r,ZUNr3^HF,PTZi4Y,pulh6rqY$jI+J5BSmU?$G;0'Zi6D9![p.+pKj4;3^+GR&
%cAi^4SL2%(cO5fS(J]=hdk]0Wj8&(YEB[ZTYdcP-4C-b"H+^h4j6bOVP1t6<?[B<2BInRXF#^pVqK74%H$815H[3HbSm$UAYs,qX
%^4#osjjoo>rKY"$LZQ\Mf$WfKSW,r8EID`iro7J-It#$koc2FCrcE4*rUKXHWSWi7I(&f\BsW$UjR(psK."^K3sVg1?9NY>3^5Lp
%D>!RWh8Ro_jl>4HWO)6mdg*#Fl).ah%R3*>gho9"2S&@Os6Ta^ceHc6pFM#C[KgT3^@uO4rg+>@Hturqk&7FDDL_Gi5%X$6lOV\W
%MsIQQ\'t"g$[:p_Vqo2Jo6ItGiVAsPr;#sEHQSS4)XAnt2jQWTl,JL`ZTB,`Q]H$$VMEFdc..RkcSiNH4qCuL5OG)Vn13>"(E;Js
%9pt._rj85B3B=^>]R6)pF"b$$m),11cX/omRVbd3hKh<]EbF_0`mj7RqUijQ=8pafH`o?j-9#6O%/+mOhqm01J%b@1g"bof>E<+'
%m_-2YZsA'nDmn7.+09DL:Fq!B1UXH@nss^]&,'AFH1,[3^$4oK=FP%XI/<P[@s[_6gOl9oh07=TDn(!aT3h!!qt)')n*A6lrqj7D
%[>43Xh3mTC5@0pbqdB-p[m*!u%R,Bpqn2OYj4+%`qT$REmIq\em[QK9<<(I8OD-o7I6P.3l1Kt:[85U[*VVR4g@<K.p%S?Ug[=e$
%09+SeQbTUs)Y[h;mG[]hWI4C*lf*a]qYL$*@(1DkFm!9+iM5d!c1d8W\!gs1RkJsQ^>.N!g"tK?h!*YOH+E75&%6&<h6"EeYhOT7
%g>'#Y%_h>DfM-[=a4h]5>5?XCBPlUU^X26shL2r,4o)h(^[^IRg&BCuU[0*rZdj\fXbe\98,[?(0RIe[pMb3IGl+^deEaO6O&L8W
%04)tQBV.CoK4+Q#DXOZVg\NmXr9a,ap&7fKdFgV8?CH(.rGSUYcFr<U^@Ud:[#W2`*^;W5FDpL?piF%;o]4S6H0]#:QMGd24.G$o
%hJnN@pZ[n.:%rVi_7e;Sfbcs0h"pU7Zo_QC.are>?QU!>hlJ`VHM+Ael9/m0g?sC"m2l#"DXNkkkJ9us9o!^`RqciA/MXh6%9Fn&
%LPCX9qMrKnSI:%t(kfrCjrSnV[H>S;Ll/c%%SE@&71:H0j!hun?$bf6>\YtgbEM1#^G4K!\Kss>@*nmsX0^LEmC05RpM;_eBW[nL
%#49l7C]8oSU$?eU0Pg!Mo%-rkd.ZTuJA'h<UO@1PV;F=A`KFU$4)GH;J)4mT\(NcSX1ic5o:=0-$Vn3o]Y;PnV3.;5$d$&[V/iP[
%$L>WGL:.sKB^\REC/55eQnQgt[e%gp9X8le9\%]hBQK<D?'U69H?H2F=4?#5UpjfYJcbePX10Q/oF"R,R7mPQ?Wb8Ekqs@D^QEDO
%Qu8K+hu4`:`pgm7IaFEIi)>*Da/\J):NuTW#&d*i9IjebkN:ia#0i?a:2=`bYm%o.]4d(/4o%I,?o4kS6N<D2]b[f#SB<4#d2%(K
%oPX,neU&aSn>nk@rTdVY\asn?[AVHf['K%M6fCApeWVn=3A8[HYV'7nfb]E5[d1]^Pm?QW/Nin@O!=Ho)c$B1mrV*1J+g[A.p]It
%3mH]Ws)<JPIg"$W5Fa;h-[-rOp?'!s*VgJ3X#n$5nJL06Dc)(@,rt,M6t^EZ=7Lq+*kef1Ob]M6BBljMcd0T$TBgQiXI]=]+1KQe
%h+muJ@1AoPC$LjNl>9jKehj[+B^mf]ZUSBHXQFoX8.+=G.!O8kI-GDf01<':=o/:A]kQ+efXO_@7cHg\O=%V3,W@TQjc(h5dMdJ/
%=Xq,U]MTMQeopk*g;m/pQS7oabOerln>6'EA_o2MI+C0Va]qQkN^(CU^6'-WYEd,L*/R%tZ@V`reB68tas%XVP*T/BB"Ts3NSJ'1
%cXsJ3ldAI1o7hI';3N?[Y*7O2fgT4NBecnb!FfcK7cmEi;F\q>.oR]KY]U#4/2N82F',""]#[f,Q&RW@Rn(Vq;3]MIB6,HHb)!dM
%'02X9MM<j>5XguF\,t"1Ulgq=oTEK-Bqg.#CsfJm#AMF%U0qHL:1.iN!(s\3jZ@1>?F$/kGJ7Kjk4Mki)l:Ac>h\\=]9T8+&;YY#
%Xjj2giOV]:_e1sj,-9I_N?n$LU<2Np$;?&h/S2]"'Q>"C5c.0eRFfP=jP7VI7Dg'IWKT&I]Ft0RV)b"J'X#Af[VWIZnBthNbUsF\
%[>I4E"qd]aUSF>nmKF\DZGL/iY)no0QZ34FbOB>1@=;7:>Qd?.BbC9hAHD"]qZ<PSJn9\cN]ro0ND`e5]&[*#_$N.g?sh!!5M4?j
%TT+%-">7>S^V!Fd%"c0u<*kM7(W;I#.]<VZU^cMV=IBJYHQ77p)m2_B+XI=`_i^e*%YBC0n2HI3#!0oC]0`A+S4X5F1m.1`/Njq'
%.p[[P+rt_*$A8JIYb.G4.B@K0B3_#/,gn.3=ipp."X2i%);<1N*)MM/#]kMaU;[JNlFk8m^dsZJOegr5;oh.mB.Mh-Jr[R--Wl4U
%cD?2kOc,@aH4ms!!QdSd5a65p6:$-!C"b84*JGg@^2aT%W/MC)Q,rWsenZ6RQcF)LV)(HGA5WdHj&U\Hj[k#0!raIlJBLnfKs7r"
%]slFjOSbInN`)FV$7Vn[h.t(Z)7KTSa9DML\Q;4;+MZ&B\O+TL&9%qkELa$?fEfkVUfDA984\_7L"loY<q&=J]Jb$cSRf8X2aqsj
%87*f65ZT.s4Mbg3Ur`uJ.Kn'hACr(+1U:K#6RF>$UOqLr93R%D'L3L1O^em6nL8Zrm>B^P7PK@7$[`;6%Emj60F/SmBG?hC[;7Q?
%-&(9YCd$B)^%F.=?slk56,kDX>NAu0^a9%IW/[l?'aj'U+rd`fd1kIPY(D4H`=)feCC9HA]puS$-%V+pjPkK.,GqmpA)uQ[_D5ja
%"V)6X)mjq%PgZ!.G$A+#@('mL5Y'RjD&(c(?t:d32)e:6W8'fbh1D=9Y]QN=\WAM/H!@V/:e%)CUCMCu=rFd@=a3oeN9j&PM4>,*
%R@L?dOIW-NXgWgHn'J8R"d3.p5m]2We3Tk&X0><4'T<V&KinP^$UKQ:c/jEO]HI$lE<-4:AV"l63F7ps<uMbZqj!@"TT(t9W"AAG
%E#"r]kc_3>*3*gXY.r9lQ7.)(mC!(:\b048;5T=cSNO""b#[Vu)OWuOAT1SP5V(3DVQ>n^gf*0?6Cj'FP5sA@a<UhL>[(.E8K;u_
%N.R6D%JP560I+m*&2H#TY#"b_X!E<u3Ai%`i-H/?=0=qo#`@an=G*+IS+8\`U^=Lf&!ofsf9J*k/hF[aLhKePN%<E-Os:7:)Rb_`
%8&qndE@h@m*Q0XR//'2_gZY#f#LrhL+qm;n$&p"hNtW.(LoZVg508)C.F19"dGuFFTZMf)kn:g3**VG<KH[+ccp`M\1s)RH"iGeB
%N[9K,N\U]$i2UkB+h1uL&0p0KRBQf;\C,+8*G)fpi)MCO2U+gq@Z/Ur4HhseHr<L:Jal"$;k[7I>R!;%!mC+S;"GkGMC$>H"1"#?
%F(2M6$kcak9pV%lk_=^IH#6(`Z*c^R.qh^fX<XYq*u3^\n;1E<ECPIb6B6RR=WomhOd!jT:(U`BM)>hs4JWq?/_@di5>\j\5kf:]
%,ZgU"]KF&7**Pl<(iBhZ&K)i&?&4;nQ/qL+2/Z`tBIY/jQn[sIa5a\8VBjJ>%hA>&L\1\n12JCHlc=*L&s+JL:pP2,L/u.fK\.T8
%!+_M"6BLi:a9l@7l!-)I>_A-'grm[Tic6.9A1$UY5,eMpM)>^3j)tP>0St"I2,S0VCB7S0o>tqhQm>i=p^eBp=)osNIg.)#jf8ep
%UX3%-5tENSj@'McPH;7C-7dLpRgO_D8e.1'+*T#/PK3>J6m5+'4NC_nNPM#-Ki/81(V7PMMV&)G'e'tNBL>f%e\Rb1^7bNQ!`i@a
%QHU59`C43Fm_Pt-*^X)KG]FR-%,bmk!HQP`j_Vt[b3!c]LdE@IdFH)h6gn8Jo0eh(C02!8.[N@l+:+H)Ius&E#X9H3R3s*[F?g\j
%^pm4RqD(bXV%>7.Q!EFFLP]VsgMatk,Xl:\EQ`kR97Xr]$AC.p/.0d_Ch\MG;rZpA68F:NB#Z/@!KML8inq`27067s+QuaS*2e&n
%8u._r;-57A\L2Qo28Kk=EZJ[X=_Isp!/q(7njn3_%3&kE$j\T;K!'oC<A>38s-*]AU*=YF2PDg/$SLeY&o8dD`F=3e7`&BjX->2m
%$aMS0S1J$WSh*W=$OAQ\9^$Sm[l<fN3)Df4g6SKA`q]%6!qegGZGgZ*@0T48+[DJa`6?:4A2)uR-)D/d?2CM858,$S-8L[0Xs6M2
%oJ7&r\.4W<1-m1A1nr>bQ6QMZ8#q.u9-Hf1L/^Ff!j[p/-BJm^k\l+s,_m?PX,qCdkk/H;bR,.11NeE"K;*l',cCl[H36UNJ9V,1
%<29M^'abD="KUWRV,WodA.&YaV58,\oG*hun&-qhC6t$o?!LjW2@E5,dJIUj$eU3b4OmIuFX<u"(%Q(kl6(7oXrLke3-5@G8.Lo_
%Zn;b=oJ[!kZOk9raDrAVJ`1(8&?#+RT5`d&EeG7>%I"op?NF:q7Y&&S_b(9T5o<A=X'SW#_rM;*=AIs:$`XE,8.2!tS_m8f`q!&K
%H(gd:#ZiRi!gXt/OiKalP-P.TE)G8@5\F"dlk*?oYN06d2UX#sKj;EPX[u8&$Z^5Q_Ok9,\K7&6AsAT.*j^[6d#B2^VI`)3O*B:b
%!%><[3Z"S`j="t]q89d_%n,l+&/clH\Wl<3XcUZBKTUOs.LWma()W=6iE7j1#l<K5GoAA8a<b@\%ql/P`>+)7Qp[*uLm^7hFZD$E
%$tYEC0!l#W8I6i;HZd[m<H8hf0&/Wn^<#_sJkTJtWPV4TS1G1!S4(`GF92GE$*%3*ble:rWj?e='qfSSA6rBi]\Y:Pfa;?u^)a:"
%CrOuQRYZKf*OCDnE]taR=Iel0[`FV;or.*.V6o7Q`,cW<3@2C!9-@S.To/3S>#5mj#dLV2\grXV!^Vq\LR9C#bLaPTTT"'2?-0k^
%1J]52AsZ.:)G:OZX:h^#:8)hm-^R'h+MGTV=ZAZ5!2&fTGWmS_kh1L\;q<S'/hU>[RLnJC#EX6FGnk3Fn/$a2/]/<ij3,:k&[Vf[
%hrAs8G\&]YKY>I@KJJ2i)AlK8Hsi\RGgSA#%$l!Lm]\+/#VcK<5Z%/<$&]G$,mP&LReJuT>Z%A@'`:@Wom6FAqh&`^A/@7&K*)nq
%PrSWq$e`<AUaG"Ji$d"DU>P3q8d`%bVO<s4c3$.;0(M;G@"*\SD%dap+W8.Qi?>q1a[<!AS/)i"<R['FOhnio$a%YTn"^7V!+[&4
%]f+ni(O'/UOap1PA8XL1T0!NJEj.?M%XY_l>c(6.Ls1RN66KG8f-G]eKTHJD.5X[S#t&eK[cEB`=Jh%5pP7o55gR&Z+^)?2^c\m3
%G,=,On_05c@df%/QCcSEK")7;?9f@WAS8D$2GtQ?NmTFQ.QMa2mLYO(bY$6gXinTl@:'Ut$1\.6Z@(BJ%Y]Bu3_X@?,qP4`hIL?I
%PL4,Q0Vtnp6h!QD$I^_uOutSZ4CG1gN.1n,3Ng<a'YIjfb$Y7f6;$%T/%/<;#18:4*0FN8.F,g_K@lQT8YrYMXTb4Oe?MVRYqLar
%-V+L.+RiH#q`l-SG8Nb_:P_qU92rW"$6,rHA0'U79J4BmC+;q,4<A/KN^NY^EJYFRFANDLi'PLj?A>jl#Zm%GK)1$bLj\A>/B'\Q
%R'fqS-RX^=r"I$t[)2'8*A(]&)@6WSNm0AgMA/?_/k\li'eQ8ZFa6OnS:_MB.1CsPj3VO==@G$E6LgL3AhES:igDOP$sSE);aN!#
%j>ru7Ll#PI@Nq;_@aS/j&u-QXiZ>Ih#lKV_?O6q.l64!:`ANNp=k'TVG-rEZ8lIU-#*g:/?m5Qd\5C*i(""?cAZ=fcphr3E-06?6
%Z*a_j!P.nmU+J]h]c(27KLi>k%&Q;UQ"&keo3a1j5/Hp*YaUG3am,Rr@q>ibNl0?qFB@!@PCO%6iB4XZP#2?8S-:?-@UNKM8k;[u
%F-,cuA(uQ0U`_[JYqpqP#bMnBN5/(",m\P:(`_R=fJ(r'F-`?K5g@pj'ZSLaRfd_s]KssQ-?NGKY1R-)4@3j_W*$9"]?'T[[>!'s
%VA2]?d+puW!P4(D->YGf6eJqWJ?0*0+Dg$E,j9n<ZBo</MEEbMSZ>T[SW&TK;jfk$8sX+t/!a.?A'i40Q='goPuUFj%aKd-/<m`'
%#"]=5qg"Su>Z+u5k02=O@tU'SY7n"a_EK-8>ahLXT):s8qK0.e#L\^,/f++BGTt]?&L[W'S2(iG[3/(Q"Z1AC_KjXD@5!2J(D&,?
%e$:ERW=_k$gh`FY6(:OTVgoaP!Xhk)76i5S%`hf#\.@7D9,,R'CcOBL61'3;$G*]j<&u2APLrH*6@8*r4]W?U!^$Wi/1g!r<7#&+
%'=>&A,iM6l71s\g!<dBi.JeW*)AnY!3)[GoOL^PVTZ>S393%[E:LO$R\V%=rQpXagW^X]9>p2bjYZk9JVJ.qcJm+6L;4&"77-D??
%=K$q*V56LZL*:<LSdP;PO$M\=&/I$O/$rgN!*?68q!]n4;&CEj:a/M6pa`V49H!RN?3*^j[]D39dB2osZp;CjbHRBBLR$8GO>Dd0
%WH_`9U:7\s5X+U=7!k&^*Gkg$3Yk!tLT.!JOEdLdN[`[giA:U7JFoAMfRljg3]0crp+0.FOpU$?(GS]6,V,>"/a>.W)t:BC+(Hq\
%f3jONA;8:udO]Ba3.,/&LUC2_b$aTe?m#ZkQJ4oNNLFNH2\T0l9=[sS$DVo";utEZ%\!T*@>$lo!'TAZ:j&lh]p*dOY&P&!kReTo
%B':Tb2;Y9m\1hU%F<gu*W?AL>Xt3OK7hg;0KJV7IAWR>c4@J__]3-,BMfYg!)-e=R1`+Wk!.c'6AeRkD&?eK/a;C"ID6QCNW<)Xq
%mYVF4\R=u_q\5o5"(\o(9:R$B"$$5*<UPFil%S=UW$B?n_A01<L*5U9>S1N<_3>1W\\ijSJKuju?7pq>T8Y:2_Vu^r<s,RuZ,(&?
%YZ+Fo=Lr0KL1?D/mf[VPBG)@(K,jqV!F)H!hePW6")tLm3'D"XCa\XLQl/T]2/Fl;0)-#NR%Rtf`+qX:k9>W?PTWd>^ORG%PH]-r
%PCp[ueL#&5g<,*WX$eI;aG`l?HLh_)P@6E]<Np!I`'$#C-7EFB3<=KM_<`[RJB)A4JO25R&*1>X>6FSqB9Ymm&PE$(LkYWOl?dNo
%,Hu]4S;-/g8EGAP8E4Z0^qCTR$>dd?cl3*=KX6BnSPm^$lqa2W96R%!2L\rq$=kPp9&B9cG[J'FG?>Mpfg8hP+rFD?Q&U^EP!XRU
%8JWjV0L3hW3Z9OP!<R/(FL7r&DPS10<5KJ^e,j(e':Kmt$8hPq%Kkg_nc5!7$Rdkh\6(^E$qpnJ(ggHVFbs"=%)\Z*jX"6-'HUe-
%fEAqr"t;gLTbM.eNgdk<JDd(?:(j'3RmcQ4C9>XaYQ24\1658s`44a.JC,Fp'$0PhGQE==/qqa`d2-an99UKVUV"<-<qb5m.Y>6\
%1)JuL&5@d*0.>9qXj=dX&2n@O-B)QJ\E1kA#?b(K/[-^'dHoZ(<E:6p-DF@gMijr.;&'$qLG(b3>sH.)'ZLT?=I((&JE4i"A@+<+
%rE4/jP>]"rB^qWD#DaV&V+Sa8cQX<]l]<=?5gTTa=bHrcYn";JQ>R)!6R1nf5TM7J0d%fs3?j+..i8V)jbdb%2?uhXMkLX^!X^\Z
%i0=)KX>hm6Lg7H.&CM1F<;"@9(jT(PLUWeL'HSC,E?"sODk;L]P/A&;#4V\q^''IK)^?naCs%?L;8"UHI(H]#&`9[BX1CR;*d#$X
%5c'5S\nk53<Xe4m1`Hp&7^U53Q*A_G2UQ8T6kp=1e.1DE4^lE6!W/4FN#^U+%C6lihTJm93O"sB0d^q/'+7+qncC>5COm[E3[sX`
%8AnAP\uJ/-ZSio".Fi*"`"\%K[_dWH<X2E\E]m+`FRNB)R6k(eR#h>D0g)\/aWUN-OqH\,%N(M=Hf[RE-Z]Rt^bF2-Fr"J(SQ`e$
%/4@RsDc+m+,)B<R8<qBE<s-@G+nqB_4XaCP@3(s5+p:$\@'m`mejG"r&@@$-7K*a"/L4,jC)3KCI2]4ao*TM<3(/"#,qO01I9rAU
%\g;=q,dsR.>*i=#<`#tp@;dRB9(n?.is>l$$\F0A?N^'[9O0PiQOmj>HmdL\.R=2j$OY9=33A-';"tJb@A+N9B&3uMb0eOI^mYuA
%l*/\b=-+%/YT@"*+g/`'B[[S$LZ'MT+\KPP7.%I:[[jbhigq[:*'1?0(D/Mi&:uS<SH1F[#.#S3eA8+=f[;%4'M9H0N(hT4F6[_;
%//_1_MNphDa<b@Uf_V7mH$W027-fb"</d_>(q2q/Q--:+ihKN`%lT&APuh1CB0cnC%E]r@dhNgY4/B%r<^sSOU")UrP#.?7@Hj`/
%iY6PR=<=!TiC[:4C';n75W*YS#)#R.alrYhVMXmlLj[1e@:aVEh&rMMH94f9+qt0WJF29H$+i#<l34]8r92e@-o;\W,TYhFO9d^;
%3%NM.?AM]-;R$#j).6'B(gNr4Q)P&F@/^EW96,&a`"jQZgB+#2@>;o.>;fYY)M<tXY%OGhQC(I:%,qa+RqNqS@a>&l.9oL'R#"GZ
%&4]?#(p>Yll?=o_(^[ia#`Hk<]bHE*#]_d^)91]fYK<H!U`!YH^B=8^ja#he49u*5>f%7[U_Se_U$p@\>m43''H,)_7OD$q6k_+"
%:d.T_ZmDV+)aH8(C-C#g8OY:bE+3O5DHtO6@nXt/.AKU8`[I32#tJUkV9TrrRWu$'R6nUVUb6VE'IkN/&:H-(8g`aMdY,,N"=G+B
%V3NcA^9j\0-4N8V#cre49'[QGB1RIP9p?DUqElogX+DQ_oLm4D5aD@/XBd(T9-09@GaN7_jeRE@!SAl<=+tJO"?;4o+@ukASM@&S
%a,G`]+^fT_MKu3*+;UF4$k^*8*b:!*]98:2(!9(Bm(X\3(@d.BQpL,(RGb.p_E#c`7jn_GA46d^6)Xnh?(0'^?qA20$A>g</*+N5
%_8_(miW=FP;<&Ej"NCKNb0i(iiSq-n64@]8NbmZ^%_ho%YY,",a]6GV&Tkll&-bY(N$^.sP_4!V_BYeQl/89gl&J<_,%b:DKX0Zt
%*6;OLedMpjC-[<2k<^oC^mU5H=-"cu$5b4eM$2@][1/*5?4Ff^K7jkHM?'q[6P1<*qN'"N,'FHf9rl+f(Uq$tWJ"Lg7o-_#KlF=8
%N&<<)+Hmqo.a",VF`7J4aO3W<L<&ZnL(NLEn^3?9R\`K5_=Yq0&H<$#dF$1uL^r,lTmn(0?%dd8WBeHhNd+jbks[q)(mf#G'kfr^
%gfosu"G1N$@(C7<K`3D')o1N^EPE`g,DSCK/+SBUL0u6KLkE.:\4)ES5XX]EbFfZJLt4&GWe+B\S3UqE"pL%/>E8K)fO>88S!\27
%DJ!0P_BA.Y(*t3l^SI\K$&M(.-!id&,QS^:igGDa!'nsZ.#S?dV@k&B#dO&=/eK2O2?QX:2Yi8.E@I&&i9Y$Ea=eGK+^>6Z'tY["
%!.mb!kY2?[!dGt+AVtRY_OeXH5d>A_.RA*,5oU5$7Qi^[?mLV\G"#f/1o8DIOYI^mMPC6.L,dJ(nsIKBisCQ^fF^Ho9?mVOY@JU=
%9Ji07Lm<_,`5p1+^CEh1FO(<=&Z?$P5uNrD,QGSp;h;DmkUPP/i1M+u!qW,D?\7JdD'J!b`(?Y]+RC(@'hs[GLQ2Ka0*2A`cnKdD
%#VZnM8t+\@b@B+g76H5cCS6!M,[EY^fW_.\TnBi]E!JIT\*=`_"II<f)@jp.%M'49gCflO.!19\^c%]]1!C<)5o4nibUa-:0_9%a
%)%hpg)H@I3oLKqFX!(po,bTZ%J,iR(&?h4m(*4!R?UQB?L^fI\+n;i\>jZ415[^'-*n,LD'I,ZB^l>%15rEhQ;qb-"0LhSL?I)Ji
%W\cRO>@G++NcO)1%?n$2H9@,S,"kD+LP\dA;5t"lD:YQ9,a<A+=$M:_Lbp\tKd31g8Ot6q8F`pD,RoM>>L#c@>jE#/9b(oGs%-p]
%ZFgqq%&+oF4Y%b>_Wl+laJG&8$$MU9i=admJ?K6e&sQ1G-m3]gV,[kUBEoh?FTtU'MF-j"l!]66[K=*]TNEMWd#o5mQp<.:GdP:@
%!!\lGbk*Y)*5KHsRPHDC.2jEP)+n&K`<ebI$?=!.,H+#I$'Q8M_0J`XUcU<nTKpB7Zh14QL>@BBGi\g7#TQCcAHO-1&Nujl+Yd_n
%VG/m[0Z7a8Cm!&3]]^"BUY$.ZJ[@i+Z=nVLQlDo6VGe'/oV$pDLchu\8ik%7$J*;rK*-on7%b/,#S3kY'/l"05"*tg^lcE7.&^hK
%3`ik".AVh8&g-\ON"+ATm+<H*_njaGX?k6WU"mesn8lF9cbpP/F]G$YN%3nZpp?ul2$[R:db%ZfC?ooe$VZ4]VI;)X^@dd%-(I!d
%$>c\#k!qfBD9NS.C-k-Q4^(H>K(9lm,fh0>VM(KqM>9MZHXpSTgkO`g7%Qp_LqCn^O'W-.U-kjigk$u.jUqTk:cf=$KcV/7[pD5o
%5(X]E1QU0hpbFCbHc0#Ci*3I$4f"F5N!;>UF5^l]Z2u$\$9PB+RTP;#@OtUk2&U#7*7d:X2$pr%B7qf@aC<5'@>ZAUD")I3N_$us
%GX*J>NAU0.(fS5O7QQiSo>=.Q'J8&:)0!_L%0;-;+&4IGLh=f^5Xol`g.@EUaO!2citb$)D@.+J_lQB=P)Cfl!`+-]R*^NINN*9i
%:;\apqjrq5J[d[4O.+UH1hJqfM$+8&-7(Yu!38AJ0V\GP7e23SmA>[tKOHfq&35.]QidP&ROaLpi=-lojdRAXJCG=E8@=g0Ti;)L
%qcjDV`ipF!(6aB.H#5-@5\<rL&8ANrEA9IP+>'(gR#d,D5`YmU/5^'m%KtIq8WpA.:RF81&PFl;$11MGEZYE(&a!oS6eG"kbb3aq
%d5]uKU]>t;U+$+;8f9VO_kRO^^:G-e`eD9&(]qKK$T>jMBhH^n5nI$*cP,;tJh7<NgCugO#jXN'Eui'*+]9YAFp1O4'MX;$>U\&;
%'S,tK13el^#?V,q`c/nr@3L>)1kj*i.@*0Q?H@s0;PX[2#)X@e_LM_;ftmu0URf9^Q<?<X<Y[K7#%]J$K[,Pcd1<H?0cF4OOJD%L
%,!eb!:`CFrR:@dqFC*p`$^s/M=JF"\L(obO*H]rPQQ`IWjM*Zbl^9"u)buEp)(/pi-'N+Q,OfNDdLkOjVpsG:K?a?%dN`C%VA4rs
%KFaU$+q1oQpc1\#W+pj3>@]GN5X;Lj=cf4rLmTBo_1Rc.9E^Hh.lSQQO)n%RSQSXj*OZ;W+gJ>p6V%:3c!d5=EE0\;"glqc>*:)r
%)MFB?SK`+UV&3e`A?!?Upl><?VVn;YJ14`?_^Ua(&9;Y#-\\$]I>]!)aFS<W.36b@(D7oJOtk+bg+m+`Qp2aT>Laio)"<W4OhtHm
%7Dg=Z"au%:'OfZDoJb%J&=j#=$!.AQ-a50g<e&UI9(5Htje,'FOVLt.7&%B^O!su06($NF(cNiR-%oAORdgRfUo35]F6!T[i*m*-
%)duQd5UTh&'UfN+\1DJ+>T]CW@ThcoV]k"W9q6qHM=Q]m:$`_n*\p\+Ws_d`b;4r26iMMNN&p[-kT*D8k'G;rC8E9cPoC[H"8ik'
%d_W3n,7HY;E#hI+-a4T&'d.3h$KINA/\o/u?3BjjRp[P#n>f`$.8:)_"@W]KdC<dji4HK;A;C>=I5'HScp;rr%-%E!(C6q#@:1es
%nqG-d+O7c2./5*$J^009T*SMYk)m5e&NX3Nm"89Q<$4RBB>X9k+d7`*J@OSf9kS.F@+Q^Phr`mdR$'`<S2Q(t>"4,N!$Q*]Ee0,k
%E"OhDSg%4,"bM\'V,+o:K+Mu/;*bIPkA6M"Q7@G"GXbMC%:YQahrPEfPp-3i9aJN>O^L<eBu2/_;aI`jGVjuuAXSuo,!X5sYDb#^
%>QgjQ8JCYu:e(M7Go(^d#gso&69#Y?[\16P\.D1_bb,N8=O:&uM'e\p0h_k!"2R*5FGO4("WTf\W&^!+$$C:,Q,sn)gqW+a+ii,C
%(EfHj1PDP:IGgo1`,?!s#jVa'#oMlcHoAn$J]'li5Vsn>E=3!_$>6/pPt`+a%iHD@f<J.C$6LflJ:LoDSh*idLijcG"&:_B/!p_/
%F(EDH0Q58%$toh?/_L`49a!#=!H:43((e"@A]H4?@MpKrhT33FO2+X11Pjlk!_](@3b3d&\nVUIc9o'.1>a0^AqN>U%lJt8+?!\$
%k\??k1R3b]r_h^),mI%V%YAIeJ1R-1XR`>oGRSVX98:5.iSlYmVh!W[8405X#d=rc.7)Ih^aig'OqqlX8"P=Z4cp+EL]U7V8NE1=
%?O.buf`N\5AAhBLjmCZ'@`RCNd=>=C+Wsj=XDrhj$#H*0!lOYLK6re,3ri8g%"^&7`=[&47%9WLTlpkIY3o0'`p4obS_g'I$.kI[
%F](h1WP37`Q9o&_5)Z3cbG$a0"@LSWd?L@XLPGru"asd9JY&F=W=4"(TTk1"[Kd/fAB:i..(<'h:upU,L9>GkK#Ou9%31C#[g_oG
%&s;^_7oNNm&$[440(R(4KjJ.`1kbR,O($K_9FHJ,lk(;I3Qi.iNam?hd57]&(`;3T^Q_o*^jpC"+N+bY*#PG:9b1I4;@:Y%'[@.?
%B8OfgA^]CD-t5L1EsrIPaWNih@(J+h2EiX26lC6(FmR1'?O3`P/NHk,EJ;uqOOaQ6WA:eI@#.0?PS6AH!j,Xh!<eM5^pu`9=Q4nX
%_GUd]OCP4>N%b`RE!qEAj=;gb,cubIIUc"\hG]G*g@"0*kN7jcD]i94)5:r1XW@hT6d1?r5A7.<;oiJ-$URL'X\-?dJd2PSL*/lT
%YQe66>YG2p(A7f^[#sJA=USd]OA&N-K>"QW>HHAECFnrqRtC:%+E5n.7n5a$d(aNlQ40-`#.liJ"oJpd&rbFZ'G/Bk(1aPI>appc
%?pMXq+l1_cN9msg_*Ns<--Cq;d43[t!8nGD,Y]u!Z\ctTUFSWA5#<"7^IQ)35pZu$&130S#@pSK.4Gp9d#&r@oRka)p(9g4J:Q3Q
%>1Q:\:f(kWCSC>hkS]t6E0hM:HR\%iJ4Ht@K6VJ"qdFa[]U[<bDONi!M+>KubHV!Z4s>Q/AHs"i%\q6IV)"?f*gd^d?efXcgTZLI
%!&Qk"/2fMeX2(^QCT9-o=o/O!F'N"*+Tt8Q+P[j!r@!g"W\dDE(6+XUYUR,Ygb41@,OT)gq;;`<n4)RIWsBl^_IqD]!F:?qj@Bj&
%<\9M<KsIMBlGJAPcGGLT1i:V!i&EuY.!_&r3aeRMP-p)@gV`lj/^Q+*o#Cf/(46a_,7s`8Xsb:#7KkPdCR?\:!UL,5OD^FBMXW0A
%$pnho$s]+>$25rDPV@P0hLR6bLgHJN42X5OV$;.<17:T1%;5?qek=Z!?"(W6JUHp=jc\7+;b]m%,p#le+n&>>?T%,;A[FZ`=NQ)a
%-!ZEibl3rSReh/'6OZ;FaGDTRV+,_N%-/^o@_c>U+l"d6Q(k5dVE=tRP)8uE=D^U4F$uDU:)YIUq`qBj)p$p8lp@/a(i3#/R+l#h
%i.)+26I?fD[FT!5.2`9H&Bm])A`:l<4\HX;&/cbq3K]8-ZJnn+fT%B$2#oF$Zio!D_b<aF!&B^.s*80M%3R9"/V\&_5]i]i5tapD
%?P2U43&?GWOdcLK!TnYCpjL.%1<Wr?AA_"QrJrCsP([qkC'(2))7D89KmV[&m8u\&L((qT6-bQ:n]F.N2;oT^3m>!Na9<e&;H6t=
%P\>H<H,7ueM.3uE6ErZ]'kBjL,9VY:>50'gXU;QRi.%h7!4ffP,hk%,%>B@@K7R0m&r;V_PSZ$HXQ=+oc4-Y9W1pD^%Fi\>h[:AM
%#^&bjNKe)&!m;]-'-L=0Rh=@tWjsrsq^b`Y)7`A5$2b0C*l*<RZ+F((-@j<uCrat):luEl'j-E-obgph+>XBg2)N#`#YP1e9*-00
%eKaPb0(oF0V9(=<DAKt*+'6`c9b/rf)(DL$!E1bOVqi$8a6F:QBEc)%7Kk"<6^tG?;>&PHdTT*ZQ17O(`0it)2Xo4A<3B[ANIes>
%R^I_1<Zj,]bc0Mi&XK"2h@+PKE0MDM?>-B>dk:BTqK/ruN-*#&$FgXgOs;lGTZid1"/9F%GSIct)TuY_\U5=EU2V3qC?7(J*5Hg/
%+qN/"@#?@t6-9OS%D9SFaL8_u>Y1Bb8!\-lYeoY2i:)OnK5L_5PX#ZAoeZ]#n_qoA\:A#0,_sLlQu^/C`A9mt.ddoW"I)M^_(`N1
%J5cmAR?.V$'LJ+.Po8(1*!#V_&sbe%;,e_r:]Ln,"u,uWi>RGN-(tPgqN3%<pSs(fJjB2r6DEC-&M6Xq)Qe*o(,U(<-F6;=^9m[n
%MFNNT]g7a=eaurGIohqk3$tf5<"i*J3&Y3S!]?4oA/%%&mNRgY80`lN)^Y(qnuGGUlGeK<X+<7sAJk\e)=HY)Z^Jg2,*4WIFH+KP
%FTl2TXRHK5%F!.LrPE2WJ_+nu*)XTB]Oc1rdR=E<!qSJ3eGaG6Yh"Qjk)<<T-F/6]Oj`P%W?;5Nbi.Fc3=V2q$qr?8$h37Y3BiuK
%BHf:0M,?Rm<'URlUl5@B#1?sY,\4go0?bH949Cq4l2o;6@-pd-Kn55KX"q)1));K9.^0YX6CUkb5=+\1TPp2<DmZJt6+\q3b1('V
%/n\Q`.Q+FV_;Yp*IThYgTa+ou6_7>_.L$jsR[/DJiGh5`63O]"32i,V+d>Xr-6:!3#fX3Ej3[IV`/`VeOL(Ws5sUWfC+e9Vj&Qg;
%3P*T4*;C?V5t!+HX9!nSVHVB`J7n&V5GZTiXZ%pZHMHj3lO<"rS^>tDR/d8QY_a9`Q^F.;C2seQ1dOLr7D&D60LiiabLRl2170cR
%2&m!'M9?:1Uq9lI@j(g^;C=DV!,oBAi.aq`VW&eR[p!)ShHYlD&CE8S*R)<QhcT7bd'O/$`E=+d?-om91#.l1.5.u!?5CtePlkAu
%9O&iYHSQarZ$BcC=f03I]OX<f;HJ_93F#qd/QoW<9e!?s1HHrJo/XLV*oX\UeE7uZ!cd2Ua\k"S'F:R+E.Y!"#?`R.^5`1QKT[kB
%C<Tog==^atRXqRr8K!'i[4s2]QBFKtB@=Ahc/@%D_S/Z#eK>>7;0?HLj;9o`m'?l7IAK#[VCpd013C&,D1s"&B*M5Y.?#m?)oD.Z
%R]m?J8\I.7J7M&gG_X"#B$#24'S0%?CS+L_cIL$g<ou`A0gd@)!\188n$9/s-,qHIMC]%alC<\J<_J\uLK51m``[XfZK)Wr-HBkT
%T+"IS?!+!"TQ#t88boURMrVe`BqK%Z?7tS0$NV*u#[-9m;-/T$J/SQk=@bc71aF=0>WK[Bd#OCG&f)TP%W*(gLoe4#Z8aN>*P@\E
%F3mt@>/JIN.Y=.7cqlMA1$4;Sc8>(MdSt2iE.C5p:p^X/+u"fRVHT!HX#%!11F*OI0#Fa*4@6G9+@E.t\Y-?bTi$9\CX0UnJ"2J6
%P,;D^+b[!k@u)^*:om*C0C!i)jq3T2TGNi1P4=\HjGW4rdJ9%tUQd_B_V>o?`/0Zd1S^HQjRas'=PYJQ1o?]fQ'Cg[9BP*/)W;4i
%?$.nRn]/4-5%<![&M!DVeMG1K-:L>[*9Bp4c>>E=P_1sXgk.n3'.$:;3L3>m:sb&TL(bGajBE&F.G0u,(+)%`!d5?N`H75!NC^ht
%Q'J^#7076cKLll"ZCtq99GtHD/iur6#iA205\Yud+Z-bPkf&AgP/H;&]:[GDin0\BV\s)n3J'Z>9n:F8"B($ZA<?7oRR^S5>Kqc!
%X>5OH*27;#$^Qh>bA17>MbLO-%`D3k&hDX%D+S8"_A/@t=&B3RXO7-LHYeDr&`lVuBId??%g!WS&E+'g0Xa=gK9$[0lRSi=*$PI;
%"R6e80O?6eXL`au:OShTHgVGo<Nn>69qVgb&`m291'%^HKYBlH3SS:+(ZH$@@_q'[:aRjA5/L2qXgFI1e^fQQX>u3;nId9>\cC6Q
%"CFJXQ:^\*H(5s"U-=//iTYuROo$mB%20jnHOr#5=;OdU2@RLMBk2/f)7ol!@R2u@Caij=S,r=TZm+9?*?e^'osYJBa)3M>ePaKL
%3QEZ#M9ef)L2,57"\,.m8dJJ=PqGDW2T^a'>\1+k)6%.AW<8Bab_h:p=lJa?Wm`Ncd]nOQ5u+5g^-nBDN0QA$R&E:Ci,`DU<gX:`
%A'le:%ldAdidMB,NPZ,N)kE:8/Z>k=$l).C1WJQS(V@&H\5=Mt-R$C_TIOF+-q^I8":e#%>SX;!+nN>L_pTPk(LpKk6C00GT#$J=
%8=U*n;-1sSmjUVt;6KsCC8b'Y*"]-#TST+@ef%d$,gI=+M9/>fRn+t5M$++X.e4i9MS<Cr8Rp[,@ZF+DU`dAYrYbc18K8q.n8)Q$
%\S9i4d@i/DRP7M;dG"lE:9a=0Pr,XGGh`nD!5LN=EgJuN\g1Id=LB.r5-+p^R2!RO<X?(_,pS+Unj6MJaTedp21`D*U_O1K*![d*
%m=C3=n0VQF(huJ^'EIe,Y?4_./AsK5I"aagKVV77`U[h9a`iQ3k5m'nEY&B7L[qg.<mOY*Q:9mP^R-,L!&b&tF@4FP(%]?I^rm@R
%7"!4]Ua4#2bKPb2&HIp-GbaM`e4'Qf_'5&KS8$(?9Y_P)M*PI=K@O1p&E/g'4[AB/jf,:,+^Ynj+$it<7L>GMJ`MrF-<;38!pe29
%*E39%Z7X%$'ZGk#JP@"+$Wp"8YsO@r'J:c7Yscg(dEE"MMY1kKET>2$%BD3MI\g`ie$*#"WC4Y1'#WgRO2/8!6QV\d:`0`\`og5U
%=Flm2E#kp9ZgJ`qfH=$I.tb#8.#C]lXY/'JE=;KP(`$7"6/[uSC9+0IYYTg1+jNHANYlce1<ZX.>[$(lI[2CM_rP)<27Oh83mMb&
%H/RY/Fb6=GVK<tK*AB*%[H;"uM^g=J*(/=eV-d19879tY]ejlrBkRK!CmJ1g'`!Ui!)1J;MN\?ohBPb9lV!I;T5RHQEd4mMf!(A^
%i^#TQ69-K!;eCWcM$\.B6XoHbRh32h-D-%P&O>T4<Kg:t'S9`8S,lS15`m1d64eaa]`>k(X.U@W]8SY5N2_:Ze0P>B)up/ed,^m4
%<!#94iJ9/l@"f3q7*!,m$l$K+OD6aSDI?%#KFhI]AqUs;ArEBE3so[A#H>g!9+^4AdSMkTU&>Y9,.qtT%?6HqY^7(.[NQM$k:;^S
%B:`KClLlK+WX/d3&.c%<`;if5;-S8q&M^!T6*Q/L]ERDSAM+JC+2\Au,302$c-"Ja$X)#k^ro>rZ=kP`$3VZj!Q:knSJ%bjU]-e%
%N7hHI0$9-,j\.@/QaJ@+Xot/E:,Imm#:.uC9pc[<'INCr7bInk<2RM&,s>f#n?Tq9T2O!J'9n05WMLY--`VS<_U#6MRA'_O;"0H=
%8O5MW_qU!<^lXJMMoD>a@Ri;%FGh?F(?8QaX9`h%>]o"-G'_dD4-%i<@=RPqKg_3A$P$R/1jVN4iS?s:]lfYb1EmFaOAUr6Tl>m:
%j,`@P1+%?"/=hY(>nfh\Me]>KeWdHE:lpEHCk6d=+^$^3oF3^GZB,0?C<GIrKR@I3SO"D(rS\ed"3ak!XFO4Dj/Q*[l94.t11Z[i
%F]q1YcK%I<-s0hE'*AB_eC3E?5^)IH&M/is=\o><:dJ4b6H&T2,?honSSQb=?\FCL)dt,gga-9dL#m!=0FilTBo]UD>TSKAE43,!
%@tB46\aE\3=J8GsZD1-5lD=%(fSTsBe-*E4+<c@M3+V/V!LS,gZ48m$FaYB[3%-4`8bBR/jducd)b"CI?stR#*4%*;R<XbI#+'+(
%!B1"JEYlA)I*iN'T6[GnTL?U9`r^1UVcb!qC,<fg,5=CM6;i3^KD#@LN@fdIMqCAC?BP=g1tAQ;7>T40_6N7ari1sa/rsnTaHL#!
%5_0T)9U5]mA_]8oKhBVY8!'Z_)0jOC`eBJJ+H01K&aGVBMm#J*6`G6GKoeP"cSBUS.*a\U>YSHM$J82E.b-8OX+\6lN)klm:p>Q5
%Z3mmX-;ALSX=4,e5b7rW(9Cd-.0HB^Ro_?FTCrK-h"$2O8!':;N/%j+*gRDG=t)8()s#ES2)EqD#[+a*2]&JWI1_8Y6.QNQJ`=&j
%Mh)u$_..#DCoN".K3VOHNO=i;.KuSi'>/@-997]dGlm3flV.+,-01P_!':=q-SWKUZC$n\9Sfed;Bq.Q3EAIB;Mn9WUb8uEU,nY1
%mMMbn0^<L0C^D7?'R69hE_!(&B).$/e7Hb>1ao[9,n=Pe"Nl:Hn("):1<:"_1bZ$oD?rjhK*mDnhBc?EQGGYA?_jYXeXD4$6;!GH
%:EDO*3^7^!\fF\_HSEq4._N3G7Z@hQ=0J!hJgb)q%?"oi`G9JmP^20mCj)7P^aLF+Z??s]!>4-tXU9?T(5NbI0gM]h9._[?pF'd0
%&e(Ee.26kj@nA)T=f1/c2e9mT%0TA;<RYhf%>DdKNnAHQqD?WQ$r[ZL>*o%CMB\Q8$[D!<H76k:"eZf\MR3Y8fH.+uOHGV;?S^H&
%Q*4=X$.2TR6_RmV.s/[3k$k8,Cmt!5dINT<,TM^U_Ehg2[cB3Bit3EP&ojnLpQL@ko5KU6_Sp0mZ,&DMC_(HtRLCT(/#k\5K0j2f
%9qZ1Bq,3c8TsZ&8$5*s.(BfH?1-i)G*6NpYR<:Ta7DX:XOP,W&!S9RR;9qoI.o5+Fjnl&cVaL\F-?3@sT=@a_H:"I<N29+PM!TLt
%PG<;l7'DX$0X--H<WrguGJY)*5mS1/.?Vnf5cccO"#<RS`0r='',Q1<12+'da3)%PQ#DjDlVLgs0sdAl<C8H)'#HaTOObUMiTmKP
%j(lP9_(efDN`C>0i*aNH@>4mL]>,)r_m=<6n`>?rA&#[NkRV4DGNRSF3QAY[65=B?]b6D,c4:!a$=Y+eap*n9dm0%SQCphs"2%G@
%&S;a0=rHo?>Xn]9\i?0ZT'[6\kX91mAh7^hp"cMsCm-TLl-f.^\e1kFAqs(L/.^\SN"C^>_ufX0>[naY`i>anJ/s$i@!PG1KTed`
%[gZ/=(e)>1H5hg(NY+.i*&Ob[L6sZl#Qp_R04bRh]<nBVk=RNnW[^'S*T^H47_KS=+6a3ORh>1D5Vo(37g4:[72s-gX!'hZF6XsG
%aT/_"=_5DQ(Fe^0!'K8,1WBY\U7<Ps1.'4Ng\gOf;N'1=%0m!/E.u$-!H6oTK*d/)=Vd2i"rN&R!)qZ<Rfru8Jc,XFqRRt:b6#G4
%^=a^,fD#sY,%NfW7l$oI=`Emj^9Rhu"d--H\<Tg&Kin[d_<25K2d1iog]K:2Ce8,:=^$@l"-.$PME)"Wj,Kc&:q`/gAK>Ba]Kkm$
%8-ElE*YX:]jfkSV,&X!@iNE!:9%9QY8f+5i)%@'S@?,:dL=r9_+0%T;+Nso<"\+5$:dcKi#nJ!aPXkg5)Wsj>#Ep=jH*Rt^KT'r!
%Sa.6#C'7lJK*aGJ#a.g\XmS2U];Y0B/$kn=TsnZK(q^IiN(#nsX;tY'#(nYnCbcEcTV)SDM0!0r/;4.:/M<0(:1?d6"HIFS"\dkd
%#ti67!4^hsk6>G1:Xja,BE3hI,q*Df=VHE!;!7l[(^P@SY-oYld+4!HY>B:ZX9[&ujC3nC@pGV,jI>53L2Ja&5=#nn?Vlr?$jV1i
%K%#/sIrcK6;)Eu*!q?]7Ygc(`NoUtVn#8%P\hH]D;b,$qYf*fTns'u,NC)^F@=qU<n>!p*NFt$*KbFkiL..-cQA;+8;IWh-pr5@%
%O_eX_1A8cnf)qan13u]gPSismjQ@X?773dd,^"+laPB\IK-"M8GW"!Obj5(r"9cCcAL0j28Gf(][LA&-AW^47T,CZ0VLag[PiUC>
%"q51[1ejJ^g+k5%qIYksP0I:T2]i`;?!k,m$4]F7@$q$7JIS':Kf:J,$sH/9HkB&(%alPb/0$>\0fk^UK*YM(I17pS`$s5kMSUL/
%---g2BAkJ915[Q87EcH2&W8d!Q[WPF1njG>N9s%SZ%S8&\6(bD6!5BdL9cTdDIQ#[PQJkKcp.ls@7a>j!b<d7e`t=s'1Bl0>F$%b
%.![IO)Us]Y(;)KQGM1@fb,.SaklH?.P<>i-lYCNLZHQfl#W%RU^6"@pF-e93Np:?"De(;T/3;,bQ9Get8.f8O[:hToi'(bPB6Hrc
%%YWn#L,:**):B#N"Ym=c8i.tFl[F.[D;f+nF@'`,PApX/6q#;E1flK+6"uN,nQPT!$+d\bY`mL*.mA+Fe8$HJbC_"]MbSTd#-3e1
%_3=s*O\=46mbhk9a>hQ!+2A-?i)`0UEEF%"^q<M)X<<-Vn1esD`fZ5!AnY3Ffg\[F_`2VG5Ib$&8?lTs4gYEcRaK!8/712\g9CQ'
%7\j6:l6$k^?rWtRl&adICtZ'C<"-O9#bODj'.&l>$MkXs5ssJcTJj,g\00fG/B+!Don9hs+l[1q_MXH6PN.AD0JOD^JU0cDPm>Hk
%Ag4ZuM[0r^(;:'m"SId.]tqT;aAJ&a6->Bg$nVLE3(6I&UL)31]0UruO_,l`YjmkM6:aC>3,'$mY1[Mc/5VCa9I<6Q_qL(a/ellk
%TV368N/3WD>W5.",;oYH4tAS^"]<FZn.o)=H3n+0\9Ji^B5ktg.f`J3R\O8K:q0*XOJ7UI1krLAd4P_\VCPcPb!eCJj,6*(N!XZ9
%Dhg&p3`";MA`epd:[i6I]KoXUlVMVV`Ne?JbnrK574A\,CZZm:L^6IBn;;l1LlOI8X=Q]oVZPi[=,tp5fc^VRdieF#BV7kYK2%-Z
%An:[&b@MuuS<]K^UO\2_(^=DZ%(#-/gK^m=RS`._Gjkl'Sc2_nN9!!<-f,BH>K;Eh15)7*>WN3PKbHnL6&l4="903jN'*Z@X=f3_
%r(LJ"--]bSkcu0H'5@pgIN<7n#Xm)88e2PmfLMD.PONP5!eeYPKdi6Q2G+f$\7m5m*YKW@ADdZB8^>>o9&qX:!,9RG-hKg"&-@_j
%QFI4-)'D4;;jMsl-:i2(X*+c@6EESsX=_@g=A[ui3>Qjl(b&_lHSi_o,+U,j8VBWk!:h>35ntR#-nBlrL,g.m`M4]Bj3($d;3;kr
%M[I;sX@RjXZD#LS@8\abou_7K&n-D`i8m$F.KU!/#4_S<eL!dZ[>#Bi!fX#&P`VCH+7#'e^jOTd8!li)KJ^hZ+W^ie$])dkaIt3M
%Tn/Ye,UpuK!4a&o$Q2--&7OpQ#rB#b0.u>e__.3hM5QGW_#SW?m3>4mSWq.[>KW(^)A43h#p]S+'adhJc1^]>6uoKQp'"c]at/_Z
%Spn^NN(!+_P#NEb4=u>#3XR&k;,)Z2,qp[AUEFJ7@pZ3eDce\.KJZ'I-qnYd2%'lP;%eqOI#S.?pr,K01t*?k/OVX2RV,2tajZZA
%rkE9?4-JF0dV_QokF`Fb6+d5&Y3ZhLG.Wpl&Xr[SCLrZ/dOq_WhF3#=#UD1?LM@Re#%'/g!rLKh5kia:cM&?T.Fe'@k;t;bSM(kf
%\c4:m:ahFekC,B0P?K[H]u1/<n*fPg5el5-4mJ-9?k;?gA#4QWBdHi>T3AqPPq)6K_W/>0%;>ai6u7aM?(@/o3j2`^=bcW8?8RA7
%0)Q7R%*e!9H7%*d%;/1o8Wm[nZsYIB$X55<@IY;AHJ^Y-LXYtHQ>_Lt$$6m4L,d:h2_U"V@n$t8o6tP\dr^6,>)8c;Pq/X0Y)Xaf
%oE%MYq,.&=,U3f+XR/-=,^+@]*en_m;1SlD`=Wo#^6gE6*:5ai2p[mr0mSc[`7.ho[R5e`4W(_o:C>g>E%hWT-5^0B9ml:f=g+Eq
%2\[<>iE+VEVTXL%d=/3!e%B)uV)dd0$ZJqkQ"e<e;MHX=QhKrF27W,FVro<-E>(++0]j1k>MH;cUp>)\S,$JuWCpa@1(NZl4lW/&
%did4_412k[a(A2T2-G)97=r*=;+h^tTe]Rr/u6QlZ$$<_\JjtMmXZTaLWtlZH37qcW05HISWJng^Vj@BlDaiJFp4$Ud?n)?U#^;"
%_5C^)j?@#gs33?.lfs(k*:e<pKrr_+?;d=>o(<Ucf4X.Kc9Z4qd:-^4cX:QG(b6<ac87^/'1..N@QIiE&Xb4W@BkhUJjcehT.3a]
%?Y#?)2(#"q;G#H`i$nKm(OM`Jf2RC##AX*ZhSeqo^aE[Df1I\BESCWl4+\U??7bh>IC($0]>2Xi;/k>Uj@%PJLS8Z#]tWJk+?rBL
%eYs00/Yok]hQ(0#T0jksbtMUMK0'>t4-E/hL2(O9h!'cVZ_h/pCgddh7o7pA)E^Zt`J?iOlL\6t8a:AP$&3@+U;3gDKuscnJ!,kb
%U4/HkeShlW0eDKoUth93XQBPofVI;^`OLo+_,R)umP:9(FAnceE$M4nYDm(N-P7r;'^pT1PT@cC5)HHfan><(KVl?8!QJU1-F8^Q
%U43=_KQZ'WpqDKT$f;q"!2C+*mRPa;d_S!Dp1^@b9/$]uVjHHlG<r'k)iso7b7"&mYDBX>!+RY9<-G2Q>pQY'qa2o(.$L9d1'.$X
%W0TlDK`p=`r_W:_USO5)00=DeNA]CT!DrU$_PLqo_(p<]FL0]T4J/ll1naD<<5d)-^pW"t9N)*Vh=Z.?akUqr<e"B/FN>B_[Rm/l
%8ZjJ)Z_>>K9;GLr9..mVL[1*_gbDF[-;(?*;!sK*B;_YQnLcu3\f2*\X\Z0be`8@:2RB5SR7J3F5X-)b`aopspZhZC<ba,PIA-n>
%-"WQh1<#p<1jK\ia-)QR7CEfno!pRp)8J-_*)Vub3amkML36+QiaBL",HM+ibS]Kh19j3-?%&&RU@>H?5XQlR"hsPaG=,X'o`_oh
%F:#V+e!e])aaD_:JFjSse&`I%(i$.89Pr=:3`YQbThfh(SE+YC%P%[P2O,5ChCM:':^0n0R>JbB9DQ6/:45;;J:=pJ^J!]rjl9Pp
%rNUe\"Y1_Sle6CM^6#_SlNrf`q(@!f2MM5,LUH,];F2!gHRW+Qe\dg7$q^7,WY\_G8U`-.4VT^1i$p3&oBT^ATa*Q/P_0@f[38Lk
%X51@<E;Z';4%@[9hb95i'RM8;D`pd/rfGnN8oPb-QWZ*%F;3XVA_6]UjDQFNED/2J'?_;_*f0\i8/PBgKbU8kToW:BT,,?s\L+cq
%KNu+Z[oD*f9+gaU7/Sn?QPl[>\u3J!#?:.h_-q<t7:eN/aP'7oRimt095'?ISP^0Tc02pToc0u2Q,rLM`CcSd"-sk?7P6r7?H:h:
%ClpgD;i#W_>rBNJQMEo=8=83>eJ\,<f5YkI&:2OKOLeKGS7I>cQ4U+K8;eVroC7l%AJ0'fpN/)1>O=nBm&6e7Y^1;u-&.TS%+.M3
%[Jt9B3lgj*,o\^@?lm-R:p+'pSr]!^JgTqC&'^@q?if=Kp6@i_n@i_n4V]j:F(c@l5#!8C>d-g*^@XIc/&5B$9Lt@%\Ot']N.EV9
%HM@JhPu@PZVbC1.?P#)ZR!t/`Y#9+^%@8EPOWLV:W-JHZ9U/T]I*1b_%D\$0c@>g'P;PaoWD0\B=&jZTO1CsQMg9YeZ))?6(6eTO
%9bfP4XR&Yr#nhM[Qb'tpQ`;)4!>OGcSO9K5Q8=Q6`XuP&,7\`DSJ?]qXt$*Kg&R#tB'[=*,@it7#u+U[Yc0M*`^cls!k!Y[/kt/]
%UJ,g/W[k(3,s"u/%pbcdfn0T`4uKSG_m_:4c@YY]-f]l%2bq^C^oiWSBrrSq&m6LNBN5rFZ%HbL;UEY@<Zi#PIu@lUqkouOc#S4H
%&Q_<ZmAT@6`c_=GL<HmpS-&gZpH3\`?YdTpYGP'Knhg`hGOLb/i6aSYeo"Z!m!)]fLB]`"U>WG?YqH7ME5Cd9r[f=@e.k;IRLcXH
%).FOh;;PQ3C"7!?X!H79;h,P;,Z>C'$;X5[;_>\Hpt)6;nE]*h.;r(7M;Pmj62HR[gEdp2Qr1J=ngND0OK@@t<*lLEm35+UZLpq'
%caad!,1$%d.%G(s/tsQ^!Xgu@`T"W4?Z8D_2*oJq\e7ScnG_g'&lqBc`GqTEnTuAt,7-5ap\jO$Qa),q1EZP!&_rS63^Cm@#e=,-
%?"&ZEa;=XN/GYB4F/&d)(GsbBOC/MbhWh]F#C(:G*h;n48eKeh(/rOMRl%_fDJ"t@L7=VnUT)&PTtE9bkggNr(5i8$O^Pd66.==>
%=.j6D)imQ)L.-Jp(WTZj0BPIHk<cR*F(Mkh/C'fB$oDoE"n.eYWPE;Z(E:D1(6e/=ha3qhYmOKG$t38bi*"04o5Yp`NE1qPL%>^f
%BC'X_\nHE_U\M5MD'(rZXb:tc'Aj&nSoTqbaho0#pjh(lNnfEn-n`W[._6jd5q[&<3UE7JfhkNo_)f#=0a4-qkF3$^Z..>+pJB4:
%/pJdrs4fc6<Ubk/W!AmjHrogpWg(\X]rK%`e$],he`/ccs8=(do0GKQ<<2D8/KZYU":!iX(cg=har%q?MgfnmZ_I=TGF2ENFG]IF
%P630pP\mL/OF*tREO8j.ADhRYX+gJ,6K,cNndBbL5*?C=H0_m[5&!9*^$iR/Is(e3-`rRZ8.;jLgZ+Q!;866N/#9d`bA!&1l&%OA
%HLaD(q2lbd)K%MH/,\a.d>F=l1MAq#oIM6&4:o(;FSL=Vn+ZQ.3j3:)e"Q]r]kTiL'D7L$ZM(Dp4Ug5Uo#od=S>+Q`NuqlLKa!Rm
%A^^,I5'I6TRZf0.?aGF1[p+2O[d9Z86mIQ[/nC&GdjF_*46`iPrbAERhd=m^$CLb_ch(Ndkb@;QF<LogmTe1es6c.lSN,,_1f\\R
%Nc,YSRYJ>MLWBH"-'U0SDtsqHg1o7jV6D=3l\hh+mD(K2N<*[XP2]tT%TQlDo^.1JiKJUZHgu(:L-E=YiOLf.W`aqE\e7=\GY5<g
%9B"`kQUZ02J4Yqo*D]"2[Vg04*Va=)n*eHVpI"C_86bE]h#<Sj#lB=YlheaRVd>;D:+&.Z^:;%$BpC-b*VYXKpm%tET7@.1U(iYT
%`VPH^g#]rAg?e=$TcUVk`?F1l:Ie34RZqmu6dnLuJ8qa6c4MpkCOuQ4Ym+Y:?;lJ$E)#dabn%[Z/4,R)Vq(=MBOt%`kT+lV5k[5K
%&@mt+d`kXdAM==3ph*IXMl$m'6p,kEh=h7,fC/O&PEB6JT%mN,4*2"AC%N=F>fCFDC"4?i#^O-dR-c>MgFC"K70*3@>88Y2=Zp1d
%g!hX:>q='=2AIW7%+S@aC<PBB]H,[E6C'rDVLuTKRRSUoJ*bOuN-PU'm!_NEI=E;q9K!)gdo(ZZ'<rbI+VF84q3br_-`iiuH-RL0
%`J"g*60fChaptKsWjFDJ\*l9Ph`Z[QJnGuac^@]KA,@bZW+>PVhq]FBn&-i*4KURcKe*USqO`$:N@o#NF]AEMO-@%V5XU!Mfn"Ko
%"sKi>^b$\u.t9akD[5"nQ"+m/%U!:f[h7-A0<XeL=uGP^H0Cb$dWX:K9N$nZpIBEVLDQK\77+l)$0AUpFr$VJ4'"1D1L`,anQb#[
%*F!Zpp+nn&-&)1]h-f)&^M>1u<T=Bqn(]55G)!iB88iWV:4uIi&oh.;H^sB.]KbNVc7(+CQIfnuhocdHN/].+1?E_@/@tR-^/<]-
%J)gS:TkG4d;_h!F0&l=ojj%<W1e8PupD`G#Df?>8TEA"h?/7C3Jele!H69:m-WUojI##ndh]9I51%lhY:Y_fRh1+OH0Z*Ws#2/62
%53=B`g7k'T<rmf_83CT[:$'aPY#<r^fF%'?rAMtGb+ea$cqSZEnZdn9X5<,RpX3"T2/nf#293&]$baU2AgNbLa-i8ph>sGmie[m&
%dkG$Z[J,%*SJ%=jX^Rj#)ZRq`7s@i,0aOrND.o.Kq?3qnr8,iq60*\bdE"@L;1e$G"$"W?MRlbc(d(-m_nZJ\51KCo#@gJJ0S["M
%.P[0*f'.9A1)fB&Hd=o>'#CD6LPpi^Y?V0B==g1USU<&E["-T_M6CP",<nNGVOafnrOc?Y%E/Od*P:6"-MVapYPu31e#O6d6C+G@
%XPqSU@p=Zpodn^A\(K>G:SO.!+"JSl>9&Pj\J`'<Wd_"U"4i!?c81pg\p*kIYq?4EGmB;NZOQ@)CDD(\-i;CAMG+?BFbK1YD,&XN
%K5&b^#Z<(i^F,RJEaEg*OK[fJ99N4.fBuVGe[40N]"e"(?B/Y/LP$ago0fh9W6shc[A,d&GO2^D*jm:).PsB\b2-B`qoSp<rNacJ
%;La-DR@2cO/4W1&![t8-Fdl'Af^D5$,ucP1Zmahj&sdqJ"JZ[.'-o<\[]7,2_Eo$?pK+?c6osFf*o68s8d-EZaAEp.K:f<L*VT1Q
%(R?CU%d%faSF>X36']9#2N.nY_P:?%ep.2K(H8nn/hlB8CIVtPpR^=W#@@/KF&+!V5%fE;n(/c>4S1<[E&p4iZ$NK=@7dEThm`F=
%I<R0iJmlWl4cb%W)l#]!!8-/;++3kmaPQYD[>ZN.X60)(AnqSMaDWHAFIO0d&Cd/WKaK4Z<tS3NXA*qk>s]\i%#-Eb=Q:)*MH=BM
%pPqJUfu(fqdC#2di.3^2TYPdq>P04FpQ7<p4ufQI(lV21:g>k"8;-XEp1LjV8e[",:rnt,4^'1NIA"K)CQ-YE:QFSf.+Q^:"`5CF
%Ng$;K]7.-u+clAQ\_e=q1!iUoD#38L:[)."EW^FV,Ho8DMMU5-)&^isMS>NqEcpmMREj[I8S$3L@TpQUjN.)dnToBG+eiZ7\?N#1
%^)s5?WG0%inBMJ:iVWr_ZiKXqb17#4bgu!%jeePW&A=@rICDu%YUL"mbBUtf(df#TM1T1SqY`n`]6cfuNe30(fjn.CcS`OM#RVt/
%$B92N;O%5<6l:meqqRQ_'cos'WG-NhjZE:rn$fik%"*k#*%UEr,0@&V$%fDLPa&2N]"AmtNc6M,KED%^\uQMOI9NE_W[K[g:a9-D
%9%gLo<g"t<cP"Va'spl83.]>KB#Bia5`liHD?r#>e9j,?GNuF<cBC<nX]#\(@Ie@"gRq$K6U4<cUk7RXXq@6U"o^`9#;clu.)6u^
%eFX(PD0sC/ifiuuhM1Cr%V4U.:fp?Fs%_3'l#<^43tjEaKjmU*DWO,GI5_uZK!0l,\V[JA^)AnN7q\4`]A.021i"9RmA#kihSNee
%>S"$$a#_XeQ[CJ:<AT[f37E(RB>!n_ni5!\Rmq4QU=`3b$p;]WSBYmGQr/P[S_^X[VVL^mUV!EhnE"r\\Bo;fQR33@O!;l>R0^cN
%PLmiD.c)Z3^0Y6h7`o[YGZ^D\5`cBdk[fX"EM'iF*;GpqL+RYE70bqO7o35`5EDfH\b(j13ag[>Y[Tq@\MWS;>P:S9pDeR"Y#")=
%I*ClhWH=sd)73W]akq?#H0%?o3VX?_A(QO63jCJ$n`)?_C,!<30-98$8t_S+__/LYq2iCd](A5k\:<Ra+JR5]oHe":HS4f-9lhq!
%^)-F_`3OoWme]/==%lmJLM_uL<VP+lV`\I\l[DNDR2A_[J*I5Yo0\n_d&jr@iH8$N'B@%>-H,l&@BRX$s80P)6Ha8^M2J,uWL3H?
%8J\G$`OFCdcNDhA't3J8T=Y0sg9!^TgD.PcZVD/;\6Dm(L35:;S9EM\PI3'*q'0ctAn97iS;QOTFa;%U1o.cQe!]a67&uDWQG5LJ
%eRt:[5)nT_:dLb!pa<=(H[0pc5RigslrM@\W3)<l!OF)hPWZ=l%I*YXiuFVa*^Ee<_\1GU_t^%\7p')X,#KeDQ`@`89b%UH-@]Xn
%)4@PRbe^CQFd2M%WsVdXVV83JgX-Z;A4g(j`Ap:kgLX:hp!`P/%_@P;II8fS\24'7<eCFgd,'nMh[h`/f>&%O9:boq*lWCXkqS.X
%"9bJA[KKU!G#_4tXW[.dQ3u$H,.^4:-[ln1\TA2rq<tN,m)f1/n?etZ"l6Uoq1=P@g$9Tn6u704`5RL*o?<q1p(d#>("D1=RD0JF
%ALi?g?ejpr++Z][E6F:/(\fMq,'EQl<PI\RcE(.u]mbI^DK7OsCW5jM'dh#I.ti:_e"?C1bZM2Z%Ll(Wo5Z3/_%!I`I%Dk\90P:c
%?qB1Xccs6E<sbtGl%*=fc.%)j*B[oU:")Z#`[n2D$n0n)rUZ=Y63@#fm?NgD8i^\a`cUe7je@*g=g=."L!:d@'["G!CH*+uGmK]h
%a=<'*/;3gfp^"EaP)q(c*At$aV.T'?2J!j$_^W2g-om8I2,K[%VH/5k(E=%+I_Yl9%q3_o2%V72UTi^;F<<(3VL\1\5WB.X7$AG;
%-@'=VHqT`h1@qd#IeTb1!lSkZ*(M<M<+mX@#4MaMlG&j[-Ql>]9#I8iTe(qJ9Cfd"fdLpV>-[$Dl@k?MQ&A$p=7HAKd8?&JG1>HJ
%m<#mq,)#j6h'm.e\1&L!;k*$Sr+qM:"R.2lnSB`8/Eh3]D/>u7Ah$k1V5,uA#)WJOa"pY?M>+66hPmZ4g2Td3/BjV9J&fFed0:$7
%lZ5$p5<\c231uq,=BZ%(B$2gj?CemlR?f.4R<hRZnNGq]Q&iqLU\?#TOUopdm&4_Ob2VWT%B*'lkn`HgMs$@4Q8[(58\P8j;I'YY
%I)@lHJEK_s!l.2+!V/c)PVsCAiFg#,\q!+%I_kiq\^>NF*:^q![eWs(Y*_Z`56:XRPD4L`QX)66eO2cUZNST4$+Vt(Kc\QP9"9aZ
%WTeP2d&EZVXdPl;O_Vp%0NdW;Y5+TMpCQXg_B1qh,$HR)JGD[soX=nPn\YYOdOPh+q6Z.+Y>Bo]lAZXa'u>'R2-Ue&$1:Cbh'mk$
%;2YH01WN4EJ1XSo2_<uQ2s\hhV-Hs/I!,g*j#M(&dK8-$\!&Ie,O\mTgMbt@Kt+8!5Tl#2lc1We("RC[(NNhKqm9&Yh\I@!bM(Uo
%e3bMiXZoj,()o)RcH%,AWeCK%_K4I2_YhpB#;huFMW-"#Pm3@t"_U;b(%Y-<3_8kKY,jIIA3h*2kQqi9\lr=#0$6b=Xrpj:U1Z8<
%Q/G<I.g:+9?.39YgR79t'9T8k:a&rIEd%]DT<3\S^KF4E5br-q\B6u+CSh=sM@4a7@%h3D=>NQspCAeD<)c.Z<&am]K*[4gDfs&A
%W\[kshrd<o-jp?[XcXoYIL'0f`2SSAf4i+T9*6?d^^qkA`&DoAkZ1hJEkJ1d77$7VZFNeVh5FpB<KMOhrst_dLYA56C<h:.i$/JB
%6o@X:"Yc[mI#_/@)epWP;]1:ApdOCS&_"#lWR5<5ShhLGo>jfSUYN:%5D"_TJ%V'Ve4<!]2IT7g.!\?]GdA[0M$1bSHCMcPn\_-U
%'F$k]Bkc9p:`%oQ.UV$6;?<n:Y=s[bcVU>mZ*-6'Y5=/O0s8mZ1ROWU\s0@!Nels_\uI#_]EMp>FZq;o.!f31^-Obi93BI!/",a*
%MqXK[jAD28"taVh'.7@\U=H^&n+8@:&\;3L/R(^5a#_L)6KorCRNofQ+l/A0a<d79INq$C(F4MMW,<]Q.R7Ec#$I`I4GI-0_)8q-
%oP`G!p5FEtFjWaIe@UN;&U*fV<EV.DDW>h4b1BmoA/Fu[.R"E;-P3TG=TWICd`LbXPT+PB.q/l(8\M_D^<"n=iPiNn%X_:"6C&!u
%0iEY/<8PDhQ!Gs*4'2(Y*$N,OKIGCu65R>Wc+;>t8QHks*%f@2Pqj:H()F4^0(cYciL_:te![M9%(Ppu9Y1[QOn^I6=ELm]dF<d[
%:#^s-M#afMj:,ub`s8\K.kV^NCj&5h7WocaE&j*:W+O(U/)>5uAl"\eG/^@*fX>51#sGI<:BP.u::a]\0:6.\!$R*Y10]9tq-&#7
%)Kji&B%V4h?p\,\6k]Q*0WELU"BSOoK<F:tPT`5Io<iBR`aFK_[kEO4'l"%kH]Ts)P?g<RZl?^geWBV,l9oSQFEAa3quO3kA[plN
%/g.HXWuWdPMTNtCdKu')TSQ1t:V"`oDlDk:4MofKg4E$6"4^4NX7?$dY`Q58FFW%b1`/c)l)Y%Xe^oLORSN<f<*HDt6F#@3>NeY'
%_.pZg\LmQ(b>M#o&kft,'eqqq'[!g:!Ls-Uq4Vh$bK\!>(Bg&Wre@huLF2a*KXFif#F0=#GFp#J#\:+S`jomBP6]Al9/"eeZJpXa
%btF-O=ad13J2p,'bZ+AP3=(>06.IT]ZQ+6Q3\E35*gi>.>G1Wr6?E&V"N0%aYn-g+e/fd*Z.1?9Sc:OOcQjD(UToqDQN9>UO>JJr
%\5W;qd>*6!hXjQ3Qi\,(c>].8^t*@creH+YLkg=$S>/_>S%&!r.kOsn`",&As71a\*7k)?Nll.fHq5"BWtd(->V:p833T*_5Ad3\
%L/Y471k1kjH/0^!EYc]H$E@*l6%pg3Cu/",kO4YR_=Qs@p^@jM7F[;eM0&4rV@n%d6\je*rG5^^M_V@c1[qaiMNph/,tD^M.)79*
%j'pj_k>+^)Ec*r)S*tP._HHW/+F\d1RJ?:WnO7:?5R>Ri/Ui/^)T`7"fj>$.W@]CBpU(DNBY<(RE<,n<d)[A^^sm[uN3k0+V2$,`
%P0V#qIYWf7JK+gh<sV+m()$&)_;Q[U:--;1@6p32Bb`Fd@T`d7[o#8lUeTj1YF)*>"ZS!]e-jJ*ErNnR;5mMM(59f/7QY<t:69qA
%blAVab^N-<E5l`$[f[hdE^qMJ2,L)\I6AnjjQLB:jUB<8#M4^;L*Egoi/a`7pjcN,$[\%L:Xl,*!eB)5\<(6t(DL*dI"_VLB3C\T
%lfE#4%>$qXR2g4qD[6V",)L#O$>'po(T\9:L&pqpDnZDb?D1TL<LfNqHp#'_f!G9VchrQ*V1#^-U)oS@W/#E2QL_qEN#WOBLj"of
%fdN^+1PYHJ\O1bSORE^9^l[3A6jeTuK.cJ"f:2iFTG.uQ?7jel6h>3(DtU;1X27DcdYkj!#ET5ZO\1Rk((=4BYU_\5A.)DSlk/=^
%Sl@[rfG,EGGs(s],%H[KS#J=b.pG]F^eL\rQ3LFUpK-6IHs>r"nA:bgqYI"D=r':L)W]=X6lQlZh]cDP_4r1d#<q\_6;St@Yq2'[
%*]prdd5nJE]abm$R#uk=6-(6h#2):^%;mJ&RCkG#Y#fh4Jm`AV"SCDG@CrlsZ5L5?o>mCgV+5%40Qq%<qg.?%NgY9WD37Qs*JfdW
%88echL?\mt\W\;g`ZB@b4@H/(DU4tgN.b`hW%/b.4S"VW*&pDsk?I0En]B^^#<Tn2?meW)C*NQ_)SJb]3glTG*b<b6Vr>>f>0nEY
%^d2\.`T!5YrC:!d6[gFRLPkt!pF;nX!IN-WnZ+-^g#Q>@J>Q#4/"FZQ7cfYc:`LV[quQ.dQ$D&C9\N&f7O,/@RCW/q3Y<u5`.AfM
%`CEaFY4-G$"9AihZl0Wk#)CHZK<`W@IA*:6Kc,0;,8FJ&B_$=]Fk%V-]Rhb\.1+JaT#BeL>"J?]!-6.d0(I!eMBr1W]nj1tHm=h/
%!"a$K_4?Lhq,B>7PekGao'-V8AThk.B#B7cCtV^:e0t+Z_trmh/-4LE4M`QP!efLVY``;3a>->aMH;?pPA!$u[A6^_jm3S<EEr3u
%1A%ZX'L*;FVf'IlB%fX;)hB/QK-!B0SiVi\*XK:?.fh1u#49Pj(r1qt25CO9'0lq8VjE0Jp\;+W%D%&KO:sX5n=/!3S[1u^gm/EG
%jBO-+'!sPq2T'0(IASD2^ORUnU[V&QX.par0mT]'F$_^ej(,/ec/HWcG]eHX,<R#XkdIkn<n`h2/\c8#_b+Sq618\I3ke#A;)IF.
%*s1(rgjY?B@ie6fs#46rR7T6?eN@8fjp&OD\RQY@Xp7(@]%J[X>eJ.8I0<b_?!8G^U.h,k/`?6&5f;3tjhr<aL.(mB'DhoP>k)s4
%9/Hg-Ml#Q&'3^UGW#@bn);S#5Cgf+nEiUFn!6@mN*@sdH:+s/$Hn9^M>0g`&@u<Gj@<T@W%efi)Z!7]VS,B?$E)'0]2)>&DQd6TD
%i3.o+",`Y2ruahhY$=Cm[bqm.J@=JPfS6"OD`XhE;o(MZBWu%K3C.EM6:]q&'DDG)l9"q6;(5FVRWL:QGb)XAYWH3b7pOYDle1@b
%8QErjV\<sok0hKA?*V3sH!E=VPTJlk%Ah#tH"[MijY@W1_A'igRSkm\98;0B`&Z+6N"t#[:UiP:*hhnWDp\+Y=?u4(foR[M%j#A0
%(`?1[M&lE\-]MQeQMma36Z*lp']&t1._"_==.<ilA_p>HOKGH0]\,_bG:CGn35&\fe!c)#GA@6tY(5%^gbk&DV<ng^RIuaX<W]3+
%$Zf7?!6%#mloIet'EINt\4\X74&r1q'!HtB]dTu5KnKT;)HF\8:oJVIV:1ms14R7TN+p3,Y+hYJ`9#?@dkAtI,o'ut,RgETP!O9H
%Rnj(e.+aQU16I6g)OPM%T_JSL%'a^17<[+qTg7o$J3Nu2eVJXF]gOZ@C_91bOb)KP'7gG*Nofhg[af/1%:(418_tKB(_YZipm+0n
%]jL9Xb6-^N=P%LZbCeJmXb$VZ1l:ShWF/r*9)moX8`9K7j[C7c'B50n2/9Y<l,E/EoeL2I41'Rd2hXYUXTo"?>'/33e%20u-q5.d
%3t\Hjn$%5E;61'$5pGT&PllQrAP&eLH[DP:U8,X_TcW\KMe.l<22PH<NZ7u/r41o`Q#:rA9JJUH6]Z&2(BGDj4fk*aYrO"rr-!_*
%0f]L'C_.aZ#X'\%KY%\G2PFOWN.WL)#*)'SVZpPN;RllMl^oZOK,p&(ob8nqJm:":mM+ebpPA0K"Fg+3&HrTf4&n_,F_@Z<[K<0S
%$1kj6!J0_?_nq0]Zp!Cd/kQmnB7%_Uo*g".AElR,0MS]k>GrdU]j/>4:lj6b#Mu;$bCGHchDlCQP@so`p.^pb-l/o>4O7MPZNO%3
%ZT/)#4Xm`q'^>\<M_]Af:+O)Wg+r0/U]n.I>GC-#bWhG#=7@GM(`*]e!js'jJHZc7i4)hmRrRNLUkeP<4KUMfa+6_\mb@UU`r&Z)
%Ge-J1eK$BOQ\j?<Pop?%%O>g$O5AZO<cIK'.8ZT?%C=igOTiJ9>_(-co*>!_92"BiZ?oC)Y^G8Vo\lCQ4iRA>.NqGXhb8b1_b+Up
%cTJP?i!HO&PZt+0^3>k0Fg:WZ'93G].kE@L=L<Wl^U]cC]^BQM(rLH6@>ctSlq_K6S4&$Z?%ZJ1h4T>UqO>qMn_fuYh%j2Wk\F&X
%F8[_"qo3DQR3;p"('m]fLEL2hHU<:Pia*jb(k#%P=FfJDDNuo=GER!.dU^iG<=ntC/!`/mHFjn?K4@*H@\rt$+%/8#-P;jc;"9$"
%:;/;83b/RGq!#W>@i"Yo@1?_8p1H4fZH8?\`elU\UJWmL$lIP^G#L;:\q[Ml>SO&'>b:;$*%Jhe`S@\L?[R]IC(:h6D1?^\]*qXX
%Pog?na:$[4o^-s<9igi3gghkH+#^m);DN#t7h1<#Gc/bZmUoTq1^"HuEFlsm6Q&U!_Uq:l$i$?K%pdfVb./^RTq*&!]k@/K@S\?g
%F+eioREQt50K_$)Yj*;eRZ]gB%3+Z=[m,nD\6FBOi?J0qIbgIFp6K;&Y_[TBTL2nFqAl&2gdm3O&oc4N_bc(0<XG'a!:6AU['"h4
%[Bf>irO2NX'ACkE8EC])"R*Gd8[T`W'<#1%h,X/`Ti)GN:':F9K;YMVob-[lJ-Wi1LD'%3gnBu5ah?Ri7n9m8j#o"+A1jF@NSBhW
%_2O//Wf3)(qnt&#s7MH9+gDYNl-??K<=S7aqHrk0rShe*dhIEs,<%hMD)1a,i5dh*/o(YMY,f;crDm0M]q=i@]AC5p^2bO73[p:u
%5u4ql_,k.kB\^IZO^j8aOr'I@%K'YXS";[/[r>N+`a7W1EHS[Ys8D5KpMdHh1FkBFfRQS<.us[,d7E'oL\DgRoOf*p3;kRb1Vu&V
%mQ\ItB&!bbeEOPMi(=Z=`fS>S]Z'Su1l1E8KST_aZB:o-EVAiu&]fKkU,.PFPhSIr^Y^4^\L-;q+$AMYNsS&RpaeCr&tCr^^YuhF
%PF;M^/;/(H,d/(n!*R'rL_N[9,g-YeeR3N]3"$[ui+h[$G(9P?P8<G!nBW]eDmTMR$24]hmJ#K";a<^$,4B/@KDNc)06S\q)cm#<
%!CEEDAgKP7h(n?#PZ11\O)B7qm+^[aImBo'K6p>48<r4eeNL')+N*kZ9BC=XSJ*rYgD/NoGPi>P!d(bMS/,?)"U.\fOrTn+Vl#FA
%hp6G[2<m8)J4u%nrtY"#,4m8nQ]Uf/%#jb2HALa4KcLq)KH8*3mlT"1BV6.7G5](UW'<fRPZFsb4CRLt?HFh*7Zc-L<f"#9+&MC6
%iTm:VXW3cBRlP-*ej>tOWM"VoeSF:MF(bjM\K.L&qi\"g1*+K^<YN>6erWX>d75r>VCuXn7'fr1\phYs\<5`c5i])Okn]2[,HZ6"
%;tka!]J[2C*S`(CXe)#VmOZ8L*#LKB.=rr/9p:cY-'sQ(=_C'rf8XtOP2h2aB]nN(p6uGE"XQDfQT>;mZK.OT\"WW"KOle:"lJ>U
%bJPTb/P^WGp/IVVSm_%P5e.3q+N.t?,UHQ@/omH&2<d*g-AnEqWrYM2++kOPrCgYj'SW&e@7U$EBb%qc7QQ6+GtEuC)q9N'-L7*Z
%<GTa$F1soE4$;$0a%NlP(ctf['K1q@m$"%*bG\Z==I$+'lp#uA.sjp2`PpLq,8tXF<n1R^ldhDT+t`oGbmqm?>=?ua_!TI>Hm-#I
%6D,ZW'/g?G+(1_Lqpke[-lQmaOoKJ]10=ZD5YTY,I%U0@_$!YU-4JZkk]s8*YEuc4_MSD(:XCcT<!^aD.#61i8-XP9IY7NNV@6"q
%9@T4c-D@:-h<P_3F+Bu&n9kUXWC@N%e;:eG$*@D5r!#ur8USR:P^-%AhBFi:gE?G+6[V4%b.*ubCkUBg-FM/c&PP\2aL9^0pV,L(
%lOr>)g5k^X:K5D\S.2:;r.ldu0ur_Y;"XM_#d'FfgLYZ$=I+c'lZEA@Ui99L3nON0auihGU`Xi5)Hi_0S?W3.T(0"Eh>P%(+l+$C
%mQ_^"oEg;X]hY^E,]o$c<q)K+7Un":)Xq@O["ckM`*e]=V"*H7kZsj.^#(c/O;?fq%XO%$q-PtYL_Tc-JFW9P?YYKkj,?grrQd8u
%$[^*m>c8aVUM[,UM4J!hZ%W7"YXbha1cOfHF*M`n[_)[&rJca.Q%(a0/*Qp9H"1=9Wc/RoGh=*82EiI@+GuK;YIE9c1!&adV`%N_
%<Oud3><pV25ktb!^sE'a-s+hK#gq\+5=5%QJG?<5N2dn,B/p?qYpu'R.3cSY`@Aq!BYYep1k%^^,Eh?O]KGN=\1s%tW:VM6q:1,S
%"40B6..`Skr8:pQZXG)C:4?Lagg=T42O2)gn8d/:94T9UicLuTX=QA,)EenSdnp4C9OkuFSApOaY2]oFJW=u\HL"a^'&5dokjWC'
%R:3lLH<d34NV!@7`s&W;g(1gY"C`LhE",1NM[m&\e8RSm/;<Q%aBL1T_4q:mQr-]<ihW>md+>f_kmm3(dpi?5)p>2H=f`g7!up1o
%O"t#DdBYp4;_N4l%3]bo,M5ThLj)N#\!BjTL\)U8Kd'a[D+[\[+0H0<_dj#hODdM"4=\7[VJK1BPr$s&is*G^DK]gYq7DL+O5fI4
%G<S5!i1U9"'ic\#.`4Pb'piN,LQK7a&0Oif$kAmSmhI.@SIL8\]T;C!GYa\_P`cNWnZQWmG:p5j0Wq7,6\UR;-B3X*D5n[+mp.OA
%BsD/sdRb!S'-c*GJ\<`6&gTdmO82R.6d+qCN#Da*AFN%;AQ"K:'G=+.h9Etg_D]JFQ9`2gLRM)U,/p:piQl25!^*QF0h%b]&JU>n
%3i`d">YAE5hU:\o]E'C1!U_#/MJXLm5fOSu!;*I>#0_s!_K*LqU/CpX>-.=aH1E]T1=idPVP?WC=*m^89=kSg#6*+8hM.&A-^)ZB
%P75U@b632oYp7=Djo`\FXt)'4nMJpfkqV-N'NjW]o#fTH!C6S=ZQ/!Hg:s.Hc2D:SYCOlnnKaS:k[oMu8">/AR`-G1+f+!a[fWS&
%b0%m['"^K>\8YV:oOHCD<9(_Cn\Z>EO&QKe_W(t/M+V(<V]07?XHII`E.!P]B!@&(Bb>ig3R$dfpG9d`/qlpIUr;XRnmoOnC12Sn
%-36f2B4Zc\1Caang+"_+DBl+(!`LMJ%F;Od:IE<Q^I=0gP&Q:NVR%JUY*?gqD/l<*&[Kl19Wp=7ajnooZ6-1Q=e:pr4gj7=(CVN(
%T706LK0ZI5.9#6d'JS33L"u'8bGGGpH8h+F:F`I%B\@:_7sFV@97ZT+@6V=#Q#d#"6OE#'fn1.N@dbN+Lc"4]ZE9PsSlS=[3b&([
%H(7R(Uk\=mM(_[+1nGIDFRLH@ppEIA'\+`9o+J?!IKhbnP/84a;I0_<qIM8aH(\!^JLRHE(ZDjF\0\+p8'7`,BR7E^^._AQNXp@A
%gm`c3pY=8mZih!Yeh)?7YRMbW&W+XNoUMUm5c"\_I_l'GqF@j:I"i+gc`F[/.)Ula1@g$]XBupnZT]*Qr]2/2O\N$QNIa(i,kq^T
%jL*Z`NGb/Eh[mFk]Jf^_,kKuUA8\08&,Y4a*#:"B>K+)V5:2^0@/3J#8kL<qM.R%Lj6]2QiGT6eAiu:t&#Ss.>@re04H$Pb1F[=2
%\GhH=;-;136AdHbW&j_kh;Vbii4X('7`iI`?&b!79_=`XSVJ@DafQHOD4(;I<@+>IEbD2*4=(Q=0oPR[4#7Tt2u%qUmrh3IocUF8
%4bGnWL;=)2'DW4@D[5a\jVMS!1Lu,[,n.2Fh[t<;.nC?5[l^Zh0AsjQW'rlnKpm.>T!3FTBOR3D^l6#QeE[GIka=I5^:Q];!gUE!
%,OFKEa/=dJ1!))OFqIuBJ/[X*'1udNQ/cq9M#l,8Xu;mAjVB(eZ%)B9V>'D^7?';_i.ufBASG%\,,%tO</6a?[t#aZG(`f7Jh'Qt
%k\pUpC,:`;o#S-R@3%!.:g?2W`\W&5*[KX@6;A-^!%(Pj.SM(baGEk9n#F])<tZZXo"&-NWig^1@\V!`i(mY8=D$;]2im\pI*XSn
%\S=>ljAR9VL@o$/ei&'[?84&NN)8Q@;4C!ta.:AY=0Z2D<84Y;HNF7?7P<1DU.BsBh9m[3b3KAMK:jo*@ARR2(8FMS*7Wo@K)XWa
%I#]herg:jOm,ud!q*$g:jr!:?cGA_d<c[Ah*]dgam/i$1kI?oHOJ$j16f+3I"W:@GV/=8@)ibO:+dflEd):EAZ^c!-h^F9L]E[Aq
%otmc-a!5\;$#RQ/*Fcua4o8,Ce7A[W\7B^3I0$^I+c%9tKs*/uX_6<qZ#D#S@#Imja'516c9;G14HfnB:Vf:9QTIe.qI-Y668mtc
%*)P-qRg.CN>1TsMa*c+/#f2((\[dFpi#u1UPS`2H3+%:H'#'BfM63:6hn,A=JJ='Q'?sZhDrs2@b>F(F`)OW7VC](Q,cn2jFT<cL
%ge6Z.Y,K0q)/p<On;pauKLACHoM?#^>:NZeo2Xjt0rm&"IXl)"?-=kl:O*06FCo?sQuc'O`71Dlk%FHm0/,"d8]3:[Lm6(0`fTE=
%,2KnS,3Kf&TJCdD^IkekS3]')@!p6\IW-(V1W1nbEcGh(PIbU\Hgb:<Q+$IPJ3]eGs!sCp'nJCu5U"&4VcEB%#$G,^-<*QY"6UMa
%8!p_J#)hQtpR$;e!.l+g>>`dW$s289OK)AWH:h).1K;sNcKAiHHF@;/jUQe7p7Cp_GBQjbJAEJPI7!iqcjEh\%C)\kmg:%7A&CHe
%b+c;#*&_m5KUm?1&7F%<O.!85#cAOqKD(\bk_f"$,H>-Pl.?>rTKjEAn(PI\>Tpum8D-i4=+#KjKFTKE4`\Zu2,H3j9RK`C)$3PQ
%MQ68'(cfNT1otpU,AJ00S;?t@F[oLC0FkgGVEW]$;&_Vg<)_iX1/_8EhE-(fb?*%Y5W(K0)BWFA(]dDpB/_]mqK3s=$,3<lmOKom
%6Q\@R-)d(MB^$M5^tdp(s*fU50n+oiYJ^HS\XIH3K+9h'5udM%<pL)uDG3ds@e"4aen,K=-1HVi0%[mb:INjcSDT74(@8H;nF*jb
%rZk?l]L/c8$*`0a=^;&,4=a$SCu#-<6/i5H*)RlZ[_S!3<n7/,KoC]%9FiM[=b7?:G"UhdflJun"C/[7=?8/nC$Ia-^:'*L(n!1]
%5:th8Yfgf/!^82c+dQ+;6<@j2ZAH=SZfsgdNYHD-Gt5YLo)L\X)Dn24$7_&k9^ubC)VQVkHn*f>&nmis8Pq#cFea6U;+6<k+*g11
%N>tU@MF3_dOkV;Fd@XV%n[Y)F\nUe<P$+K.BbRGm^V+jd:1R2n$(B!#Z.X%aeZ&&5/s;ED4.5Un,gAihnM>3+;n;sang8Jcn0!+:
%$CHnPoA=c5;F@q9?Hr=H6I9'?hruER^m2'5fi-s.\r0#PFcJHm$j&kP&Rf&]mRW"p=a4I8]>!Q8:hl-L$\.(./q'Ct0*$UR7[?5s
%S>Y&kIV!N',W9Y=]pJD[)K=(Ip5$4l#UktnAt`PR7mnEa"PH,@Z*>OGZV$n[aJ,1!mY[*&k4#`&#ab^C0AkX`H5@2C'basC'k/nA
%.8c2b:>Y?`W1u4E=X\4p-:1_gHLPpMU/\U$l3!QJQsT9Xj5)e\1s%5>*+Q?l/OjV6dbQN_l1Y)4],qP3aRo-:h0jVA)C>HW>,mi>
%+CtCY.4mAg[B+@=p^C7a[_d6$#PjS]C@-"Qm=>@%Y/F5ZIjW5)#js&sjg9^].'m"t*nHDH^4$"]N?=-:^j*0/[a;BG8-3aNKomT2
%9n)M<+(0gS9d25G$_63-V-hgfM+p;r,^bhWKO?iuH5-bB,oLhK"-5;!2.@S)r!*EMISuXJXJr]hNQCQPqQ;>deT>Odc?lZrB9lIZ
%#QB7HVl9(sl_"a`cY2YF,WT_,EI4aPe%EYgTechrU]:hd*8+:PQm[Dh9bXmPn-72ja1bULBkpbj!0W:#5Yq&m[&c>(`@3hX@3HTs
%Mk1V*m2_p<,&tN/0\#4&TQSg2Y)Fd1WHQE5:80<75S`5=+2EbN89ZQje=a?#J\rTOCB-dA934d+D79WM85@Th/<\'o(ekJ(7q!_E
%a5JLRUgq8:+LHcl+n,Y;5pjrTLqi5/Wl%VU->7'45[dW^SUUnYXbK3\W?WZMjM#UL=aL?iD:_=:Lut#(<5[Qi,R5G#Y-a>8-##A*
%X2,Y<G[^sa\0C)>V.dIfZ0;I-9p1Ip(?kVU>"r9m1n\Bl'g=W+#befhJ1`+1Jc&F-V=#UrqS.[a;_k0:F:8B'p"gka^3Ja,";e6Z
%0<'D`oSd^Kd__H5`?^ga8[0+/OsRJ=idRi'eB%VROQpHV,]iU1\V?DT]4rHQ2D7l7["+]'ZZ'[SL.<98\>l;^3#GA[1)LDAh51H;
%I])L7Lh7;]ZTNODUS`YEYp`>#Xf2f4TGH'Sgu'=%M'-I_-ia`7/6ZlYei:WdUFp1]<8?</Z0^KuW%rK,/V[5Zi,DsNEDOtsU9927
%qIZ2ees(h4W,b&J>(*9'16G]H"Y^Z_O%k92qM6i^bW%/G8]^T%e'IY2-VWXs^u90bpWeSQ;:h0c#h5\=RHI-*+i:.k:W1c5n^)5n
%h8Fr*"tt(#[7fR.0[k!8X@_[]\m@th_k<Sn$qMXrZE0hYN*ZL'/89tj*^8@T>$,D]\.u@h9em;-MY\\nq:Y%iP^p]?o?acR$SI*t
%$!Sm`/>[5b:Je"hAlH+$ZLWCGiW1C\<Mq-,XMW>GmSE.K2WL("gBZ[kM'o=TjI`ChO4r&.f9L6bPb$r7XXDYqpq,?>\@t;:[KdBm
%S?.E#rYmrod<S#K-.;Zh)"`!7lq?,bY/0h\JGJ*<I!'0C9*;X:c8LAu4?Vd1F5_?$k!Y<K(`QR,Y]p<dh.'gub-Al"jHZ'21b1kF
%m3pXb]>;JH++?[.:ERJj1jX5\C[#0O^cjsbQG5bEf!I0jRVqjLm.*HZ>.;I@k>MP;#)Rd4'hs'M(c&r?+DY5iX:+U0*b2qe\lX*i
%J6>Y:o.DJn><'#(0iXY$_/>mtc"#N;pjrs4N[dj;'ho+_B8p1J+C,=P>@pbIojdb_hQ+7RrgLMas6b#m)F!.H7>RQF%6XHIQC[2p
%blN*H%[ON-1kaIUX@:H$c=5ocP=P-@%",<X"Zr:HE!KUIbadl`8`>;5EdItM59<;daq^CWe#?LWb4lSdpe&?:jLpYCIsqUY6MPKT
%JV^!F=b.ggLK8lSfX]udQVA[ENrt!!9@`!`*5#KDqcP*"T71D*jFg4$ZEkI70T11*^pEWBk86Wlj)h=90!`$&0Nd1.nt"=MghlC=
%S:Z(55Fa2/mi@^9Mf2DG(*Um`IcE<W&+tZaZ<DPN&DZ2L:ugm2lE%:Q)d0`So]H`\pq0pq*[fYom(1r%$@p,B,'0[`;bP3I72:.t
%:f5MqAbINTJY&,`Y,5GYH$srV.I$pF]L9W?&c\"k6Jr)_QUVl'H7ZFbUM3T,8eCbMN`;g0)]Am5-C),^[NFfhL\'5$9=S]&1fW%)
%#3O=6FbVdmB7UB.r=rr&:`Eq\P1ZQ6?B$@@E_HuW.ReVT9H9&uIPrA,;r`i8=)3_Yg^&EmNFE\n*&'4P]1cfg>?#(`DS*+CYau7G
%b6;$mR)G_^L$4XCYFm+(>1g_pnG\D,/6dlRjl&]QIIbq<_O?A:.e99rmHM`9"E17tiC1g9pd=jX[:KXogmh/PdE70'h+BRTCAp7O
%?P];<co/'@$G)DqkVMO^O,L[3%Z3!Cp!Rn$X^f]1VBqM=?+N9:RmJps@co">n3&+QZE2GW"->c`%DQo5W,)=A[:R#)6Sh`:g/*\6
%<\K[bHF%d>Hn)$6'Zr5K**^B2(,i_pYO<8bW"MP/N)C0q?acOIfc#Pf?S*c48EBq=*&dJY+qNN-GDk#R5"@%''q1!Rc1I[`WhhS0
%m'ODpZHaG,.896mDH13&Gs0$#/2b1_;oGt'5SNt&7U1fr&&\k.eHRi6e>@iL"8Q++VbLaAL(@(,9IE!$5#rG0>iZ@.Rc(k[6!^iQ
%geNJojc,Q5)Gk;4NEFtcn[h(Bbgn9s\'[]co'+6]VFX,MC/XRJc9,(q'`)k0,3QpTCq,m*D<i4^<dC!?>,^^3a?tZJ/!QLEE$1C_
%M/0*^XAB$o'/as(l?*[[^9j_<i6(N!;`ce,KSSShIuR:*>LQ`bj"jKqh2L&olcfc7[m(jH[<'kKN*j+Qnqjn2]hZ!7&<`2cq(-[k
%X=,b3o7jDid(K8s*4L8l]Dr>F=k<#]:PL'Y)":m?a^I3s^^Q;Tk_+e*X7P-,B+U4eeKP'E\u50:eV0cLHgprAH`56/=4[_)8Og+_
%b]Lag1%.+/9rTc/!^YFm=%?^WZl`Pd/.</0+=Dq!0H8J<-F'GXK$r:=dHXl/lj%4*0h77s<WG7t]A_jL(HoPt.,ie-1F"Eb"=Fhp
%EV_]:Qp[V(YDD/spiQ:<4gAR/^gV#GN$jNK$,<d**f6QgfWkK$;5e4cp?Sj,_Pibq?Q\abEkZL1+oC"S,&`[tl;r%'a?SaUa:ob<
%XCf,<JH<gl4S#`fWRS<^(s/ZQ)d1t(<@VLX4&otQ-H7/_s#SLI0rcRGG!NIq&%A?k-&A6&nAP<h(rP<d0?nDrP?r0OQ43bSU+#7Z
%(!*WG'U-WSLHn:>2XJeX;4URN`d\*4dYt_fE"S3&_O8]>YU3lP%l9/#h_db:Z\C`cFu39d5C..`!`[R&jG4fNDTmc/$D.aLo']_q
%msiFFJa`g1-beq*jK0#1Ok=STeNter.?,@88lPq"o;`d%9bAj!Kb1jbqh]0LUjWJ(>^:6%2?64r&^Fc!N-'coC&%mg,&E!!kYh9$
%='mD^G2dR8-^aK$[g17c#0I]<ajB$C`^_$aWK%"qDgj)nRE=9T*:"ORic04Lg/^oF<Gg"nIU\:eJQ+(tPql5a%rm.m/Pb]H*NHFl
%qD,6nL'O#Bi333kM+!O]B$=#`#FlC1X0em&<MK\A"hJuT\o"jZ6P:.go)bU_)3@>Y"OJs^BVj?+M#$k/K=]V0fRE!1\A<"^DZCpa
%DS`YoV5i(%blLBbj%on2nM+pPCI3-FJo=LB6%r$6FYloKP\[OE5^f_u<sFF5Oi/\c=G7-&_LEgHSI$)`R=IDChD!&?Q3W0&jC;";
%7Vk-fo8Qpo(LOHmLJ0J6DLLmQk*ckJq56^.1XtcXMTf<bR00X0OGg(]b&YR\1:"NZ0mI0kRS)!e.2XTqA4hT+$==_joa^5\r6lF/
%G'^,fFTk,kR9fmN%L;t?IX"1"htl>;J,a@!+2ZoUXt?f@9m:aKg*u4A/cI&h_Cg*)rg@4QhP%kbUOn_GV!.gq?Vdl\5j"K,m;pUB
%Z!gY%OlM&G\eG.DgNitn?+jA&q]^uFD=2m1Ylh/foJDX&YNq'$@F`q$_PM;*gSj_$b%G_orRIq?j$S;#O[8qtPd-XM0N!l23gNK4
%QDDtn2$*Wd66c#"/'@^BhZ712*[Q"lJ^X\AqS*cE>E!(O6V$GT&BGPJi?HZDQ#B4r//^:DOkG=E5go>;IuD<#0F5"fb:9/d*"^Bf
%WLHbZX+USG@OEV]Mi><,O^9a(?<\87<,_gV#cEjX.+Z!uSTtl"VMj"t#n\$5SBH<r%LD>pEI_K;<$INA-4$21EODNNC0Jm&P3^rP
%0RAP,Y:*Ltf@Q68(4-FNf73^l\GW"'V^H[ObQ*`!UbbLVnelgobh[%edS[1i[K%k=E)EY*aSb'H-`9?[""j`qjYhh&=W9L`@u+eI
%URcdEb=*h^JHr$ogGgL_CPJ\&7I]$X\6T6uT+qOCiXkFYVetZQ74JZ];I&C*_YlVP5F'uR0e8DEeRQ['9*-:!kF$e7S8&V'6LV%I
%>_GNI@DUob5@1]C[1SS!'l0:2?oG7AB#JQfc3ch5Xun%S<(-("G#o_gY9$g7CA>g\GYAN2=?M_F=KsQ<k>j]+_'0(TpZ?YK;k`'[
%U5Rrrb^8PHhkQ+#H4Xfa5u,BOQ?9T^C=!\@coC<B+EOi_MhDKcplY8P.)#T#J\@ME!EYnbPDpjs$a&:dO,1X/BhVZRpk;f/c*>gk
%iE3nIDh-Fb&a=srU<*R34AEB<;4V.gXjBSa^F^SaL?,)\X5p*Pg$@U7dIO!gVF.G(mE1MeEcMr3?^$Wj97E=8*t9X5)NRs1JN6:u
%MLRMJTH0a7[7<f]ET49=W=f>+q#4+SX01T61L+tk[rQQR=b'lXM2I#cJ\h*<=.T9%4E'$Y<+(FJ)T#9MiAaV?80o&sPG./F;t&>E
%<8Ek'n2S6\jk8jZ9d63%l\#`2hm*a?o%IMdi/kra29![[Nk91PlfC(!D$-"-N+2/[1!g_"NXrV1a$\\q_uiWU7j62E7UrB7)dp:6
%.>f=b=.ld-Rftd2mZU+!J;p7-UYj0"F_2%If#(Z7fqIDSXPX:6!N@r`hqd*I!,,.$CX8N'pbe58R_#XlXBm+7++]t&&M(QOnd8W2
%]>L]_=B5-OSTr>TUIH"lB/'g>)h`Q[L02>a+s3,0(nD]k"\7F-ds*b&]<o)QSDN:/(1_IX-4fq'(^DmN\N;ktq=RAH1%6u-%(-8J
%6Q-m'Jp%C5Zu)@RBB\U5'S%MaC-WQ0M4GCAWAaa72(9E/j4MQM#JRHY!2s1OpnJ`H];/Kb3aqQ8-"S24=Ee/B<[_P,V>kS70@C6p
%;G&`*:^^DAi("UHB:CeL-=W/rp)VSe3NYPmF^Dk)U7u%q1pPMU>_-s3HfSO+<%ARHkU-5,M(aZ)eF,%tjc>J)X-q.oIKIT;KOK3P
%AMt6.iPZ42\s]O^Tad`icWi&n5Ng)m<u=)e0^Mb^J>MMF0CSL&fI'Z:M?]Qf'cKHJ(:(rEQP:loIDAaW[`'9?%lV+]YsT8H]B&4Z
%5+ApJ&I#@18k=K2p0M`0ZNNRjSYAV7q7!"b=`Uuf%O*Js23coo%GBAa]UIcuJrX3$.IRopb&h'BHYm8[UZSpWPub;Hot\=p]J=8a
%>@4LHham(]WofIS+_O9Tk8m>4AUgCY/#1_*dJK&5YpcjjG3`YGq^W_]J4sqte%M,W>tX-m@aFJ_M/OJ-*\&VY^X'H/bWnD#4K=q`
%?j<D\[u7"1VNhLfD78VC[(8\o=!]La*C/p+B&Gb!dH,^DW]Sj`!-i+C0"Rti1d;r<_[%$Ilg(FJM\f3`If8l=$Ts%En-u?,^&,\:
%(.V!`?'%,ki#?ZE&m:lKO\3Hm0%Yrp05t9d4[Q1k*SG4G0q:!*f(InVJ[i%o!P)(-VXD+hgD0-L6\3f#(d7gPo$(K&7#7=OP`nBI
%7isu_>)*@1o8<u=SQ6gD8<V?Ogu@9g&0hKS3oL9I+nLhnAON`Mo6+4Y>j7:'7a(\B?1o.bXo\K[Lioo6+!^/c"#Qk3K1(hA<2Trg
%2+W!MG``.(k`G.WYMOb9pX@Jl%VXE`_cIi$%sVC9<e\VEj9FCr]61C9!Asi9$I@?:Z-;K#[PYDdpjGkDX\Js]LC)HI-oFkt6-K)`
%$I>PEm'A9s[)Op%0>N:!j/l..1Fj[#B1`ZU7mY$X2%s'#HFMlVZW[Y!jXHH$>ptHTM-8Ydf]F@EKEu[XQ:k.l[ZqnI;Rc;C+\kP>
%B,:O'pJ2mP+nZ/fkI#]pj(3`PXb=F_E/"3$-paa(chjcr;BGY^fk-pFP?CnYL=!r;Gs1.o@qSS1p^H1Pa1D4sE.@TFa2da\1(@,c
%00@L)e2rZr4#4E2?Yua!<s_V"g_98G$D1XA(Ih'a2a[/SQO$niropsW?Io\b?4p*'pUs.K8ep2kp>r>WWctuBN>3&j<.n"2DhDn-
%UEWc>C$@^!ollaoY8-'T8EJm[nma9184$\^o^BN:=9C:k8hRu1s8=_X`4r9%UaO9fC^'^^duHMF_C%)MIL]tmR:NFQC+tV^#lWrc
%Uif-gU>#$hL`gHQHZ.hR^:="=5*h'pU4R'ROh6FWd(KC#&&oMNQO77qG'%mk0>[3"Wn,DU)"C66gYeHibJ<N45.Tp?<*Q[+6K^+:
%*K8eV_M)&rT;@/ahDLIF*ZkKR1p"/jmEfJtTr:*rri/34ha4>G\]V8(<A]p?AOl0LB4&Mf1s.)_p>3j%o,R_MM(/R/6RAO+Tel_P
%b"rNiVQE0aBO,/2brk]k;Pf/^cR(0*1f]EPs5s42E`+EuBFb1]>J)_`#_h\?A=e39(Xk1dpY7KYZX4`EOj=IpBEmMq`6hqGE$.f$
%3@H]9[$38r$Lplb1?hb!Y9jo&ElfRQ;+ht`&<nL(,b2;tbYcpY<5n4V,@fP3ErC[GCP0[6:u!&M_XZn<AbA7>pKQRSL;X=<T\VIJ
%8m`_0=d`(<LICGL0od)K7B/:CG:[j3`$>.Pbi[9\3&2-HZ;(h-diC'$=+iFsKS."k_B&-r"B%`2U96<LgKP3WJ<+6J8@>LP6Jt"T
%N[g5fpN`@p'?5bq2fWa-bU=T@fQTiLl>5IX1Vk_]5#ti618f+6>:F!E7+@ls5*PRar:RHQ")%"=hms'A*!Ek(*,6SGK.ihWGrL,C
%dj=%Ke92YlAr$jlI@Bt^W&qg>+@$12DpuM@N\u,X-NU#t9*I[N)Pa*26SO)ieCCBW&g[<E"pp"FS?bga!c2@B4Y,Ejk8@841!5>q
%!@XET/+S`LoiD\)+?kBf%bULRftMsSQ]#Y`&OOLkRR:B.FJU<Pm.cfq%/*HpBXPLH/T1rp&OWXooDqWqnn,/&*TN@\'_g4]5J;_)
%o?>dBEI[)eXZ.%-:\'q>G1Z+)So@l8:[<VL*T"m!%^7DP'$8t3cCri=BA(3nmmLq*k\3&.ht)72^5&R/&aPjh\YAYmH7XO73/59t
%@/[4nr`f(C6P&:L^=cD`V]+aJGl,_='7tiWb3SdALDk*4I7+\""WSB/c0C%5cH-lb+ms@C^RD+U"`*0t/'f0(`UmD_,3n:$?]>$`
%@[:aS9c^m3RVs9*.\^XTrK$;-.<FM,dDe=F.IW9&KGDXV26@.m;5^#A.b39jT)5;/KX>?VLg314D\aK]kOghAWO&M(.&j9iq#ouu
%2e3B#Fg$\`.lj2!'dTZ!Te*/&[V@Oan)s*+:J<I@'9Pg6n[1lr8?8h:0ZCcm!"!U??(*UZ>j1hlK/-@f>h,39'>5eWL+hH-gO5YH
%q!pgX-*Ua%oRnY[FN^Eh:kCneNi^0J:#sV@b(JE1:%\5]bh@kZ%o1(7m!Q!+AEI)k#kn;BLV8GN\nm%RDu7u<SqIKEl>Q.)r;L]k
%T@4\qG">CQTa1B+'umpjSh,d\Rp5dHB;o<l>?:MbUh5$tDD,,o(2I$#g=[QBG:rYaOUBDF+cPA5=1,8?1;*AN8QhfS8=[h:UYb5T
%#b^+*Ykjp4WNB$'^P+/[]mA7/NSlCVDS2$bS]P)s`P+F96)AF%U1EjRK+(>27F@3tR-OLZ:NpHfbtp`A^sQ8I,54K)KWZl:gj/"4
%M4Tp!IVi"'+S*<9k2e#G=i66!L/jT3R<6R/`P:6ll+fmhA4cjp8RWQ\2PkLGB83&3X_s^68kD9R;S\HDAgC0i0e#Z*9?!os24-'R
%\"3c+qg\W!Z4DT9Ml5rc^QblU/M@9Lo#fo=D<.b7hZ>@5?",f@`R2'>1TcDGS3jLZ$Mj!@*qFdVV%DWA$R8:9:Ap1>:AYt"EUKan
%Bh>uAY.)L1akppN#hnh>qdr!As1-!Z^^a&YF(c;MS`b&aV$qp@%NuNu00k79]oKSu72J2]]oS*m<k4Du@)gtP[HtC6PX+5%Qk9-7
%"*7</;aMWTd-*Q2/.+^6Z-);,C,#n6)l;[dPl5?oNE.csOJf:8&f8:9kGHT&h5=;hI]LIEb"ksXWo[1Zq/B,];bg(926C'RNNm$d
%La'3LqiPTJ1Hm"PBER=H%LjU"OAG:FonLtZmc@24]J`5CD5Qhp3"-Pq(.$/*@<M?6T0D?fXtq;eRH)EEE+E18;s`i</8gPpjiOk,
%r:0nbL4P5&86p)r4hl"p]+duUYOS,V5LtLiEc.N:Bj2l>6A2Pg"*]tL4lMa/4e56_,g_U7kdE9o"PtVor1!X6[DXT^QV.hPBhr9T
%muPNS^O,on&Sb2tdJFs_/sn-U*_PI*h<R=-7Os/:o_JH2[t8Uc$%'5DlJ0%2r;:I4QP3H6,A$@[*Zk.B]$;N?AWLJ6En@=tJq,>"
%M/U(Tb(.tcqFPIaP2.M=%\1<:>90-sR$r&N7/(E`_41P1qa,De.aGBbXr555oraFkh<(:;+B&<Ob.iFh9elEjdsHSe!DDB@D7Vj!
%+FA7r#h9W#1pqhSifh.!MCe988SM9cdmOFA:cQX?E@,aV'GPbKb896u@KBs2J7#b4o<F`nAdS1R^@'31:CscN]&B*VSZ5En"N[<*
%rd<_o+!3q:=).h_5)VEY;Xa[4PJhPDR7YtJ#CsJl,&N^PfiQ;k45(+Wqg!^%ggc'L=#otCn!TT(&S=ns3qC4B+H8agW8Anc1=MeP
%C?V3%&FKb0(`hNsWM/TB:._mK\%1I9VA%Z^8lqEk3&[,-%l"ZbfVN$Gmp'(/XX1+:beX;+<#ljiI.I48jUVm%J[S;]nLS+K*7/6_
%pV_)JduC[q*25Xs:ardL@1tg"f=63(,`"^dYs*VNeJ70th4g"SKf^Fl"=t$L!k3F;/(2ku[Tda`'SMhH&>"P,:p0h1)-7XXQ+dSN
%e#&%[9;Sgk/%\_5/>Xp4<Jj!eE=(V1=qVLJaaTA!*1VCoqt;#U""H)de4@9mrIEgj'UoXO(m2S8a(-tsX:jV/aRFSh6Tp3JFq+_l
%%Ue)!.\^;mF9Dl].q4h=]AMFRZ+#Mu=m:f\X-IH(Am5kH*N(1$rn4cL6TW?`2RkW6e$i'oka"0;.Qn-5kcb8Iq2>.Ja:9Uk5JtZS
%f:CqGBqKboL\2=L@'<TgCI7$'mgu.=[AG=VQ:*4_>sVuX%Z2[6=-KpS/"2:h^ZUu=(1:Ygnqqd)Tg1a\U:*^7fd^oY6M12Mj3Ngu
%J&c"rFq3bj"Q_LnX?T/a.8P%/b,f*gZ(kh_OQg</Bmb.2nV$eBr^\gj$,3oF%V`JtRO7.*LRm%toaoT+s2o6<h.,c$ed@[G9h(VP
%??4u.Tbc:&0p.2Uhn!=eX;C)(F2G.5?4oR*1[K6RUa'4_OOP*BfaU:BeYLQ$(Hugi2S=83qu&o:\'ufJJ[b0+[)s[2CFHZ5Q>6>J
%MjfkD6FB]J?sJQt-sDI!/EuK^=0IV5pRL1]T5Sbi<sV?Do?4<LegMFm2T[";gI=2apF\XXk6S%%^kh96I:lQCGYXt47"3.9D@SkD
%K^:B$AQ%bMC*P-T'`Ap%EA.%=coHB27IiO)E_V\r="Bp$:8:S'-4@3m.[];aCD]5t9cT:J;>R7hBXqd$Q!0&A6i!$.q>MJPN,-d$
%3JJ3_7gKLJlj(l@6>0YJ?qrZ])rrSs3t',S4T,TtOt3<P\AcNSU]Cnp%6)7N30PX:o@9i]I<Ziu(-`f.L"o-hof.-CehqZ',OR.F
%$e;g%0QKi(FpF2Ro*PdN-Q<=X&4J+F5@87CM#nT/!98FY,'4)Gga-XFbe"N$cTneDU7WZ_L\*R-NRqId+0<bP#rqs/Nnl<8bU"1(
%M:W<&ORDMRHgSS<Ve9+F@2@1\P;4\67MrZ8rc1Il$cds+7Z$H6YdUjFmA+f1IGJ7P%<ph"-:8,n?)-ZOUU2&"=g:S0*KSE=ccLL4
%pCiegGsX:SMn;40R^^f8XGP!ggBZq7H;P4KR-t+*,+m\n](:r8YaXF)q0p'icb=%&Vf4"\ZAEL2NdEY2XWsjP[Drpq$O)k.Eu3%b
%qfdPbaS&pd@4a@TP!32DZQ'Y00RaJSU_,q^jiYVp.JU$-+U6T\ZkPS"..)D%POBTGk2L1iCu-j(dXt!$%fGqKT7(i,SOOMdnWf`W
%OGg2T&c)="\iER2Imi1AEM$k_bY>-,q"t_,XJROc=qKK$:]l=Y[O?M7Sb@HLK(Y"nLB>XI[NLaCF".4jas1X][69^pXW?l+%%Vi8
%PDuMKPnk;Z+tp#sGLO>&fMSK[In,SFOP<>l'_"otY#sVg2'g#PGj6[%Tn]fc0=8VA`sD7q+J?&8c.s"CiF30>.9WU-]UC7lOs*o3
%P8<)FX9M!2C5,l0GBn*+l;%$!%&9rdFP&2#DokeFR?R08OMpS1V(\it5I5JbjfD5H2/V'oU2=X,_^nA):Xd((pJ+ojo+(lDOa,nG
%anJA[AF?!kG\)?]E2]i(Zq)_0`qKBkT>J^V:.Qt?ZL?sEib/Kr7XG&p]_'WHN8dio_=A%io'u)jq=Deq4uZ05pSQnh6J*_nD=_)(
%2d0OUo4Eu@9C)6W2/D*+f)]1k"-)rTb#QShEKdNdkA`B&'?T.@^:T'`ehdPfAEH#X<,&kBUtfs6WCAY,ELc(We4P=a,"Z=;)q=_!
%luS+Z#kSkDj)dS[[DEWe_=:k&9of3F&OR^E5X*,u^YUR6GA'i\'*D5:'\hS`"Yaa"YIa39d>2Qe#L0V#3<I+1=X^m;*(IsT/d<g1
%`OZ7NI?5ggC!m[bI:tg.<fW1r>C&5'2PEVmL[%cD!9(L3;5&hdUuD%gnNcS1pAY<T*$PW,A"-fpN,3_G.XMD#Z`$oLX!!3OV<r)Q
%(<BjIkFu%6Tb`Z7"!nGFSt0MB[AEb)72:##[EB<9kNeh[W:aJa=7*"'KN,/HOu)k8G3W#tJO`0-USY6LCMKRa[ushDZjpFd9e]E+
%Q>8O<L5JXaZ:^p-BgL7AYdm8j_@6PI"<rtKP"i=94Dc%A@]Iu&f:@cKf*UTH"$0kh('AuK*o(<HDe%(ZPb]SoXulgYa."4$$2%87
%ONnCP1Jp1iXmi*bkXA/;GdXO6;%j.>6<TA%;QO@>."W0":KnEpXV*'<"/W%dT?g4dBuHQ#NZNRLi$i#?jf=7'7[KA$BuZd1!1Wn5
%'4>Ec<@Am,%*+tV`uFA!J0FH*OH9OJoGWZ/WG_aKWQJ!%("Mj+a2U1+c%2.J<+h58NqOdEBDqgF7#QH%fE<2',a=WTG:UXP!Np[T
%ooN0u[6`:-\Lm?'RUR6dD\5qkTs.),'L,3r$,#h8Z>%)]p92`ZX'QFH'c'A`p_:'Mc]B&tS=Z`k;95+!/t8RgTgo.0,%Zh2$)qsI
%S4[M0N2f(g%V^b0Hch6J]j3gL=(&MU318ub"O/DYF8[;XY>0_)$nU):7"c&h`!=ta1/l#oUX"1W22n99EY-c2Tc#0;rqn6C4h+b:
%.&)5W=8HMU0>p:_fXoQDgDV?[5b+8M+FC6,,3_L<o,.N$4.T3"f*[PQ?b8hd1I3JZM3Kc:NBT4)CX,U2+*U3qLZ!(<P6;,53+&F0
%+*=&9NYM+2?AlBWf`1C''5Ai..j@YXkoA8HAK^.7qgth36kY'(s(cn6dsdkNLEof)a,36,Ek#au\[>-@M2Aa/59s#m(B!C;D;J)f
%g=Od!Xg_L4Qf<bU;;foZ]iRo8rXrLtlV8&.?p,\"GbSn5<61#2?J3mF=qWnJ077.fTrL(Kl%h;5^IlW^/Mk+qgM>"$L*<p)7c4HL
%-NRc4nQTN;HRS`nRns,=K[XkljBOn9'b&WJVZ6NWnGuN1;nh0WI(i/]C"PCd"1#qEMkq*^TdQ8.'Kcc-0!_?]P*96CYb+%8&)NG1
%<bcf?fmj;<G3QqZ\d"-m`7DY$'+,/BjoWSQ`49O`F[5Wge-PfjSG(;sRqo)Q[MND.jIIhrK.*#-+j0NCWiAE>Z9JHuoDUqTk1$D9
%nhsE:W'a;aJafuj>+pbU9cI+#RL<6%CP*2#8#Vq#l(YuW:IH^7^h?QiC4"i^771gD@f(l&QlXQn)=F&a.SZHT?.gBBeX">%5?jc8
%q1b&a39."ccdrZcD6>6:iX+W5Q5Fb('$nVEMMdHo+4/JLSbU]&h5o_VHWh/MKobnH24tA[eb8h&E&Yb)7Kt%8jSg<TloIZS'VSi7
%a6!M.jV^1V`s?"?;F&DIc<R\T<cHC%8^5Il1[i\_^D5&KPj*:_]'SJPgV1T10gg,Dqj)^*R3E%o?.2j"UXH!(?rt0dcKh?nWZT!M
%2\A*4H-]u+(F43$37bQqNo!DlkU+HdS=")3Yp'-4ZiIn<L7I[If>RV:X]N)C%BAVC?jg]thZ4b<<NFGI'J1hY$&;5%P)#rbDGjmA
%k*eN:C9bYC_ni/41eD^OTK=8r/<k.Q\;=dL*WHJmN84rud!c$]8pZt[lA$,Uo5)sQ:U41E2D6hqI7h@g[;5?CE'[V';lDdrBns9g
%Z1?aTNXRY1;Tq:9dc"u_hZc>WP1S4^8A5lnW*\F`1,pl,A"Qc?n?0jq7uJ+XZa+QLZkg)RTiiRC:RE9sL\X*N^/1$eoI%[V-f&`!
%R9fL%Q&N?!V9rO:p1I'W2gg6Z<q^E5MU;#?!V<GXk+-;6:@Y+0RFin\5RhDrC>8lucELP&S"a0bUEqT:rHW)2<43JON3\rj];ZQ^
%(,oY8h^r:`Qg-CL^KM!BZ3!4VqIo_Ia/;eV?BOLH[8\Q02Xte1Vs+;DL77)!+!qMdVQiTGHl"2'R`$-CRtqJEDq;U:i7;XrM^*2W
%<gjmrm8/OD(\+E=S8=^/Vtm51JC@K'f(`/V;_:+1>.mE4!IJt90q0'fj:L:R!*To-1MR4eH4mp;Rt09qd,NTToM5dpLh]?&*mn60
%d`seee`Vn'l;([oXYQ_l9!F+7SVZuW+X@"Y["d#f(s0<@?k"A"SGg8@%`'+*s""GJIRn>jT<!H^PT*i/UmFqs&rk9'ks]e((h$C9
%\2-2<s!;u2!VDIF6/;3#IT`]=qSZpr<VaQeDs^a87dKlsh(/jD5JcXh0Rp'N+RC/g`MMeV\H2@bm%P>eNg%O3d4'X!F!cA3.$Tuk
%rp<H8ps2/U@098s$;mS&eq-XN>ahs=3\LZiFN7lYi_PoAf<L%#0*Gr6r=XOAg`d+T"^tC1'OkL.YUmV+.s+6NPBe=6!QAW%mYM:o
%CC<RTm%_P6!,eGhqrr<rX\j5H3[j@H1\@^(p@M<mTs[RIPV0@n!!@FF%K2ie\"A(>EBsl?g:\>b'g^@5dSkiaQ2cn3=&B21&2XH#
%PfIsgp#TuLSBX.nOJ[WY0?8Zif\Iki802o1glHVBD:l5tRN.-.e7HV`Z_Z5<s"BJ[7m"Th0IXc(96YrPL="ZoPORoj9^"=JoR1Zc
%@@?ua_aSYc/pc-7]/q)f<>]j<</k<3QTaC`!b(Ou31E90Z5,VM+##[%IV&TRg5c+Q6*cZRUP`#mIDf(k^(T.QJ.&9U12lkL`#,L^
%b01hScDUt6b9YT:+GN2gL,q0sfAi:)lJ0;)RQAqPnUpbVV:6s(lBC,[(Q#dHIgEkJWi7#e([_YIFa%l%iH;&3,*=`+@5h<BIa;Y\
%^&e52oOu3FeA\&CnQf=bU5WMD7&QQSTN!p#88mu"Y?Ql.r7!X+HaPh:<EZ3aRZljbE4CXs?Gl2'7Pksj_,P3;C8nRjCu@Q"%j>l,
%3E>7EQI.6-^=N2oP:M3A7n;q(C/iWIOeX!gL!"DVk_GS\'R%OCE9e'uVfi1gk,$3C68[bZ#Os'5S?5]ld5Z_@\eT:`=eTf_cs[qG
%k_'kF'Mt9>"^??pPld&<fp8C&35f8e:O*Q7&9<F['T(P*G(lTGnrVh:dG-Yq1'^#Z":*I$3)(koSFS<1\[JfN(9-nU=f?Nr"BAWs
%FW(,bL5dKj1Ar.5.bi5.r_mIMn_:8(H((WETg@om<\e:mA#,]1k@QNJ#DG<@mSUqN/_%Yt?;^*,eHMW(!*@'!]6[M,\m%*+SVGYT
%aJeT(B'0eK5uL"G/]UH6pO.`PaqnDP<YC-0/\#@3S693Jft'LqPZYJuTPq<uF=Z;b\k6Am)sY6YbsIPB4o?(O.k/Xt.QkcgpW4VR
%&n%`^UWderL9,Aof,->fW=ub0qB[8^6daa/,PiXO(0#P41$kN9<%a3IHbW8b!%'-"1c'oG7V\%^1BUsGqs@3#X*-l/;Q'&^"udrJ
%P#A+##k*W&rl<@C(*Eo?6EDg=q#*ZH51Di(s&V;BY,Kcd\QhkWI?\iX8/[^Wd"<#$0ae(TD?,rmc,r"7;FK3&5Ad?&:XKCJ$NB$C
%3=O!([o#I3mBuRVn^>;gM(q]2B$4)5b2Xc2H1cJg2IL@(_??j%ppQ$S@LhWfIqP_:mrM8mYV,^l%G1ESbVYhR#@EB1<.IttAh1Mi
%N^#=59IO/0^%N#9>_2s;\`-k="f%m4ALQXrCKCRpL63SK/S$l>>_RneH`4#i,-g8R<!PntV.A`b=WmKt;.=73Oa[hQE7,cq%sQ?K
%%c2;f-!3IZG\UX<iE\W;ODo"uRPkcpM\:#O89k^,d7L%Y[$:SVk[_,Kd6UtWeY+M0/(&IW8Wl+qfqM.OJ>k%b'5UX75XF<_V<!.M
%]?;oKUq#MtXuo[W[k&1eIm;`_Ha6qN!7#Nl@'ICd/;E<OJ\YE6/(S2.R]%n8Aq;3?nI:c),[d$"<pe-mY[&()"b.Yr9S3(-1?Q!6
%q$g!4FDSk.@!cLT/]RMQ55m2s:RFf2WJ@u`"r<^Hi+VC-IdW%"C6[umnV#1o/S66+)N_.7XE[/!L0`MDR//\c[Xf+pDO4\Bp2jW<
%/7uub[kLtfm%_pO<&@u)O3er"b=Md#^#Si#+_)f$7ST)tie^2El@nTUSCp>)LT[f7d;'RrVYAisjVm4u?[R5X&=s23HZ8j$^oB]>
%"aoBr"2qI0EtqNgX-j%,f7aj-p+1_Q^?FK<O\!%kAgU#;G5Bf4@s%UMs3-RBMMad0PS/s^DJ:G7rOG"8dY'Z(lPg@\1sI%&`#QHo
%S)L2,<X<7oCeCj)^B^h!P$CT&'>lM&B*.s7XI?#.J>JsMG#G8<.3F7?e/(oHNsn4F+SW\7W_j4d/3c_I+:QL-iY;nf<.epODbKNX
%&p<i7+F.uRfSe<GfcZVQOiTW/n.38*n,22%GGcjJL^P"Re[&'@eQSgPB8GRBdo"?p&o1AQP%-m"c(Adn7^*]u?^aGYi6L(oEpo)Y
%]1ZD%!*Spm\:5:1URX=W=/(`o-VYbd]M>g['@@%!H0a7?'%.MNpsB!>i[4EUeI,mR&+I\/@uu#Mq?bce2-LK='_l03Y2fhpcm(%!
%TJs;B&9q+uD/'g7@3X9tAY]?\Il^.BdCP_2p?.m)0^QSn?Zbe*9B;ntZ;h-kG]3/E66L3,TVf3Z1QP(.SXFOjKMp8uUtpinpWG`F
%KiV,,Rb7tchRD6U[Fg_HA4=Hg*P)EHOA(Zb;i`*G:s%`QhITIMOO%-OG85'oSVmXA9'!0r(MF0f-1-0MWo/8k2':<Pj;u1>@Z`C^
%@R5G2pcX-KH\jI63GJ6.VukTWV7tfYDc,dN^2'VmnsHDc?p%3;3l%:Wj,`I_aXe!/^#.td^D7MGW</mYIY"/$J9OqBa6W4bp?JqO
%"V+sGq-"Am-EfmhHtLP.ag+U'9uT@J`BXP285cO9)bcGKmXBA\Qs/c`,s=bF\oi^rkWJb1'N('#f'SSbD(8=]'E@,IJcY(Rqf&k*
%0\)n_V2]$7@(5U8fXL-6.GCRlZC@tQ3PFh$GWfF+o6p\^[eS+g"PLUaC`k4:FJ0qGmJ3IeqtUN)BWeuoXmJ*1h?^I-0cW9j+c)E$
%$>aejkGZ4V/j]L(hG:'Gs%+J%M?4L"I=`R%[^P,0>N/P\]"6/O)$cFbn1u'5>thuqqH1XAX9@__7m8u`IdKgUc-IY+at84-CPq^>
%K)o=ND/9\+1j,)[5)75-l[,qBHFMhPUI]n80?7,hp2J>WU0,;sW/"fQ:YVDu/SbOM?:B2OcU&hB&0'[6Dpf0-3"^MUNFo3!X=K>X
%[#1S!ic4`2(+kK>FY;:"\#qiAg``I(jUQ:*kT]]jKWngf-%=nbVIdAWp2eGj%^"N8P-q!$g=A_#@YPP`UO*of`q1ST<C1DpJ!4hD
%\iJ<8"9`$!D7A"+'gVaf)[>)0!X/Wk@0cGsmjGZ<OA((9NH"@sOZ20L,(!kNf")[/+N+K;\$qU?DCVH;7Rs;&rq^Rk4m50d(?k^G
%RqJ9<$`B+8-_h6UF[[N%YnV%MiSLM$,5(G!b[j,5;Pke/_d.<@8b<9O?;TPF4d"*t=<SX84l&qeD5s7jQnq>*hPV_<64QR/<,C-#
%`WI4/ahS0eT9cRfdUBuJ:n,<Z>-C));A"F/Z02R.'":7?1V]B+&*,kZ[W@$?mlPNHqk>Tbi-\+9mrlFM'H&k\\P84k-H6L0AU:"!
%_7*:mPrSh>Zpt"W3t/"h:,X>S<>S%$'u(qp+Z"48g^4FqX'8D9\R\WgS/.morP]B(llO+;)+M6M#"$cbi5A[[&(T*U=sI3YUkoBF
%<We0F.@j<LLAp@4^chShb5o0f-)qs7&<XUj9?,&DOQs/OH=b;GUPC@?OjeAm<G]_j"cDlFH2(A3(_3[u3)9C"TBFG9TZ"Y7qnuF:
%FH@jBFRBs#T`sbHe*9%cXqhj70ZA_J?A$lkPuKje5\hDj8Rh0i:PKk::QTgk-(h00-%\6$Wj^:-A::DN2JRI\]lj4$)T7gNYG1tF
%.1knkFbO4-km:O[.'8LNMfd[TqpX]q_?H69L,&jF^iQ(4;P<.?gO0#8P'6N==sV;[j4#IuVl4^]qrFP1=0Y*+mW0\\/@<QaI]h\d
%YFlX%NP][ONjX%^lO(<)^Njn*-#i"H*09jnr9mQS784'6b^j54=mbhM>nc-;q>r`B]@sHL#^"1"HL6ciSnCF]TS!A_&l*0,C3OZ:
%TS+-a&eROL9_*T.U-m8+K(;\HEp>bs5%/o6e4KoBU,mB$V1#1C\U#)WmrPN9Y_uuG*cX-81rt+t;dJkd\`XYXH-Sf]l/(dJ/db=!
%./AfUgMP=,Y-NX_g1kXjR&i_Dqdp/r`*'gph10C4,&5^)G$mBeBSfd<(:Kf.0u!DH?;H@kaUo2=55Aj1"*A<Hs((J$:IO*Q[S6$3
%9#&,kfhsPqb]i;S;,D.oVVPLJ8KWPSR4.elFb.$65M\XYj#(#(TpY"Lk,;,.0\*,$3TZ%Lcrm$1dr>n@&2%6[XqkZk`l:)#nP6J$
%GBTVcIQ61s.A*>R,<gC?6e+rqUJiul`i$qn77[uEkN<pnEFe*MHeF[n-cp).3ONfuD33FT$p;ZQdkeuPOO2<i**P+2<'-<f6.5k!
%*@8l5i%NU:SKS-"U$_E>p*A?rS7T\KR7[&Bi2\crr^mO,@80.q.2&cR/)GSspUp>m4m!phpTJt9"0-oDgTM/ODHdCC$M_3fHRCZ'
%qUDl_WR<:nkYd'T3,-mP)`XT%3J<$$SSEn37KV2"I_B@^ZlF'DA?G[1I-`>ZD0t!l-#(ub4_\&-eQf4d?52a:9RhpD7;ktG5IS!4
%o(/^9k8W_gMHg4XY0#rBq/W;uB;Ld?^sb2),"V"?0&boV/n5eRq7QTbjoS\?Ree3mZaCo*`V\>TZkc!aX`ZKe!ZSi,Z<On&;g-r&
%j"%-IQ5E=4.S?_3%(_g`n%:ei4uY@'"1CaehNeHp<$bO>:a:#ca0U=s=QVeYBV(WGWtPjTXaUA3b3,S)@2%m:<)_Jkb=<4oVqMu2
%fcNG#`Ao*<GV6nn[m&Z>f54>U;hWkg*3DjdfZY_2AN/R:ES8fmp!]#tS=C&"lm9+274^uu=[6C)Q'/!]B-\EX<`+NJi#E1^1$QgD
%$B2K-<cUosaD'-l)sKcQarDkX5Y4ti79>^.oC(\_YdGkH(o3@C(8[c`E^o6`MhcbYn@m/Saiu-V*<a_3nRrPRA;YZ#FJ<!H16iap
%O[C;Ii=M8He&6nl7VKiq*XG\c?`uNi7H>=IJk/s^?s5$PE`rn#DNYUh^?FPI,$E\-.ZUY;Z)rf,2.s-I!M9+h+>ltN:?:_ZRX2fd
%?m?T6'LX(31X"8CFmksf`*/L2'KGZ8f*D_Z=c)9lD>g*t3Cg9*DdW/*mPms\eVj\7R\`_b\gnhWB/p8_o(=np8C**/3aOiI"1');
%:iE?M2XeC)\c'KqmLF>H/h=ZX<^&]SO.KY?c272q5#39lSBT52feY]?a'1#IO@f0W$i;^cX!"V\Ag!PRmNN?PHG=9u!@DS)&lu&a
%lUI^@=9BCqMeJS:[$kcr_'t.nr^)I-V8rhMVA5TqP!1uP"J2n*BtEk[GR3D[q`DKpMNamU#MuiZ.r!BEpkm\4Qqm!U\Z9O4*8nV6
%+BG_G6$P\l^&WbZ(o>=2+r7tZ8=t7-(R3uH#C'@3C&7ka3gWmZOXlC9%K6l^@Rp\4;O-N)9L8scL1CjYoI(R>iWSW9?lK@Nqe3+F
%FmcY56hdCXF![*IWr;]6f,$n8oVdn[ksOUZf.8(e/U?U[nQh1j8YLQNl!fn3&MEX0%d.jLPIAd#U5It9@2H7#*s4F1.@<Di\tn(;
%':7Acj?Edb@a^9ce<-tnTp.CFcqX9XQX3&XM_An->M5eI\4&:,B2s%=%,li8A/qqc;7ni?;:#uE#YI(,<GGq6Hn*AEOgiic$2@Fn
%(/ZGo8FS_`ikmbHVp>QKe_C2(%Za`'..ItT#r>=VmBZ%u5KO^Z6OP]QZ*g7&J&oP%--1FA;&""+\$JC$-qb85@OeBrlQI3n]:P7e
%8_puuMWo;)*ZM"21t3JT5Pt+O'[(WSmHW,?Ja[>fp2DUQF;`qB[rB^STWkLn!QNN>VJkcP\`oVij<CGeRUPgdBjP."V'Xb0L$u_9
%@TWNP%nB,aG''?&`/W]%[*j!E&k"!F\+sOeZ_=ZpVY0q7W7;7X<9!5jULhY`2X<*lf96lEM)<%SZ`JY'IO3?>:#JOWqHTC3)8b,V
%".]m$rNb`hG/+c58tf2r$gHS56V%6cU))";D/9]1J*uXeR4g36m'b>_GK-0_r$7\o656\(o:=ol"DWEm#U+e.d_+G%111<Jo0TDV
%o[<P"n,E'Z\ZI8a1b*K7db;S02p0fe,15I'H_-k+(*@3n1jdCa$.laeL[&'JY'b]jT4q_XU_["ZrE7_V%?&Nl#>+;t>Z`c>7@i18
%IJB(C]$1sY9=c!K`"7"[@eIaX*00#Wbr=HIR@*AhUGDH_<6SqdSg6Mn*"b"eCrNM.V-E@`F1pgW^T3G,0RR)"(?m[X)GM,b]-[n#
%m&kJ<>q6/h)2(>t>mHAaR&_,PaCge@Y9`;2V9^H;@3=o.QlG!Ti;!m"d^r/`k":,,;OWUL9top\]<^qR>Mq6q;EOBh_dn)=/$-43
%7rCmA2[trkD+Lb9@'6Veq_S3<$9UuFb]-ikQn"J`6%mbjm'?/_,8:Er<U1!`C8FB>L5="WO?O2f,7I9m0#A5:F;Jt77m\7O"+VQW
%\X0n8$jh#`kYQiqmL$.ZR9(:f,1&(q"<Xd3HMRkig1BlAW(0nF]_ak_bAuh8M'2MLOW\=BhJ.e96_/nd!_ju5I@m8Ajg.?n8iDe"
%aqeLW#eBU)9>$N,[W$ekk&FN>)',b5gqo6t*\gdi9`qB\@<qsMEEN"@+m:CY+\s0Kd3/q0"P'`;=\#WV1\4`F"bIBg!q_be7%"&&
%e?5m%YlSo6nj\+U3GWgTIbbTZe50\&\CT3C,PoB+cl^<PSdU$YP<F1+@luukq2Vd#n$a#7SkOtU`[KeIc>ot59Xu48IKJp-&"-mi
%iqRBaOs_ndDXq[$2q`\5lU!YLqR6'5_TQB@ZlE=sY>dZ[c^=/`&#j!)+anRsl\an,d*'B'cTM"j-;-G9Gi"oj_B5hQ9Ikar"!tMi
%.23Pp%dCXKRu6qU3LP>8Y_J)1kII]HE55ZT6Tlg`[^[kZZ/*E?btf9#@KD,@ZF?:G#g.BHfIT->;Dp]N(;WAuY,QQfiR"MP"fAO4
%E$P<'Y?b7OFT?fJ\feS5F<X;2`\L`5X_;S5C$9Ctbh`$Rks0?]!7uD[TCNohDYami%/rM^Y2%")G%=u5^H!^W<H6^+fk"h\pOaU;
%;utHE53n4q>L-:-mS@/3;BcAQn"?66QF1<>Q-WHV=`[Z(`,`_G*WRN)k7X4O!uNe)-GMhbX9s9TQOk6@:B]>8rma?F?lQq8X1%H4
%RdDM,egB.%Xe-;%3K_k2]2spJ4nM!cYK8_B>:ZWa^jm,K-R<&u%98!&W)b+'6W"<3.$H)_>A0r+=2taBa`ECN]#"W$Q^^6:IBp<o
%=4n5ma+q2IhPO'17Hs.Nm=1rP-96l\^[lm?>7aW6T2Y!S>WXjgr`k([<*>_;UBS\kYj]qhpJe2(FR3bF*:d0(S7hpbESaPfom/+4
%MB+F0=n_1:/C>EOerFEiR4QP&Q665`FA'tZ"fVr5.]]GH:K(uK?X"dT8Xs=eHf_2jOmPe5&F$(!"WN$X+\`<g8-t,EOSL3kW$*h$
%X+p]WhML]sNp"a)q,!sParrh5;:pba@\#J+-ssp'Q;DmhSVkcZTfD+W_gYJP`T(]@R2nKRmH8-f)NRsj^.V_\AjO/[J=M&p(]MG?
%fC<oT'b"<,k84BT<aqqP8\mO'f;^S30(4QRKRc:a0DM^?HDktjIn1`+pq1LjNsf-]#l5gPJN.EuBY#qE28>3Tg45&BGkh@ZN0@2p
%P.$#t:L#6/goci[`5jZ:IAAmgN2T_>Vkb?cZt[dnl[+3ebIT=?doQ%21]uc'8eF`%M/;h\Rq,i^<G@,5DK_,WcG,;EqOG-JkS&3t
%^2BJsju\J`N@Ge+Xuu\akLXd9>'^I?-rakcmLj/$"A)IjEQclcj_G/#.kS>dP*o&<+ib<<$l0B[)dbB?(r0Eq-h]4]I(2fegN6VI
%\sB%dXBm:LkH_B[<)h>#XKrSJ+DXlJ/:'1^\^j^iA7+&oB[m:nNIo66JhE:"F<+Tj7[@Z%_Vote"5RWtNWiXJI.lW+F_Z^8%-iS'
%*-LQBG8P='rqaLSOZ@Wb'dYbY"jM3M8);&J^rdJ\-NHm"(iEWCZ4!Zb;`?A1Iu'[=;up?A*[Q^q8*3j9,/RBd51Ac)';:G`R%g4s
%*lKj+`)1,Tro#):.V]Cu`Y0%+"A@hLH%B6N<g?[p[k18QD"a&?136eAdSqJdU7H)IOh-R)*AZ;!em1EIEnm(Y<m-jKnF<`,KgRq;
%*jmBXG>d)m.3DiVkX2<'Sn/@oR>mbD-&AYr3)r?TOEaSgHC\uAqYVlEH?D]g$KdX\.F'hfeRjo,XFRlL'sp7a]b.F(L2K/\%_q=Q
%i!K\Z)$Wb6-/`C)41'3\hJUg7M)$kk]\o$R[.PJ(T?Ud"k9<%N)KO,V&<1>C61ro7ME;MnU#%O="p6Vb.R+gLBF%*G(RSq(RVc<@
%p;CWEZXt?uJnoEDV6C.;9sb7B6sXIN77-;<8DsE10pNe"*-[Y.&p1Dp_/T%tKp6cJ%JK9[UZgeUWfX5mGALQffCJYq%@)X0\j_?k
%]Y*n*ViBoC#@[LQ.%,n`7d?h"-/',B(U[Y59u[9@,[6PT'.c'+K%EP0kNH=HkD)c[HrEF#lR)s;o(/9aK3F3uj_8iIP]+S8/CWn2
%akejM_2)K%>!FA5*3#i.iiPr'iLZi!#WWI=:DA^GZ6Ec3-AtW!qsB6`!<ju]k;jb,8an9_:Nngkq=BTTOK&q#B"<^Sbh2L0.2R;p
%ejfhQ_o@2MXJpf]O;Ypaf[PdlE2;ke)uI`&XUoK5mg3#El>L+<WRcc*MP2M[C4,RULc$K$>XO)-U^5VFNRlPNrFsUW>_,8gF8P+4
%"V?$e7L6])-Si='qN7^N)PrT\%Q_P;+f"TqNkp*l?k^sN?)jWeB3Cf](L).=[Y0]LKam>!N/DGuGsqjf"Ikj^/uA\'`f-"Y9:X?>
%8XSK4CRm8%+-fnqg")m3i4DMh^t0)A]+VDGf">_1;dXEWEmds+116"ebqmfa+@>9ZkhdVu#TY-&DE8H-[%uV[^eQGZqjueL7nX:N
%idac'B0`nGpp5>=+EgIdH289K\>V4[M7;Y\eUPB@;FH^66rXCpT>7+:.II<?bRIh"k)qcUEhcMB&9LM<-2UYN*KFklqcg^P"bX.T
%@`9[^$5,P(>rE2`Pcl`Ygp1Rj^c`$$is>3n4qGnqX'FU$'O\/T;oUIta@[@;$+fT9c_SX6\6u&L#9*Pf5U'K;cIeB`W_EMN3k2Vh
%6Q<o4rC-kF5W'!B&"81kiL^M35brd"kIRmN"4p%<'j-rWE`2R1$ZA0CbYdjS5TEDEJfgNG>:CN#p&1WPn;7Yb"Sl0=1=I@Y$7Nd"
%kpL9\@eap.,n;PFQS;2)LEd9snXl:<G)oqoWs@'e5$o#$CCA8dS[!5Bj7/:s3VTN_6WY>7j5i#"/Wp>n,[=To7E7'Q#Zf1,g\gF=
%dlm=4W?Zr0""uI*?Qc\lLF^1^U"5W57t-0Qm3H!V.U5O1JB(I"ah2F>=BB'/L`VZ.?:h%rnqudr:TJ3eoJC*N;DuORS<PO<QpuLN
%g-_*F&!XJBUWVdsHZ8taV?BU3qP!V0FfSkB\ht`:kDog$Y4G")].!Q/b`fHQfS9MLkNM+'s$0M1JXCc\c#9M[a%j"qioc5mB^H*(
%ngX[38&l!K)l6`bWr4)h+a8,WD1dohUR3l8]*N@2TrXsL9s25M/3_p*_YmAraA6o^nYh6G&LnC3]L,ht@O3JU"*\85>t#@a9Yt+k
%H6&=nKEp),1/gIi@SZ8L6]MI/0sRt7i\<m-?D$CTErqfBan?mA#AoYNOn->?O-[rs-m&97gS_.jM:Eg`J!Aq)2"]<_7YiX$Y1/Ac
%%qLVd)G?8?2;6/Zo"_i+4%6I8aJ,n5g/UeG#_KFN/CKJl/GDQN7::8QbqnlB]06"j>BTU@+Mn@$*uKXjqMQeoZ%eH^`#U?35SD_K
%`I>qGf+*sV$)`i`d<9"Y/):N*r/4s?f\`"`9duds@5P2:f@R\"qb#`2S"e""hg5(BD]euKpQmO>s8M,<=24W2qra#)s6K?IYE'cT
%pu*3;op7W+*rl*,c%"S7IXLtNh5<2=*Zs8:r:;S6hgBnNn+f`imlipaqY\OWa+mIjroJWgn>"_K?G64*c[U?<ir@=[][m~>
%AI9_PrivateDataEnd
